
Mini weather station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d42c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  0800d610  0800d610  0000e610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd78  0800dd78  0000f20c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd78  0800dd78  0000ed78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd80  0800dd80  0000f20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd80  0800dd80  0000ed80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd84  0800dd84  0000ed84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800dd88  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000914  2000020c  0800df94  0000f20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b20  0800df94  0000fb20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d50e  00000000  00000000  0000f23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1f  00000000  00000000  0002c74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00030270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014d8  00000000  00000000  00031d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7b7  00000000  00000000  000331f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000227ae  00000000  00000000  0005d9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105979  00000000  00000000  0008015d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008458  00000000  00000000  00185b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0018df74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000020c 	.word	0x2000020c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d5f4 	.word	0x0800d5f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000210 	.word	0x20000210
 800021c:	0800d5f4 	.word	0x0800d5f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9b5 	b.w	8001024 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f84d 	bl	8000d68 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f840 	bl	8000d68 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f82f 	bl	8000d68 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f821 	bl	8000d68 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b96a 	b.w	8001024 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f806 	bl	8000d68 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__udivmoddi4>:
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	9d08      	ldr	r5, [sp, #32]
 8000d6e:	460c      	mov	r4, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14e      	bne.n	8000e12 <__udivmoddi4+0xaa>
 8000d74:	4694      	mov	ip, r2
 8000d76:	458c      	cmp	ip, r1
 8000d78:	4686      	mov	lr, r0
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	d962      	bls.n	8000e46 <__udivmoddi4+0xde>
 8000d80:	b14a      	cbz	r2, 8000d96 <__udivmoddi4+0x2e>
 8000d82:	f1c2 0320 	rsb	r3, r2, #32
 8000d86:	4091      	lsls	r1, r2
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	4319      	orrs	r1, r3
 8000d92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fa1f f68c 	uxth.w	r6, ip
 8000d9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000da2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da6:	fb07 1114 	mls	r1, r7, r4, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb04 f106 	mul.w	r1, r4, r6
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x64>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dbe:	f080 8112 	bcs.w	8000fe6 <__udivmoddi4+0x27e>
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	f240 810f 	bls.w	8000fe6 <__udivmoddi4+0x27e>
 8000dc8:	3c02      	subs	r4, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	fa1f f38e 	uxth.w	r3, lr
 8000dd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f606 	mul.w	r6, r0, r6
 8000de2:	429e      	cmp	r6, r3
 8000de4:	d90a      	bls.n	8000dfc <__udivmoddi4+0x94>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dee:	f080 80fc 	bcs.w	8000fea <__udivmoddi4+0x282>
 8000df2:	429e      	cmp	r6, r3
 8000df4:	f240 80f9 	bls.w	8000fea <__udivmoddi4+0x282>
 8000df8:	4463      	add	r3, ip
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	1b9b      	subs	r3, r3, r6
 8000dfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e02:	2100      	movs	r1, #0
 8000e04:	b11d      	cbz	r5, 8000e0e <__udivmoddi4+0xa6>
 8000e06:	40d3      	lsrs	r3, r2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d905      	bls.n	8000e22 <__udivmoddi4+0xba>
 8000e16:	b10d      	cbz	r5, 8000e1c <__udivmoddi4+0xb4>
 8000e18:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e7f5      	b.n	8000e0e <__udivmoddi4+0xa6>
 8000e22:	fab3 f183 	clz	r1, r3
 8000e26:	2900      	cmp	r1, #0
 8000e28:	d146      	bne.n	8000eb8 <__udivmoddi4+0x150>
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0xcc>
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	f0c0 80f0 	bcc.w	8001014 <__udivmoddi4+0x2ac>
 8000e34:	1a86      	subs	r6, r0, r2
 8000e36:	eb64 0303 	sbc.w	r3, r4, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d0e6      	beq.n	8000e0e <__udivmoddi4+0xa6>
 8000e40:	e9c5 6300 	strd	r6, r3, [r5]
 8000e44:	e7e3      	b.n	8000e0e <__udivmoddi4+0xa6>
 8000e46:	2a00      	cmp	r2, #0
 8000e48:	f040 8090 	bne.w	8000f6c <__udivmoddi4+0x204>
 8000e4c:	eba1 040c 	sub.w	r4, r1, ip
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa1f f78c 	uxth.w	r7, ip
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e62:	fb08 4416 	mls	r4, r8, r6, r4
 8000e66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e6a:	fb07 f006 	mul.w	r0, r7, r6
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x11c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x11a>
 8000e7c:	4298      	cmp	r0, r3
 8000e7e:	f200 80cd 	bhi.w	800101c <__udivmoddi4+0x2b4>
 8000e82:	4626      	mov	r6, r4
 8000e84:	1a1c      	subs	r4, r3, r0
 8000e86:	fa1f f38e 	uxth.w	r3, lr
 8000e8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb00 f707 	mul.w	r7, r0, r7
 8000e9a:	429f      	cmp	r7, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x148>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x146>
 8000ea8:	429f      	cmp	r7, r3
 8000eaa:	f200 80b0 	bhi.w	800100e <__udivmoddi4+0x2a6>
 8000eae:	4620      	mov	r0, r4
 8000eb0:	1bdb      	subs	r3, r3, r7
 8000eb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0x9c>
 8000eb8:	f1c1 0620 	rsb	r6, r1, #32
 8000ebc:	408b      	lsls	r3, r1
 8000ebe:	fa22 f706 	lsr.w	r7, r2, r6
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ecc:	ea43 030c 	orr.w	r3, r3, ip
 8000ed0:	40f4      	lsrs	r4, r6
 8000ed2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed6:	0c38      	lsrs	r0, r7, #16
 8000ed8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000edc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ee0:	fa1f fc87 	uxth.w	ip, r7
 8000ee4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eec:	fb0e f90c 	mul.w	r9, lr, ip
 8000ef0:	45a1      	cmp	r9, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	d90a      	bls.n	8000f0e <__udivmoddi4+0x1a6>
 8000ef8:	193c      	adds	r4, r7, r4
 8000efa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efe:	f080 8084 	bcs.w	800100a <__udivmoddi4+0x2a2>
 8000f02:	45a1      	cmp	r9, r4
 8000f04:	f240 8081 	bls.w	800100a <__udivmoddi4+0x2a2>
 8000f08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f0c:	443c      	add	r4, r7
 8000f0e:	eba4 0409 	sub.w	r4, r4, r9
 8000f12:	fa1f f983 	uxth.w	r9, r3
 8000f16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f26:	45a4      	cmp	ip, r4
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x1d2>
 8000f2a:	193c      	adds	r4, r7, r4
 8000f2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f30:	d267      	bcs.n	8001002 <__udivmoddi4+0x29a>
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d965      	bls.n	8001002 <__udivmoddi4+0x29a>
 8000f36:	3b02      	subs	r3, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f42:	eba4 040c 	sub.w	r4, r4, ip
 8000f46:	429c      	cmp	r4, r3
 8000f48:	46ce      	mov	lr, r9
 8000f4a:	469c      	mov	ip, r3
 8000f4c:	d351      	bcc.n	8000ff2 <__udivmoddi4+0x28a>
 8000f4e:	d04e      	beq.n	8000fee <__udivmoddi4+0x286>
 8000f50:	b155      	cbz	r5, 8000f68 <__udivmoddi4+0x200>
 8000f52:	ebb8 030e 	subs.w	r3, r8, lr
 8000f56:	eb64 040c 	sbc.w	r4, r4, ip
 8000f5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5e:	40cb      	lsrs	r3, r1
 8000f60:	431e      	orrs	r6, r3
 8000f62:	40cc      	lsrs	r4, r1
 8000f64:	e9c5 6400 	strd	r6, r4, [r5]
 8000f68:	2100      	movs	r1, #0
 8000f6a:	e750      	b.n	8000e0e <__udivmoddi4+0xa6>
 8000f6c:	f1c2 0320 	rsb	r3, r2, #32
 8000f70:	fa20 f103 	lsr.w	r1, r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa24 f303 	lsr.w	r3, r4, r3
 8000f7c:	4094      	lsls	r4, r2
 8000f7e:	430c      	orrs	r4, r1
 8000f80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f88:	fa1f f78c 	uxth.w	r7, ip
 8000f8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f90:	fb08 3110 	mls	r1, r8, r0, r3
 8000f94:	0c23      	lsrs	r3, r4, #16
 8000f96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f9a:	fb00 f107 	mul.w	r1, r0, r7
 8000f9e:	4299      	cmp	r1, r3
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x24c>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000faa:	d22c      	bcs.n	8001006 <__udivmoddi4+0x29e>
 8000fac:	4299      	cmp	r1, r3
 8000fae:	d92a      	bls.n	8001006 <__udivmoddi4+0x29e>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1a5b      	subs	r3, r3, r1
 8000fb6:	b2a4      	uxth	r4, r4
 8000fb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fbc:	fb08 3311 	mls	r3, r8, r1, r3
 8000fc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc4:	fb01 f307 	mul.w	r3, r1, r7
 8000fc8:	42a3      	cmp	r3, r4
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x276>
 8000fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd4:	d213      	bcs.n	8000ffe <__udivmoddi4+0x296>
 8000fd6:	42a3      	cmp	r3, r4
 8000fd8:	d911      	bls.n	8000ffe <__udivmoddi4+0x296>
 8000fda:	3902      	subs	r1, #2
 8000fdc:	4464      	add	r4, ip
 8000fde:	1ae4      	subs	r4, r4, r3
 8000fe0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe4:	e739      	b.n	8000e5a <__udivmoddi4+0xf2>
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	e6f0      	b.n	8000dcc <__udivmoddi4+0x64>
 8000fea:	4608      	mov	r0, r1
 8000fec:	e706      	b.n	8000dfc <__udivmoddi4+0x94>
 8000fee:	45c8      	cmp	r8, r9
 8000ff0:	d2ae      	bcs.n	8000f50 <__udivmoddi4+0x1e8>
 8000ff2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ffa:	3801      	subs	r0, #1
 8000ffc:	e7a8      	b.n	8000f50 <__udivmoddi4+0x1e8>
 8000ffe:	4631      	mov	r1, r6
 8001000:	e7ed      	b.n	8000fde <__udivmoddi4+0x276>
 8001002:	4603      	mov	r3, r0
 8001004:	e799      	b.n	8000f3a <__udivmoddi4+0x1d2>
 8001006:	4630      	mov	r0, r6
 8001008:	e7d4      	b.n	8000fb4 <__udivmoddi4+0x24c>
 800100a:	46d6      	mov	lr, sl
 800100c:	e77f      	b.n	8000f0e <__udivmoddi4+0x1a6>
 800100e:	4463      	add	r3, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e74d      	b.n	8000eb0 <__udivmoddi4+0x148>
 8001014:	4606      	mov	r6, r0
 8001016:	4623      	mov	r3, r4
 8001018:	4608      	mov	r0, r1
 800101a:	e70f      	b.n	8000e3c <__udivmoddi4+0xd4>
 800101c:	3e02      	subs	r6, #2
 800101e:	4463      	add	r3, ip
 8001020:	e730      	b.n	8000e84 <__udivmoddi4+0x11c>
 8001022:	bf00      	nop

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8001030:	2305      	movs	r3, #5
 8001032:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f001 facb 	bl	80025d4 <null_ptr_check>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d133      	bne.n	80010b2 <bme280_init+0x8a>
		while (try_count) {
 800104a:	e028      	b.n	800109e <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 800104c:	f107 010d 	add.w	r1, r7, #13
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	20d0      	movs	r0, #208	@ 0xd0
 8001056:	f000 f832 	bl	80010be <bme280_get_regs>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d114      	bne.n	8001090 <bme280_init+0x68>
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	2b60      	cmp	r3, #96	@ 0x60
 800106a:	d111      	bne.n	8001090 <bme280_init+0x68>
				dev->chip_id = chip_id;
 800106c:	7b7a      	ldrb	r2, [r7, #13]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f978 	bl	8001368 <bme280_soft_reset>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d110      	bne.n	80010a6 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f001 f919 	bl	80022bc <get_calib_data>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800108e:	e00a      	b.n	80010a6 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2001      	movs	r0, #1
 8001096:	4798      	blx	r3
			--try_count;
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	3b01      	subs	r3, #1
 800109c:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1d3      	bne.n	800104c <bme280_init+0x24>
 80010a4:	e000      	b.n	80010a8 <bme280_init+0x80>
				break;
 80010a6:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 80010ae:	23fe      	movs	r3, #254	@ 0xfe
 80010b0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80010be:	b590      	push	{r4, r7, lr}
 80010c0:	b087      	sub	sp, #28
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	4613      	mov	r3, r2
 80010ce:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f001 fa7f 	bl	80025d4 <null_ptr_check>
 80010d6:	4603      	mov	r3, r0
 80010d8:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80010da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d117      	bne.n	8001112 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d003      	beq.n	80010f2 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f0:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685c      	ldr	r4, [r3, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7858      	ldrb	r0, [r3, #1]
 80010fa:	89bb      	ldrh	r3, [r7, #12]
 80010fc:	7bf9      	ldrb	r1, [r7, #15]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	47a0      	blx	r4
 8001102:	4603      	mov	r3, r0
 8001104:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001106:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800110e:	23fc      	movs	r3, #252	@ 0xfc
 8001110:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001112:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001116:	4618      	mov	r0, r3
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd90      	pop	{r4, r7, pc}

0800111e <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800111e:	b590      	push	{r4, r7, lr}
 8001120:	b08d      	sub	sp, #52	@ 0x34
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4613      	mov	r3, r2
 800112c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b0a      	cmp	r3, #10
 8001132:	d901      	bls.n	8001138 <bme280_set_regs+0x1a>
		len = 10;
 8001134:	230a      	movs	r3, #10
 8001136:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f001 fa4b 	bl	80025d4 <null_ptr_check>
 800113e:	4603      	mov	r3, r0
 8001140:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001144:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001148:	2b00      	cmp	r3, #0
 800114a:	d156      	bne.n	80011fa <bme280_set_regs+0xdc>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d053      	beq.n	80011fa <bme280_set_regs+0xdc>
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d050      	beq.n	80011fa <bme280_set_regs+0xdc>
		if (len != 0) {
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d049      	beq.n	80011f2 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	789b      	ldrb	r3, [r3, #2]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d01a      	beq.n	80011a2 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800116c:	2300      	movs	r3, #0
 800116e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001172:	e011      	b.n	8001198 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001174:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001182:	68f9      	ldr	r1, [r7, #12]
 8001184:	440b      	add	r3, r1
 8001186:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800118e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001192:	3301      	adds	r3, #1
 8001194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001198:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3e8      	bcc.n	8001174 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d90d      	bls.n	80011c4 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f107 0114 	add.w	r1, r7, #20
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f001 f8c8 	bl	8002346 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	3b01      	subs	r3, #1
 80011c0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80011c2:	e001      	b.n	80011c8 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689c      	ldr	r4, [r3, #8]
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	7858      	ldrb	r0, [r3, #1]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	7819      	ldrb	r1, [r3, #0]
 80011d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011d6:	f107 0214 	add.w	r2, r7, #20
 80011da:	47a0      	blx	r4
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80011e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00b      	beq.n	8001202 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 80011ea:	23fc      	movs	r3, #252	@ 0xfc
 80011ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80011f0:	e007      	b.n	8001202 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80011f2:	23fd      	movs	r3, #253	@ 0xfd
 80011f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80011f8:	e003      	b.n	8001202 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80011fa:	23ff      	movs	r3, #255	@ 0xff
 80011fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001200:	e000      	b.n	8001204 <bme280_set_regs+0xe6>
		if (len != 0) {
 8001202:	bf00      	nop
	}


	return rslt;
 8001204:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001208:	4618      	mov	r0, r3
 800120a:	3734      	adds	r7, #52	@ 0x34
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}

08001210 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f001 f9d9 	bl	80025d4 <null_ptr_check>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d13f      	bne.n	80012ae <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800122e:	f107 030e 	add.w	r3, r7, #14
 8001232:	6839      	ldr	r1, [r7, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f874 	bl	8001322 <bme280_get_sensor_mode>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <bme280_set_sensor_settings+0x46>
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d004      	beq.n	8001256 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f000 fb36 	bl	80018be <put_device_to_sleep>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d127      	bne.n	80012ae <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4619      	mov	r1, r3
 8001262:	2007      	movs	r0, #7
 8001264:	f001 f99a 	bl	800259c <are_settings_changed>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f972 	bl	8001562 <set_osr_settings>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d111      	bne.n	80012ae <bme280_set_sensor_settings+0x9e>
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4619      	mov	r1, r3
 800128e:	2018      	movs	r0, #24
 8001290:	f001 f984 	bl	800259c <are_settings_changed>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d009      	beq.n	80012ae <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f9f9 	bl	800169c <set_filter_standby_settings>
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	6039      	str	r1, [r7, #0]
 80012c4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012c6:	6838      	ldr	r0, [r7, #0]
 80012c8:	f001 f984 	bl	80025d4 <null_ptr_check>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80012d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d11e      	bne.n	8001316 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80012d8:	f107 030e 	add.w	r3, r7, #14
 80012dc:	6839      	ldr	r1, [r7, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f81f 	bl	8001322 <bme280_get_sensor_mode>
 80012e4:	4603      	mov	r3, r0
 80012e6:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <bme280_set_sensor_mode+0x46>
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	f000 fae1 	bl	80018be <put_device_to_sleep>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d106      	bne.n	8001316 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 faa3 	bl	8001858 <write_power_mode>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f001 f951 	bl	80025d4 <null_ptr_check>
 8001332:	4603      	mov	r3, r0
 8001334:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10e      	bne.n	800135c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2201      	movs	r2, #1
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	20f4      	movs	r0, #244	@ 0xf4
 8001346:	f7ff feba 	bl	80010be <bme280_get_regs>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	b2da      	uxtb	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001370:	23e0      	movs	r3, #224	@ 0xe0
 8001372:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001374:	23b6      	movs	r3, #182	@ 0xb6
 8001376:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f001 f92b 	bl	80025d4 <null_ptr_check>
 800137e:	4603      	mov	r3, r0
 8001380:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800138a:	f107 010d 	add.w	r1, r7, #13
 800138e:	f107 000e 	add.w	r0, r7, #14
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f7ff fec2 	bl	800111e <bme280_set_regs>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2002      	movs	r0, #2
 80013a4:	4798      	blx	r3
	}

	return rslt;
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b08a      	sub	sp, #40	@ 0x28
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f001 f8fd 	bl	80025d4 <null_ptr_check>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80013e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d124      	bne.n	8001432 <bme280_get_sensor_data+0x80>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d021      	beq.n	8001432 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80013ee:	f107 011c 	add.w	r1, r7, #28
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2208      	movs	r2, #8
 80013f6:	20f7      	movs	r0, #247	@ 0xf7
 80013f8:	f7ff fe61 	bl	80010be <bme280_get_regs>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 8001402:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001406:	2b00      	cmp	r3, #0
 8001408:	d116      	bne.n	8001438 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800140a:	f107 0210 	add.w	r2, r7, #16
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f815 	bl	8001444 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3310      	adds	r3, #16
 800141e:	f107 0110 	add.w	r1, r7, #16
 8001422:	7bf8      	ldrb	r0, [r7, #15]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	f000 f853 	bl	80014d0 <bme280_compensate_data>
 800142a:	4603      	mov	r3, r0
 800142c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 8001430:	e002      	b.n	8001438 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001432:	23ff      	movs	r3, #255	@ 0xff
 8001434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 8001438:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800143c:	4618      	mov	r0, r3
 800143e:	3728      	adds	r7, #40	@ 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	031b      	lsls	r3, r3, #12
 8001454:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3301      	adds	r3, #1
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3302      	adds	r3, #2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	b2db      	uxtb	r3, r3
 800146a:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	431a      	orrs	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	431a      	orrs	r2, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3303      	adds	r3, #3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	031b      	lsls	r3, r3, #12
 8001482:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3304      	adds	r3, #4
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3305      	adds	r3, #5
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	b2db      	uxtb	r3, r3
 8001498:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	431a      	orrs	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3306      	adds	r3, #6
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3307      	adds	r3, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	431a      	orrs	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	609a      	str	r2, [r3, #8]
}
 80014c4:	bf00      	nop
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d033      	beq.n	8001552 <bme280_compensate_data+0x82>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d030      	beq.n	8001552 <bme280_compensate_data+0x82>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d02d      	beq.n	8001552 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001512:	6839      	ldr	r1, [r7, #0]
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f000 fa1f 	bl	8001958 <compensate_temperature>
 800151a:	4602      	mov	r2, r0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800152a:	6839      	ldr	r1, [r7, #0]
 800152c:	68b8      	ldr	r0, [r7, #8]
 800152e:	f000 fa75 	bl	8001a1c <compensate_pressure>
 8001532:	4602      	mov	r2, r0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	68b8      	ldr	r0, [r7, #8]
 8001546:	f000 fe0d 	bl	8002164 <compensate_humidity>
 800154a:	4602      	mov	r2, r0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8001550:	e001      	b.n	8001556 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001552:	23ff      	movs	r3, #255	@ 0xff
 8001554:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001556:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001570:	2301      	movs	r3, #1
 8001572:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	68b8      	ldr	r0, [r7, #8]
 8001582:	f000 f815 	bl	80015b0 <set_osr_humidity_settings>
 8001586:	4603      	mov	r3, r0
 8001588:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f842 	bl	8001624 <set_osr_press_temp_settings>
 80015a0:	4603      	mov	r3, r0
 80015a2:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80015a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80015ba:	23f2      	movs	r3, #242	@ 0xf2
 80015bc:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	789b      	ldrb	r3, [r3, #2]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80015ca:	f107 010e 	add.w	r1, r7, #14
 80015ce:	f107 000c 	add.w	r0, r7, #12
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f7ff fda2 	bl	800111e <bme280_set_regs>
 80015da:	4603      	mov	r3, r0
 80015dc:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d118      	bne.n	8001618 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80015e6:	23f4      	movs	r3, #244	@ 0xf4
 80015e8:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80015ea:	7b38      	ldrb	r0, [r7, #12]
 80015ec:	f107 010d 	add.w	r1, r7, #13
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f7ff fd63 	bl	80010be <bme280_get_regs>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80015fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001604:	f107 010d 	add.w	r1, r7, #13
 8001608:	f107 000c 	add.w	r0, r7, #12
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2201      	movs	r2, #1
 8001610:	f7ff fd85 	bl	800111e <bme280_set_regs>
 8001614:	4603      	mov	r3, r0
 8001616:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001632:	23f4      	movs	r3, #244	@ 0xf4
 8001634:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001636:	7db8      	ldrb	r0, [r7, #22]
 8001638:	f107 0115 	add.w	r1, r7, #21
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f7ff fd3d 	bl	80010be <bme280_get_regs>
 8001644:	4603      	mov	r3, r0
 8001646:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11f      	bne.n	8001690 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800165a:	f107 0315 	add.w	r3, r7, #21
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f88e 	bl	8001782 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001670:	f107 0315 	add.w	r3, r7, #21
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f8a0 	bl	80017bc <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800167c:	f107 0115 	add.w	r1, r7, #21
 8001680:	f107 0016 	add.w	r0, r7, #22
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f7ff fd49 	bl	800111e <bme280_set_regs>
 800168c:	4603      	mov	r3, r0
 800168e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001690:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80016aa:	23f5      	movs	r3, #245	@ 0xf5
 80016ac:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80016ae:	7db8      	ldrb	r0, [r7, #22]
 80016b0:	f107 0115 	add.w	r1, r7, #21
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f7ff fd01 	bl	80010be <bme280_get_regs>
 80016bc:	4603      	mov	r3, r0
 80016be:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80016c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11f      	bne.n	8001708 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 80016d2:	f107 0315 	add.w	r3, r7, #21
 80016d6:	68b9      	ldr	r1, [r7, #8]
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 f81b 	bl	8001714 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80016e8:	f107 0315 	add.w	r3, r7, #21
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f82d 	bl	800174e <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80016f4:	f107 0115 	add.w	r1, r7, #21
 80016f8:	f107 0016 	add.w	r0, r7, #22
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f7ff fd0d 	bl	800111e <bme280_set_regs>
 8001704:	4603      	mov	r3, r0
 8001706:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b25b      	sxtb	r3, r3
 8001724:	f023 031c 	bic.w	r3, r3, #28
 8001728:	b25a      	sxtb	r2, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	78db      	ldrb	r3, [r3, #3]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	b25b      	sxtb	r3, r3
 8001732:	f003 031c 	and.w	r3, r3, #28
 8001736:	b25b      	sxtb	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b25b      	sxtb	r3, r3
 800173c:	b2da      	uxtb	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	701a      	strb	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b25b      	sxtb	r3, r3
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	b25a      	sxtb	r2, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	791b      	ldrb	r3, [r3, #4]
 8001768:	015b      	lsls	r3, r3, #5
 800176a:	b25b      	sxtb	r3, r3
 800176c:	4313      	orrs	r3, r2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	b2da      	uxtb	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	701a      	strb	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	f023 031c 	bic.w	r3, r3, #28
 8001796:	b25a      	sxtb	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	f003 031c 	and.w	r3, r3, #28
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	701a      	strb	r2, [r3, #0]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	b25a      	sxtb	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	785b      	ldrb	r3, [r3, #1]
 80017d6:	015b      	lsls	r3, r3, #5
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	701a      	strb	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	b2da      	uxtb	r2, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3302      	adds	r3, #2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	109b      	asrs	r3, r3, #2
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	b2da      	uxtb	r2, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3302      	adds	r3, #2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	b2da      	uxtb	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3303      	adds	r3, #3
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	109b      	asrs	r3, r3, #2
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	b2da      	uxtb	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3303      	adds	r3, #3
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	095b      	lsrs	r3, r3, #5
 8001846:	b2da      	uxtb	r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	711a      	strb	r2, [r3, #4]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001864:	23f4      	movs	r3, #244	@ 0xf4
 8001866:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001868:	7bb8      	ldrb	r0, [r7, #14]
 800186a:	f107 010d 	add.w	r1, r7, #13
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	f7ff fc24 	bl	80010be <bme280_get_regs>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d117      	bne.n	80018b2 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	b25b      	sxtb	r3, r3
 8001886:	f023 0303 	bic.w	r3, r3, #3
 800188a:	b25a      	sxtb	r2, r3
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	b25b      	sxtb	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	b25b      	sxtb	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800189e:	f107 010d 	add.w	r1, r7, #13
 80018a2:	f107 000e 	add.w	r0, r7, #14
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f7ff fc38 	bl	800111e <bme280_set_regs>
 80018ae:	4603      	mov	r3, r0
 80018b0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80018c6:	f107 0110 	add.w	r1, r7, #16
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2204      	movs	r2, #4
 80018ce:	20f2      	movs	r0, #242	@ 0xf2
 80018d0:	f7ff fbf5 	bl	80010be <bme280_get_regs>
 80018d4:	4603      	mov	r3, r0
 80018d6:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80018d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d118      	bne.n	8001912 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80018e0:	f107 0208 	add.w	r2, r7, #8
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff80 	bl	80017f0 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fd39 	bl	8001368 <bme280_soft_reset>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80018fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d107      	bne.n	8001912 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f808 	bl	800191e <reload_device_settings>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001912:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	201f      	movs	r0, #31
 800192e:	f7ff fe18 	bl	8001562 <set_osr_settings>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	201f      	movs	r0, #31
 8001944:	f7ff feaa 	bl	800169c <set_filter_standby_settings>
 8001948:	4603      	mov	r3, r0
 800194a:	73fb      	strb	r3, [r7, #15]

	return rslt;
 800194c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 8001962:	4b2d      	ldr	r3, [pc, #180]	@ (8001a18 <compensate_temperature+0xc0>)
 8001964:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8001966:	f242 1334 	movw	r3, #8500	@ 0x2134
 800196a:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	08db      	lsrs	r3, r3, #3
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	8812      	ldrh	r2, [r2, #0]
 8001976:	0052      	lsls	r2, r2, #1
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001982:	461a      	mov	r2, r3
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	da01      	bge.n	8001992 <compensate_temperature+0x3a>
 800198e:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001992:	12db      	asrs	r3, r3, #11
 8001994:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	8812      	ldrh	r2, [r2, #0]
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	fb03 f303 	mul.w	r3, r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da01      	bge.n	80019b2 <compensate_temperature+0x5a>
 80019ae:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80019b2:	131b      	asrs	r3, r3, #12
 80019b4:	461a      	mov	r2, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da02      	bge.n	80019ca <compensate_temperature+0x72>
 80019c4:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80019c8:	333f      	adds	r3, #63	@ 0x3f
 80019ca:	139b      	asrs	r3, r3, #14
 80019cc:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	441a      	add	r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3380      	adds	r3, #128	@ 0x80
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da00      	bge.n	80019ea <compensate_temperature+0x92>
 80019e8:	33ff      	adds	r3, #255	@ 0xff
 80019ea:	121b      	asrs	r3, r3, #8
 80019ec:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	da02      	bge.n	80019fc <compensate_temperature+0xa4>
		temperature = temperature_min;
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e005      	b.n	8001a08 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dd01      	ble.n	8001a08 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001a08:	69fb      	ldr	r3, [r7, #28]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	@ 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	fffff060 	.word	0xfffff060

08001a1c <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a20:	b0ea      	sub	sp, #424	@ 0x1a8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8001a28:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001a2c:	4bbf      	ldr	r3, [pc, #764]	@ (8001d2c <compensate_pressure+0x310>)
 8001a2e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 8001a32:	4bbf      	ldr	r3, [pc, #764]	@ (8001d30 <compensate_pressure+0x314>)
 8001a34:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001a38:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	17da      	asrs	r2, r3, #31
 8001a40:	4698      	mov	r8, r3
 8001a42:	4691      	mov	r9, r2
 8001a44:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 8001a48:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001a4c:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001a50:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a54:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a58:	fb03 f102 	mul.w	r1, r3, r2
 8001a5c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a60:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a64:	fb02 f303 	mul.w	r3, r2, r3
 8001a68:	18ca      	adds	r2, r1, r3
 8001a6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a6e:	fba3 4503 	umull	r4, r5, r3, r3
 8001a72:	1953      	adds	r3, r2, r5
 8001a74:	461d      	mov	r5, r3
 8001a76:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a7a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	17da      	asrs	r2, r3, #31
 8001a82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a86:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001a8a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001a8e:	4603      	mov	r3, r0
 8001a90:	fb03 f205 	mul.w	r2, r3, r5
 8001a94:	460b      	mov	r3, r1
 8001a96:	fb04 f303 	mul.w	r3, r4, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	fba4 1202 	umull	r1, r2, r4, r2
 8001aa2:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001aa6:	460a      	mov	r2, r1
 8001aa8:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001aac:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001ab6:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8001aba:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 8001abe:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001ac2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ac6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	17da      	asrs	r2, r3, #31
 8001ace:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001ad2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001ad6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ada:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001ade:	462a      	mov	r2, r5
 8001ae0:	fb02 f203 	mul.w	r2, r2, r3
 8001ae4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001ae8:	4621      	mov	r1, r4
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	441a      	add	r2, r3
 8001af0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001af4:	4621      	mov	r1, r4
 8001af6:	fba3 1301 	umull	r1, r3, r3, r1
 8001afa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001afe:	460b      	mov	r3, r1
 8001b00:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001b04:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001b08:	18d3      	adds	r3, r2, r3
 8001b0a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001b0e:	f04f 0000 	mov.w	r0, #0
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001b1a:	462b      	mov	r3, r5
 8001b1c:	0459      	lsls	r1, r3, #17
 8001b1e:	4623      	mov	r3, r4
 8001b20:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001b24:	4623      	mov	r3, r4
 8001b26:	0458      	lsls	r0, r3, #17
 8001b28:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001b2c:	1814      	adds	r4, r2, r0
 8001b2e:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001b32:	414b      	adcs	r3, r1
 8001b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001b38:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001b3c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001b40:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b44:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	17da      	asrs	r2, r3, #31
 8001b4c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001b50:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b60:	00d9      	lsls	r1, r3, #3
 8001b62:	2000      	movs	r0, #0
 8001b64:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001b68:	1814      	adds	r4, r2, r0
 8001b6a:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001b6e:	414b      	adcs	r3, r1
 8001b70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001b74:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001b78:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001b7c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001b80:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b84:	fb03 f102 	mul.w	r1, r3, r2
 8001b88:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001b8c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
 8001b94:	18ca      	adds	r2, r1, r3
 8001b96:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b9a:	fba3 1303 	umull	r1, r3, r3, r3
 8001b9e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001ba8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001bac:	18d3      	adds	r3, r2, r3
 8001bae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001bb2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bb6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	17da      	asrs	r2, r3, #31
 8001bbe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001bc2:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001bc6:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001bca:	462b      	mov	r3, r5
 8001bcc:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	fb02 f203 	mul.w	r2, r2, r3
 8001bd6:	464b      	mov	r3, r9
 8001bd8:	4621      	mov	r1, r4
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	4622      	mov	r2, r4
 8001be2:	4641      	mov	r1, r8
 8001be4:	fba2 1201 	umull	r1, r2, r2, r1
 8001be8:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001bec:	460a      	mov	r2, r1
 8001bee:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001bf2:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001bfc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da09      	bge.n	8001c18 <compensate_pressure+0x1fc>
 8001c04:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001c08:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001c0c:	f143 0300 	adc.w	r3, r3, #0
 8001c10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001c14:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001c18:	f04f 0000 	mov.w	r0, #0
 8001c1c:	f04f 0100 	mov.w	r1, #0
 8001c20:	0a10      	lsrs	r0, r2, #8
 8001c22:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001c26:	1219      	asrs	r1, r3, #8
 8001c28:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	17da      	asrs	r2, r3, #31
 8001c34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001c38:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001c3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c40:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001c44:	464a      	mov	r2, r9
 8001c46:	fb02 f203 	mul.w	r2, r2, r3
 8001c4a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001c4e:	4644      	mov	r4, r8
 8001c50:	fb04 f303 	mul.w	r3, r4, r3
 8001c54:	441a      	add	r2, r3
 8001c56:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c5a:	4644      	mov	r4, r8
 8001c5c:	fba3 4304 	umull	r4, r3, r3, r4
 8001c60:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c64:	4623      	mov	r3, r4
 8001c66:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c6a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001c6e:	18d3      	adds	r3, r2, r3
 8001c70:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001c80:	464c      	mov	r4, r9
 8001c82:	0323      	lsls	r3, r4, #12
 8001c84:	4644      	mov	r4, r8
 8001c86:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c8a:	4644      	mov	r4, r8
 8001c8c:	0322      	lsls	r2, r4, #12
 8001c8e:	1884      	adds	r4, r0, r2
 8001c90:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001c94:	eb41 0303 	adc.w	r3, r1, r3
 8001c98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c9c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001ca0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cac:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001cb0:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001cb4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001cb8:	1884      	adds	r4, r0, r2
 8001cba:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001cbe:	eb41 0303 	adc.w	r3, r1, r3
 8001cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001cc6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001cca:	88db      	ldrh	r3, [r3, #6]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001cd4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001cd8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001cdc:	462b      	mov	r3, r5
 8001cde:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001ce2:	4642      	mov	r2, r8
 8001ce4:	fb02 f203 	mul.w	r2, r2, r3
 8001ce8:	464b      	mov	r3, r9
 8001cea:	4621      	mov	r1, r4
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	4641      	mov	r1, r8
 8001cf6:	fba2 1201 	umull	r1, r2, r2, r1
 8001cfa:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001cfe:	460a      	mov	r2, r1
 8001d00:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001d04:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001d08:	4413      	add	r3, r2
 8001d0a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d0e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da0e      	bge.n	8001d34 <compensate_pressure+0x318>
 8001d16:	1e51      	subs	r1, r2, #1
 8001d18:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001d1c:	f143 0301 	adc.w	r3, r3, #1
 8001d20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001d24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001d28:	e004      	b.n	8001d34 <compensate_pressure+0x318>
 8001d2a:	bf00      	nop
 8001d2c:	002dc6c0 	.word	0x002dc6c0
 8001d30:	00a7d8c0 	.word	0x00a7d8c0
 8001d34:	f04f 0000 	mov.w	r0, #0
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	1058      	asrs	r0, r3, #1
 8001d3e:	17d9      	asrs	r1, r3, #31
 8001d40:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001d44:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f000 81fc 	beq.w	8002146 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001d4e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d5e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001d62:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001d66:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001d6a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001d6e:	f04f 0000 	mov.w	r0, #0
 8001d72:	f04f 0100 	mov.w	r1, #0
 8001d76:	07d9      	lsls	r1, r3, #31
 8001d78:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001d7c:	07d0      	lsls	r0, r2, #31
 8001d7e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001d82:	1a84      	subs	r4, r0, r2
 8001d84:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001d88:	eb61 0303 	sbc.w	r3, r1, r3
 8001d8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d90:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d94:	4622      	mov	r2, r4
 8001d96:	462b      	mov	r3, r5
 8001d98:	1891      	adds	r1, r2, r2
 8001d9a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001d9c:	415b      	adcs	r3, r3
 8001d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001da0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001da4:	4621      	mov	r1, r4
 8001da6:	1851      	adds	r1, r2, r1
 8001da8:	6739      	str	r1, [r7, #112]	@ 0x70
 8001daa:	4629      	mov	r1, r5
 8001dac:	414b      	adcs	r3, r1
 8001dae:	677b      	str	r3, [r7, #116]	@ 0x74
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	018b      	lsls	r3, r1, #6
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	018a      	lsls	r2, r1, #6
 8001dca:	4641      	mov	r1, r8
 8001dcc:	1889      	adds	r1, r1, r2
 8001dce:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	eb43 0101 	adc.w	r1, r3, r1
 8001dd6:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001de4:	4649      	mov	r1, r9
 8001de6:	008b      	lsls	r3, r1, #2
 8001de8:	4641      	mov	r1, r8
 8001dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dee:	4641      	mov	r1, r8
 8001df0:	008a      	lsls	r2, r1, #2
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	4622      	mov	r2, r4
 8001dfa:	189b      	adds	r3, r3, r2
 8001dfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dfe:	460b      	mov	r3, r1
 8001e00:	462a      	mov	r2, r5
 8001e02:	eb42 0303 	adc.w	r3, r2, r3
 8001e06:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001e14:	4649      	mov	r1, r9
 8001e16:	008b      	lsls	r3, r1, #2
 8001e18:	4641      	mov	r1, r8
 8001e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e1e:	4641      	mov	r1, r8
 8001e20:	008a      	lsls	r2, r1, #2
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	4622      	mov	r2, r4
 8001e2a:	189b      	adds	r3, r3, r2
 8001e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e30:	462b      	mov	r3, r5
 8001e32:	460a      	mov	r2, r1
 8001e34:	eb42 0303 	adc.w	r3, r2, r3
 8001e38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e3c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001e40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e44:	f7fe ff28 	bl	8000c98 <__aeabi_ldivmod>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001e50:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001e54:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	17da      	asrs	r2, r3, #31
 8001e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e60:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e64:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da08      	bge.n	8001e7e <compensate_pressure+0x462>
 8001e6c:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001e70:	1851      	adds	r1, r2, r1
 8001e72:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e74:	f143 0300 	adc.w	r3, r3, #0
 8001e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e7e:	f04f 0000 	mov.w	r0, #0
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	0b50      	lsrs	r0, r2, #13
 8001e88:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e8c:	1359      	asrs	r1, r3, #13
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e96:	4629      	mov	r1, r5
 8001e98:	fb02 f001 	mul.w	r0, r2, r1
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	fb01 f103 	mul.w	r1, r1, r3
 8001ea2:	4401      	add	r1, r0
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	fba0 2302 	umull	r2, r3, r0, r2
 8001eaa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001eae:	4613      	mov	r3, r2
 8001eb0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001eb4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001eb8:	18cb      	adds	r3, r1, r3
 8001eba:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001ebe:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	da08      	bge.n	8001ed8 <compensate_pressure+0x4bc>
 8001ec6:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001eca:	1851      	adds	r1, r2, r1
 8001ecc:	6539      	str	r1, [r7, #80]	@ 0x50
 8001ece:	f143 0300 	adc.w	r3, r3, #0
 8001ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ed4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ed8:	f04f 0000 	mov.w	r0, #0
 8001edc:	f04f 0100 	mov.w	r1, #0
 8001ee0:	0b50      	lsrs	r0, r2, #13
 8001ee2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ee6:	1359      	asrs	r1, r3, #13
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	fb02 f001 	mul.w	r0, r2, r1
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	fb01 f103 	mul.w	r1, r1, r3
 8001efc:	4401      	add	r1, r0
 8001efe:	4620      	mov	r0, r4
 8001f00:	fba0 2302 	umull	r2, r3, r0, r2
 8001f04:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001f08:	4613      	mov	r3, r2
 8001f0a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001f0e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f12:	18cb      	adds	r3, r1, r3
 8001f14:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001f18:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da08      	bge.n	8001f32 <compensate_pressure+0x516>
 8001f20:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001f24:	1851      	adds	r1, r2, r1
 8001f26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001f28:	f143 0300 	adc.w	r3, r3, #0
 8001f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f32:	f04f 0000 	mov.w	r0, #0
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	0e50      	lsrs	r0, r2, #25
 8001f3c:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001f40:	1659      	asrs	r1, r3, #25
 8001f42:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001f46:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001f4a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	17da      	asrs	r2, r3, #31
 8001f52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f56:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001f5a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001f5e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001f62:	462a      	mov	r2, r5
 8001f64:	fb02 f203 	mul.w	r2, r2, r3
 8001f68:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	441a      	add	r2, r3
 8001f74:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001f78:	4621      	mov	r1, r4
 8001f7a:	fba3 1301 	umull	r1, r3, r3, r1
 8001f7e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001f82:	460b      	mov	r3, r1
 8001f84:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001f88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001f8c:	18d3      	adds	r3, r2, r3
 8001f8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001f92:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da07      	bge.n	8001faa <compensate_pressure+0x58e>
 8001f9a:	4971      	ldr	r1, [pc, #452]	@ (8002160 <compensate_pressure+0x744>)
 8001f9c:	1851      	adds	r1, r2, r1
 8001f9e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001fa0:	f143 0300 	adc.w	r3, r3, #0
 8001fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001faa:	f04f 0000 	mov.w	r0, #0
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	0cd0      	lsrs	r0, r2, #19
 8001fb4:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001fb8:	14d9      	asrs	r1, r3, #19
 8001fba:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001fbe:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001fc2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001fc6:	1884      	adds	r4, r0, r2
 8001fc8:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001fcc:	eb41 0303 	adc.w	r3, r1, r3
 8001fd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001fd4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001fd8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001fdc:	4621      	mov	r1, r4
 8001fde:	1889      	adds	r1, r1, r2
 8001fe0:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	eb43 0101 	adc.w	r1, r3, r1
 8001fea:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001fee:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da07      	bge.n	8002006 <compensate_pressure+0x5ea>
 8001ff6:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001ffa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ffc:	f143 0300 	adc.w	r3, r3, #0
 8002000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002002:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002006:	f04f 0000 	mov.w	r0, #0
 800200a:	f04f 0100 	mov.w	r1, #0
 800200e:	0a10      	lsrs	r0, r2, #8
 8002010:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002014:	1219      	asrs	r1, r3, #8
 8002016:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800201a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800201e:	b21b      	sxth	r3, r3
 8002020:	17da      	asrs	r2, r3, #31
 8002022:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002026:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002036:	464c      	mov	r4, r9
 8002038:	0123      	lsls	r3, r4, #4
 800203a:	4644      	mov	r4, r8
 800203c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002040:	4644      	mov	r4, r8
 8002042:	0122      	lsls	r2, r4, #4
 8002044:	1884      	adds	r4, r0, r2
 8002046:	633c      	str	r4, [r7, #48]	@ 0x30
 8002048:	eb41 0303 	adc.w	r3, r1, r3
 800204c:	637b      	str	r3, [r7, #52]	@ 0x34
 800204e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002052:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8002056:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 800205a:	0fd9      	lsrs	r1, r3, #31
 800205c:	2000      	movs	r0, #0
 800205e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002060:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002062:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002066:	4621      	mov	r1, r4
 8002068:	1889      	adds	r1, r1, r2
 800206a:	6239      	str	r1, [r7, #32]
 800206c:	4629      	mov	r1, r5
 800206e:	eb43 0101 	adc.w	r1, r3, r1
 8002072:	6279      	str	r1, [r7, #36]	@ 0x24
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002080:	4621      	mov	r1, r4
 8002082:	084a      	lsrs	r2, r1, #1
 8002084:	4629      	mov	r1, r5
 8002086:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800208a:	4629      	mov	r1, r5
 800208c:	104b      	asrs	r3, r1, #1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	1894      	adds	r4, r2, r2
 8002098:	61bc      	str	r4, [r7, #24]
 800209a:	415b      	adcs	r3, r3
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a2:	1814      	adds	r4, r2, r0
 80020a4:	613c      	str	r4, [r7, #16]
 80020a6:	414b      	adcs	r3, r1
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80020b6:	464c      	mov	r4, r9
 80020b8:	0163      	lsls	r3, r4, #5
 80020ba:	4644      	mov	r4, r8
 80020bc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80020c0:	4644      	mov	r4, r8
 80020c2:	0162      	lsls	r2, r4, #5
 80020c4:	4644      	mov	r4, r8
 80020c6:	18a4      	adds	r4, r4, r2
 80020c8:	60bc      	str	r4, [r7, #8]
 80020ca:	464c      	mov	r4, r9
 80020cc:	eb43 0404 	adc.w	r4, r3, r4
 80020d0:	60fc      	str	r4, [r7, #12]
 80020d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020d6:	4623      	mov	r3, r4
 80020d8:	181b      	adds	r3, r3, r0
 80020da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020de:	462b      	mov	r3, r5
 80020e0:	eb41 0303 	adc.w	r3, r1, r3
 80020e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020e8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da07      	bge.n	8002100 <compensate_pressure+0x6e4>
 80020f0:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	f143 0300 	adc.w	r3, r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	09d0      	lsrs	r0, r2, #7
 800210a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800210e:	11d9      	asrs	r1, r3, #7
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4613      	mov	r3, r2
 8002116:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 800211a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800211e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002122:	429a      	cmp	r2, r3
 8002124:	d204      	bcs.n	8002130 <compensate_pressure+0x714>
			pressure = pressure_min;
 8002126:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800212a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800212e:	e00e      	b.n	800214e <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 8002130:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002134:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002138:	429a      	cmp	r2, r3
 800213a:	d908      	bls.n	800214e <compensate_pressure+0x732>
			pressure = pressure_max;
 800213c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002140:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002144:	e003      	b.n	800214e <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 8002146:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800214a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 800214e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 8002152:	4618      	mov	r0, r3
 8002154:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8002158:	46bd      	mov	sp, r7
 800215a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800215e:	bf00      	nop
 8002160:	0007ffff 	.word	0x0007ffff

08002164 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8002164:	b480      	push	{r7}
 8002166:	b08b      	sub	sp, #44	@ 0x2c
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 800216e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8002172:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800217c:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	039b      	lsls	r3, r3, #14
 8002184:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800218c:	051b      	lsls	r3, r3, #20
 800218e:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002196:	461a      	mov	r2, r3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	1ad2      	subs	r2, r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da02      	bge.n	80021b8 <compensate_humidity+0x54>
 80021b2:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80021b6:	337f      	adds	r3, #127	@ 0x7f
 80021b8:	13db      	asrs	r3, r3, #15
 80021ba:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 80021c2:	461a      	mov	r2, r3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da01      	bge.n	80021d2 <compensate_humidity+0x6e>
 80021ce:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80021d2:	129b      	asrs	r3, r3, #10
 80021d4:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	7f1b      	ldrb	r3, [r3, #28]
 80021da:	461a      	mov	r2, r3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da01      	bge.n	80021ea <compensate_humidity+0x86>
 80021e6:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80021ea:	12db      	asrs	r3, r3, #11
 80021ec:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	da01      	bge.n	8002202 <compensate_humidity+0x9e>
 80021fe:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002202:	129b      	asrs	r3, r3, #10
 8002204:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8002208:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002210:	461a      	mov	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800221c:	2b00      	cmp	r3, #0
 800221e:	da02      	bge.n	8002226 <compensate_humidity+0xc2>
 8002220:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8002224:	333f      	adds	r3, #63	@ 0x3f
 8002226:	139b      	asrs	r3, r3, #14
 8002228:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da02      	bge.n	8002240 <compensate_humidity+0xdc>
 800223a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800223e:	337f      	adds	r3, #127	@ 0x7f
 8002240:	13db      	asrs	r3, r3, #15
 8002242:	461a      	mov	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	da02      	bge.n	8002250 <compensate_humidity+0xec>
 800224a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800224e:	337f      	adds	r3, #127	@ 0x7f
 8002250:	13db      	asrs	r3, r3, #15
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	da00      	bge.n	800225c <compensate_humidity+0xf8>
 800225a:	337f      	adds	r3, #127	@ 0x7f
 800225c:	11db      	asrs	r3, r3, #7
 800225e:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	7e1b      	ldrb	r3, [r3, #24]
 8002264:	461a      	mov	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	da00      	bge.n	8002272 <compensate_humidity+0x10e>
 8002270:	330f      	adds	r3, #15
 8002272:	111b      	asrs	r3, r3, #4
 8002274:	425b      	negs	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002284:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800228c:	bfa8      	it	ge
 800228e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8002292:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da01      	bge.n	800229e <compensate_humidity+0x13a>
 800229a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800229e:	131b      	asrs	r3, r3, #12
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 80022a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d901      	bls.n	80022ae <compensate_humidity+0x14a>
		humidity = humidity_max;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	372c      	adds	r7, #44	@ 0x2c
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80022c4:	2388      	movs	r3, #136	@ 0x88
 80022c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80022e0:	f107 010c 	add.w	r1, r7, #12
 80022e4:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	221a      	movs	r2, #26
 80022ec:	f7fe fee7 	bl	80010be <bme280_get_regs>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 80022f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d11d      	bne.n	800233a <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f84a 	bl	800239e <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800230a:	23e1      	movs	r3, #225	@ 0xe1
 800230c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002310:	f107 010c 	add.w	r1, r7, #12
 8002314:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2207      	movs	r2, #7
 800231c:	f7fe fecf 	bl	80010be <bme280_get_regs>
 8002320:	4603      	mov	r3, r0
 8002322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 8002326:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f8e2 	bl	80024fe <parse_humidity_calib_data>
		}
	}

	return rslt;
 800233a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800233e:	4618      	mov	r0, r3
 8002340:	3728      	adds	r7, #40	@ 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002346:	b480      	push	{r7}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002354:	2301      	movs	r3, #1
 8002356:	75fb      	strb	r3, [r7, #23]
 8002358:	e016      	b.n	8002388 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	441a      	add	r2, r3
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	440b      	add	r3, r1
 800236a:	7812      	ldrb	r2, [r2, #0]
 800236c:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 800236e:	7dfb      	ldrb	r3, [r7, #23]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	441a      	add	r2, r3
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4619      	mov	r1, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	440b      	add	r3, r1
 800237e:	7812      	ldrb	r2, [r2, #0]
 8002380:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	3301      	adds	r3, #1
 8002386:	75fb      	strb	r3, [r7, #23]
 8002388:	7dfa      	ldrb	r2, [r7, #23]
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	429a      	cmp	r2, r3
 800238e:	d3e4      	bcc.n	800235a <interleave_reg_addr+0x14>
	}
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	3310      	adds	r3, #16
 80023ac:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3301      	adds	r3, #1
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3303      	adds	r3, #3
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3302      	adds	r3, #2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b21b      	sxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b21a      	sxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3305      	adds	r3, #5
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3307      	adds	r3, #7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	b21a      	sxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3306      	adds	r3, #6
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b21b      	sxth	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b21b      	sxth	r3, r3
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3309      	adds	r3, #9
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	b21a      	sxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3308      	adds	r3, #8
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b21b      	sxth	r3, r3
 800242a:	4313      	orrs	r3, r2
 800242c:	b21a      	sxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	330b      	adds	r3, #11
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b21a      	sxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	330a      	adds	r3, #10
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b21b      	sxth	r3, r3
 8002444:	4313      	orrs	r3, r2
 8002446:	b21a      	sxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	330d      	adds	r3, #13
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	b21a      	sxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	330c      	adds	r3, #12
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b21b      	sxth	r3, r3
 800245e:	4313      	orrs	r3, r2
 8002460:	b21a      	sxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	330f      	adds	r3, #15
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	b21a      	sxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	330e      	adds	r3, #14
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b21b      	sxth	r3, r3
 8002478:	4313      	orrs	r3, r2
 800247a:	b21a      	sxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3311      	adds	r3, #17
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	b21a      	sxth	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3310      	adds	r3, #16
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	b21b      	sxth	r3, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	b21a      	sxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3313      	adds	r3, #19
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	b21a      	sxth	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3312      	adds	r3, #18
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21a      	sxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3315      	adds	r3, #21
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	b21a      	sxth	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3314      	adds	r3, #20
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3317      	adds	r3, #23
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	b21a      	sxth	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3316      	adds	r3, #22
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b21b      	sxth	r3, r3
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b21a      	sxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3319      	adds	r3, #25
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	761a      	strb	r2, [r3, #24]

}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80024fe:	b480      	push	{r7}
 8002500:	b087      	sub	sp, #28
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3310      	adds	r3, #16
 800250c:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3301      	adds	r3, #1
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b21a      	sxth	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21a      	sxth	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3302      	adds	r3, #2
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3303      	adds	r3, #3
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b25b      	sxtb	r3, r3
 8002538:	b29b      	uxth	r3, r3
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	b29b      	uxth	r3, r3
 800253e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3304      	adds	r3, #4
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b21b      	sxth	r3, r3
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800254e:	8a7a      	ldrh	r2, [r7, #18]
 8002550:	8a3b      	ldrh	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	b21a      	sxth	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3305      	adds	r3, #5
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b25b      	sxtb	r3, r3
 8002562:	b29b      	uxth	r3, r3
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	b29b      	uxth	r3, r3
 8002568:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3304      	adds	r3, #4
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	b2db      	uxtb	r3, r3
 8002574:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002576:	89fa      	ldrh	r2, [r7, #14]
 8002578:	89bb      	ldrh	r3, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	b21a      	sxth	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3306      	adds	r3, #6
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b25a      	sxtb	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	460a      	mov	r2, r1
 80025a6:	71fb      	strb	r3, [r7, #7]
 80025a8:	4613      	mov	r3, r2
 80025aa:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 80025b0:	79fa      	ldrb	r2, [r7, #7]
 80025b2:	79bb      	ldrb	r3, [r7, #6]
 80025b4:	4013      	ands	r3, r2
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	e001      	b.n	80025c6 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <null_ptr_check+0x26>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <null_ptr_check+0x26>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <null_ptr_check+0x26>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80025fa:	23ff      	movs	r3, #255	@ 0xff
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e001      	b.n	8002604 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <user_i2c_read>:
#include "main.h"
#include <stdlib.h>


int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af02      	add	r7, sp, #8
 800261a:	603a      	str	r2, [r7, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
 8002622:	460b      	mov	r3, r1
 8002624:	71bb      	strb	r3, [r7, #6]
 8002626:	4613      	mov	r3, r2
 8002628:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	b29b      	uxth	r3, r3
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	b299      	uxth	r1, r3
 8002632:	1dba      	adds	r2, r7, #6
 8002634:	230a      	movs	r3, #10
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2301      	movs	r3, #1
 800263a:	4811      	ldr	r0, [pc, #68]	@ (8002680 <user_i2c_read+0x6c>)
 800263c:	f001 fc34 	bl	8003ea8 <HAL_I2C_Master_Transmit>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <user_i2c_read+0x38>
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
 800264a:	e014      	b.n	8002676 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	b21b      	sxth	r3, r3
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	b21b      	sxth	r3, r3
 8002658:	b299      	uxth	r1, r3
 800265a:	88bb      	ldrh	r3, [r7, #4]
 800265c:	220a      	movs	r2, #10
 800265e:	9200      	str	r2, [sp, #0]
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	4807      	ldr	r0, [pc, #28]	@ (8002680 <user_i2c_read+0x6c>)
 8002664:	f001 fd38 	bl	80040d8 <HAL_I2C_Master_Receive>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <user_i2c_read+0x60>
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e000      	b.n	8002676 <user_i2c_read+0x62>

  return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000228 	.word	0x20000228

08002684 <user_delay_ms>:
void user_delay_ms(uint32_t period)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f001 f8b7 	bl	8003800 <HAL_Delay>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <user_i2c_write>:
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	603a      	str	r2, [r7, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
 80026aa:	460b      	mov	r3, r1
 80026ac:	71bb      	strb	r3, [r7, #6]
 80026ae:	4613      	mov	r3, r2
 80026b0:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 80026b2:	88bb      	ldrh	r3, [r7, #4]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4618      	mov	r0, r3
 80026b8:	f008 f8dc 	bl	800a874 <malloc>
 80026bc:	4603      	mov	r3, r0
 80026be:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 80026c0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3301      	adds	r3, #1
 80026cc:	88ba      	ldrh	r2, [r7, #4]
 80026ce:	6839      	ldr	r1, [r7, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f009 f89e 	bl	800b812 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	b299      	uxth	r1, r3
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	3301      	adds	r3, #1
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	9200      	str	r2, [sp, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4808      	ldr	r0, [pc, #32]	@ (8002710 <user_i2c_write+0x74>)
 80026ee:	f001 fbdb 	bl	8003ea8 <HAL_I2C_Master_Transmit>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <user_i2c_write+0x62>
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
 80026fc:	e003      	b.n	8002706 <user_i2c_write+0x6a>

  free(buf);
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f008 f8c0 	bl	800a884 <free>
  return 0;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000228 	.word	0x20000228

08002714 <DHT11_Start_struct>:


void DHT11_Start_struct(struct DHT_Reading* self) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    self->Set_Pin_Output_struct(self, self->GPIOx, self->GPIO_Pin);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6811      	ldr	r1, [r2, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	8892      	ldrh	r2, [r2, #4]
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
    HAL_GPIO_WritePin(self->GPIOx, self->GPIO_Pin, GPIO_PIN_RESET);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	889b      	ldrh	r3, [r3, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	4619      	mov	r1, r3
 8002738:	f001 fb02 	bl	8003d40 <HAL_GPIO_WritePin>
    self->delay_struct(self, 18000);   // wait for 18ms
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f244 6150 	movw	r1, #18000	@ 0x4650
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
    self->Set_Pin_Input_struct(self, self->GPIOx, self->GPIO_Pin);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6811      	ldr	r1, [r2, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	8892      	ldrh	r2, [r2, #4]
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	4798      	blx	r3
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <Check_Response_struct>:

uint8_t Check_Response_struct(struct DHT_Reading* self) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
    uint8_t Response = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
    self->delay_struct(self, 40);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2128      	movs	r1, #40	@ 0x28
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
    if (!(HAL_GPIO_ReadPin(self->GPIOx, self->GPIO_Pin))) {
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	889b      	ldrh	r3, [r3, #4]
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f001 fac5 	bl	8003d10 <HAL_GPIO_ReadPin>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d114      	bne.n	80027b6 <Check_Response_struct+0x56>
        self->delay_struct(self, 80);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2150      	movs	r1, #80	@ 0x50
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
        if ((HAL_GPIO_ReadPin(self->GPIOx, self->GPIO_Pin))) Response = 1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	889b      	ldrh	r3, [r3, #4]
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f001 fab5 	bl	8003d10 <HAL_GPIO_ReadPin>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <Check_Response_struct+0x52>
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e001      	b.n	80027b6 <Check_Response_struct+0x56>
        else Response = -1;
 80027b2:	23ff      	movs	r3, #255	@ 0xff
 80027b4:	73fb      	strb	r3, [r7, #15]
    }
    while ((HAL_GPIO_ReadPin(self->GPIOx, self->GPIO_Pin)));
 80027b6:	bf00      	nop
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	889b      	ldrh	r3, [r3, #4]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f001 faa4 	bl	8003d10 <HAL_GPIO_ReadPin>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f4      	bne.n	80027b8 <Check_Response_struct+0x58>
    return Response;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <Set_Pin_Input_struct>:

void Set_Pin_Input_struct(struct DHT_Reading* self, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	68b8      	ldr	r0, [r7, #8]
 800280a:	f001 f8ff 	bl	8003a0c <HAL_GPIO_Init>
}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	@ 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <Set_Pin_Output_struct>:

void Set_Pin_Output_struct(struct DHT_Reading* self, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8002816:	b580      	push	{r7, lr}
 8002818:	b08a      	sub	sp, #40	@ 0x28
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	4613      	mov	r3, r2
 8002822:	80fb      	strh	r3, [r7, #6]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002838:	2301      	movs	r3, #1
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4619      	mov	r1, r3
 800284a:	68b8      	ldr	r0, [r7, #8]
 800284c:	f001 f8de 	bl	8003a0c <HAL_GPIO_Init>
}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	@ 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <delay_struct>:

void delay_struct(struct DHT_Reading* self, uint16_t us) {
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <delay_struct+0x30>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2200      	movs	r2, #0
 800286a:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 800286c:	bf00      	nop
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <delay_struct+0x30>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	429a      	cmp	r2, r3
 8002878:	d3f9      	bcc.n	800286e <delay_struct+0x16>
}
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	200002e0 	.word	0x200002e0

0800288c <DHT11_Read_struct>:

uint8_t DHT11_Read_struct(struct DHT_Reading* self) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    for (j = 0; j < 8; j++) {
 8002894:	2300      	movs	r3, #0
 8002896:	73bb      	strb	r3, [r7, #14]
 8002898:	e045      	b.n	8002926 <DHT11_Read_struct+0x9a>
        while (!(HAL_GPIO_ReadPin(self->GPIOx, self->GPIO_Pin)));
 800289a:	bf00      	nop
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	889b      	ldrh	r3, [r3, #4]
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f001 fa32 	bl	8003d10 <HAL_GPIO_ReadPin>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f4      	beq.n	800289c <DHT11_Read_struct+0x10>
        self->delay_struct(self, 40);   // wait for 40 us
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2128      	movs	r1, #40	@ 0x28
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
        if (!(HAL_GPIO_ReadPin(self->GPIOx, self->GPIO_Pin)))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	889b      	ldrh	r3, [r3, #4]
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f001 fa22 	bl	8003d10 <HAL_GPIO_ReadPin>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10e      	bne.n	80028f0 <DHT11_Read_struct+0x64>
        {
            i &= ~(1 << (7 - j));
 80028d2:	7bbb      	ldrb	r3, [r7, #14]
 80028d4:	f1c3 0307 	rsb	r3, r3, #7
 80028d8:	2201      	movs	r2, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	b25b      	sxtb	r3, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	b25a      	sxtb	r2, r3
 80028e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e8:	4013      	ands	r3, r2
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e00b      	b.n	8002908 <DHT11_Read_struct+0x7c>
        }
        else i |= (1 << (7 - j));
 80028f0:	7bbb      	ldrb	r3, [r7, #14]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2201      	movs	r2, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	b25a      	sxtb	r2, r3
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4313      	orrs	r3, r2
 8002904:	b25b      	sxtb	r3, r3
 8002906:	73fb      	strb	r3, [r7, #15]
        while ((HAL_GPIO_ReadPin(self->GPIOx, self->GPIO_Pin)));
 8002908:	bf00      	nop
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	889b      	ldrh	r3, [r3, #4]
 8002912:	4619      	mov	r1, r3
 8002914:	4610      	mov	r0, r2
 8002916:	f001 f9fb 	bl	8003d10 <HAL_GPIO_ReadPin>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f4      	bne.n	800290a <DHT11_Read_struct+0x7e>
    for (j = 0; j < 8; j++) {
 8002920:	7bbb      	ldrb	r3, [r7, #14]
 8002922:	3301      	adds	r3, #1
 8002924:	73bb      	strb	r3, [r7, #14]
 8002926:	7bbb      	ldrb	r3, [r7, #14]
 8002928:	2b07      	cmp	r3, #7
 800292a:	d9b6      	bls.n	800289a <DHT11_Read_struct+0xe>
    }
    return i;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	b29a      	uxth	r2, r3
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	4804      	ldr	r0, [pc, #16]	@ (8002960 <_write+0x28>)
 8002950:	f004 f9de 	bl	8006d10 <HAL_UART_Transmit>
    return len;
 8002954:	687b      	ldr	r3, [r7, #4]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000032c 	.word	0x2000032c

08002964 <init_bme280>:
    .Check_Response_struct = Check_Response_struct,
    .DHT11_Read_struct = DHT11_Read_struct
};

void init_bme280()
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002968:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <init_bme280+0x7c>)
 800296a:	2276      	movs	r2, #118	@ 0x76
 800296c:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 800296e:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <init_bme280+0x7c>)
 8002970:	2201      	movs	r2, #1
 8002972:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8002974:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <init_bme280+0x7c>)
 8002976:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <init_bme280+0x80>)
 8002978:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 800297a:	4b19      	ldr	r3, [pc, #100]	@ (80029e0 <init_bme280+0x7c>)
 800297c:	4a1a      	ldr	r2, [pc, #104]	@ (80029e8 <init_bme280+0x84>)
 800297e:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8002980:	4b17      	ldr	r3, [pc, #92]	@ (80029e0 <init_bme280+0x7c>)
 8002982:	4a1a      	ldr	r2, [pc, #104]	@ (80029ec <init_bme280+0x88>)
 8002984:	60da      	str	r2, [r3, #12]
    rslt = bme280_init(&dev);
 8002986:	4816      	ldr	r0, [pc, #88]	@ (80029e0 <init_bme280+0x7c>)
 8002988:	f7fe fb4e 	bl	8001028 <bme280_init>
 800298c:	4603      	mov	r3, r0
 800298e:	461a      	mov	r2, r3
 8002990:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <init_bme280+0x8c>)
 8002992:	701a      	strb	r2, [r3, #0]
	if (rslt != BME280_OK)
 8002994:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <init_bme280+0x8c>)
 8002996:	f993 3000 	ldrsb.w	r3, [r3]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <init_bme280+0x48>
	   {
	    printf("BME280 init error: %d\n", rslt);
 800299e:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <init_bme280+0x8c>)
 80029a0:	f993 3000 	ldrsb.w	r3, [r3]
 80029a4:	4619      	mov	r1, r3
 80029a6:	4813      	ldr	r0, [pc, #76]	@ (80029f4 <init_bme280+0x90>)
 80029a8:	f008 fd3c 	bl	800b424 <iprintf>
	   }
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <init_bme280+0x7c>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <init_bme280+0x7c>)
 80029b6:	2205      	movs	r2, #5
 80029b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80029bc:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <init_bme280+0x7c>)
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <init_bme280+0x7c>)
 80029c6:	2204      	movs	r2, #4
 80029c8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80029cc:	4904      	ldr	r1, [pc, #16]	@ (80029e0 <init_bme280+0x7c>)
 80029ce:	200f      	movs	r0, #15
 80029d0:	f7fe fc1e 	bl	8001210 <bme280_set_sensor_settings>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <init_bme280+0x8c>)
 80029da:	701a      	strb	r2, [r3, #0]
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200003cc 	.word	0x200003cc
 80029e4:	08002615 	.word	0x08002615
 80029e8:	0800269d 	.word	0x0800269d
 80029ec:	08002685 	.word	0x08002685
 80029f0:	20000418 	.word	0x20000418
 80029f4:	0800d610 	.word	0x0800d610

080029f8 <SD_mount>:

void SD_mount()
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	fresult = f_mount(&fatfs, "", 1); //1=mount now
 80029fc:	2201      	movs	r2, #1
 80029fe:	490b      	ldr	r1, [pc, #44]	@ (8002a2c <SD_mount+0x34>)
 8002a00:	480b      	ldr	r0, [pc, #44]	@ (8002a30 <SD_mount+0x38>)
 8002a02:	f007 fabd 	bl	8009f80 <f_mount>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <SD_mount+0x3c>)
 8002a0c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 8002a0e:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <SD_mount+0x3c>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <SD_mount+0x30>
		printf("f_mount error (%i)\r\n", fresult);
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <SD_mount+0x3c>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4806      	ldr	r0, [pc, #24]	@ (8002a38 <SD_mount+0x40>)
 8002a1e:	f008 fd01 	bl	800b424 <iprintf>
	    HAL_Delay(1);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f000 feec 	bl	8003800 <HAL_Delay>
	}
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	0800d628 	.word	0x0800d628
 8002a30:	20000524 	.word	0x20000524
 8002a34:	20000984 	.word	0x20000984
 8002a38:	0800d62c 	.word	0x0800d62c

08002a3c <SD_close_file>:
  	printf("f_gets error (%i)\r\n", fresult);
    }
}

void SD_close_file()
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	f_close(&file);
 8002a40:	4802      	ldr	r0, [pc, #8]	@ (8002a4c <SD_close_file+0x10>)
 8002a42:	f007 fe90 	bl	800a766 <f_close>
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000754 	.word	0x20000754

08002a50 <SD_create_new_file>:

FRESULT SD_create_new_file(char name[])
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	fresult = f_open(&file, name, FA_WRITE | FA_CREATE_NEW);
 8002a58:	2206      	movs	r2, #6
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	480c      	ldr	r0, [pc, #48]	@ (8002a90 <SD_create_new_file+0x40>)
 8002a5e:	f007 fad5 	bl	800a00c <f_open>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <SD_create_new_file+0x44>)
 8002a68:	701a      	strb	r2, [r3, #0]
    if(fresult == FR_OK)
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <SD_create_new_file+0x44>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d104      	bne.n	8002a7c <SD_create_new_file+0x2c>
    	{
    		printf("New file '%s' created for writing\r\n", name);
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4808      	ldr	r0, [pc, #32]	@ (8002a98 <SD_create_new_file+0x48>)
 8002a76:	f008 fcd5 	bl	800b424 <iprintf>
 8002a7a:	e002      	b.n	8002a82 <SD_create_new_file+0x32>
    	}
	else
		{
			printf("File existed - datas saved to current file\r\n");
 8002a7c:	4807      	ldr	r0, [pc, #28]	@ (8002a9c <SD_create_new_file+0x4c>)
 8002a7e:	f008 fd39 	bl	800b4f4 <puts>
		}
    return fresult;
 8002a82:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <SD_create_new_file+0x44>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000754 	.word	0x20000754
 8002a94:	20000984 	.word	0x20000984
 8002a98:	0800d6c4 	.word	0x0800d6c4
 8002a9c:	0800d6e8 	.word	0x0800d6e8

08002aa0 <SD_unmount>:


void SD_unmount()
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4903      	ldr	r1, [pc, #12]	@ (8002ab4 <SD_unmount+0x14>)
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f007 fa69 	bl	8009f80 <f_mount>
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	0800d628 	.word	0x0800d628

08002ab8 <SD_open_file_append>:

void SD_open_file_append(char name[]) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	fresult = f_open(&file, name, FA_WRITE | FA_OPEN_APPEND);
 8002ac0:	2232      	movs	r2, #50	@ 0x32
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <SD_open_file_append+0x40>)
 8002ac6:	f007 faa1 	bl	800a00c <f_open>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <SD_open_file_append+0x44>)
 8002ad0:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) {
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <SD_open_file_append+0x44>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <SD_open_file_append+0x2e>
        printf("f_open error (%i)\r\n", fresult);
 8002ada:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <SD_open_file_append+0x44>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4807      	ldr	r0, [pc, #28]	@ (8002b00 <SD_open_file_append+0x48>)
 8002ae2:	f008 fc9f 	bl	800b424 <iprintf>

    }
    printf("File '%s' opened for appending!\r\n", name);
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4806      	ldr	r0, [pc, #24]	@ (8002b04 <SD_open_file_append+0x4c>)
 8002aea:	f008 fc9b 	bl	800b424 <iprintf>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000754 	.word	0x20000754
 8002afc:	20000984 	.word	0x20000984
 8002b00:	0800d644 	.word	0x0800d644
 8002b04:	0800d714 	.word	0x0800d714

08002b08 <SD_write_data>:

void SD_write_data(char data[]) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
    UINT bytesWrote;
    fresult = f_write(&file, data, strlen(data), &bytesWrote);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7fd fbd5 	bl	80002c0 <strlen>
 8002b16:	4602      	mov	r2, r0
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	480a      	ldr	r0, [pc, #40]	@ (8002b48 <SD_write_data+0x40>)
 8002b20:	f007 fc2e 	bl	800a380 <f_write>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <SD_write_data+0x44>)
 8002b2a:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK) {
 8002b2c:	4b07      	ldr	r3, [pc, #28]	@ (8002b4c <SD_write_data+0x44>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <SD_write_data+0x38>

    } else {
        printf("f_write error (%i)\r\n", fresult);
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <SD_write_data+0x44>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4805      	ldr	r0, [pc, #20]	@ (8002b50 <SD_write_data+0x48>)
 8002b3c:	f008 fc72 	bl	800b424 <iprintf>
    }
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000754 	.word	0x20000754
 8002b4c:	20000984 	.word	0x20000984
 8002b50:	0800d738 	.word	0x0800d738
 8002b54:	00000000 	.word	0x00000000

08002b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b5e:	f000 fdde 	bl	800371e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b62:	f000 f9c3 	bl	8002eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b66:	f000 fb1f 	bl	80031a8 <MX_GPIO_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002b6a:	f004 ff7d 	bl	8007a68 <MX_FATFS_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <main+0x20>
    Error_Handler();
 8002b74:	f000 fb80 	bl	8003278 <Error_Handler>
  }
  MX_SPI1_Init();
 8002b78:	f000 fa38 	bl	8002fec <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002b7c:	f000 fac8 	bl	8003110 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8002b80:	f000 f9f4 	bl	8002f6c <MX_I2C3_Init>
  MX_TIM1_Init();
 8002b84:	f000 fa70 	bl	8003068 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8002b88:	48af      	ldr	r0, [pc, #700]	@ (8002e48 <main+0x2f0>)
 8002b8a:	f003 fd05 	bl	8006598 <HAL_TIM_Base_Start>
  init_bme280();
 8002b8e:	f7ff fee9 	bl	8002964 <init_bme280>
  printf("\r\nMini Weather station\r\n\r\n");
 8002b92:	48ae      	ldr	r0, [pc, #696]	@ (8002e4c <main+0x2f4>)
 8002b94:	f008 fcae 	bl	800b4f4 <puts>
  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8002b98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b9c:	f000 fe30 	bl	8003800 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	char filename[] = "logs.txt";
 8002ba0:	4aab      	ldr	r2, [pc, #684]	@ (8002e50 <main+0x2f8>)
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ba6:	c303      	stmia	r3!, {r0, r1}
 8002ba8:	701a      	strb	r2, [r3, #0]
;
	rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002baa:	49aa      	ldr	r1, [pc, #680]	@ (8002e54 <main+0x2fc>)
 8002bac:	2001      	movs	r0, #1
 8002bae:	f7fe fb84 	bl	80012ba <bme280_set_sensor_mode>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4ba8      	ldr	r3, [pc, #672]	@ (8002e58 <main+0x300>)
 8002bb8:	701a      	strb	r2, [r3, #0]
	if (rslt != BME280_OK) {
 8002bba:	4ba7      	ldr	r3, [pc, #668]	@ (8002e58 <main+0x300>)
 8002bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <main+0x7a>
	printf("BME280 mode error: %d\n", rslt);
 8002bc4:	4ba4      	ldr	r3, [pc, #656]	@ (8002e58 <main+0x300>)
 8002bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	48a3      	ldr	r0, [pc, #652]	@ (8002e5c <main+0x304>)
 8002bce:	f008 fc29 	bl	800b424 <iprintf>
	}
	dev.delay_ms(40);
 8002bd2:	4ba0      	ldr	r3, [pc, #640]	@ (8002e54 <main+0x2fc>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2028      	movs	r0, #40	@ 0x28
 8002bd8:	4798      	blx	r3
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002bda:	4a9e      	ldr	r2, [pc, #632]	@ (8002e54 <main+0x2fc>)
 8002bdc:	49a0      	ldr	r1, [pc, #640]	@ (8002e60 <main+0x308>)
 8002bde:	2007      	movs	r0, #7
 8002be0:	f7fe fbe7 	bl	80013b2 <bme280_get_sensor_data>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b9b      	ldr	r3, [pc, #620]	@ (8002e58 <main+0x300>)
 8002bea:	701a      	strb	r2, [r3, #0]
	if(rslt == BME280_OK)
 8002bec:	4b9a      	ldr	r3, [pc, #616]	@ (8002e58 <main+0x300>)
 8002bee:	f993 3000 	ldrsb.w	r3, [r3]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 811d 	bne.w	8002e32 <main+0x2da>
		{
			temperature = comp_data.temperature / 100.0;
 8002bf8:	4b99      	ldr	r3, [pc, #612]	@ (8002e60 <main+0x308>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fcb9 	bl	8000574 <__aeabi_i2d>
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	4b97      	ldr	r3, [pc, #604]	@ (8002e64 <main+0x30c>)
 8002c08:	f7fd fe48 	bl	800089c <__aeabi_ddiv>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fd fff0 	bl	8000bf8 <__aeabi_d2f>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4a93      	ldr	r2, [pc, #588]	@ (8002e68 <main+0x310>)
 8002c1c:	6013      	str	r3, [r2, #0]
	        humidity = comp_data.humidity / 1024.0;
 8002c1e:	4b90      	ldr	r3, [pc, #576]	@ (8002e60 <main+0x308>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fc96 	bl	8000554 <__aeabi_ui2d>
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	4b8f      	ldr	r3, [pc, #572]	@ (8002e6c <main+0x314>)
 8002c2e:	f7fd fe35 	bl	800089c <__aeabi_ddiv>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7fd ffdd 	bl	8000bf8 <__aeabi_d2f>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4a8b      	ldr	r2, [pc, #556]	@ (8002e70 <main+0x318>)
 8002c42:	6013      	str	r3, [r2, #0]
	        pressure = comp_data.pressure / 10000.0;
 8002c44:	4b86      	ldr	r3, [pc, #536]	@ (8002e60 <main+0x308>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fd fc83 	bl	8000554 <__aeabi_ui2d>
 8002c4e:	a37c      	add	r3, pc, #496	@ (adr r3, 8002e40 <main+0x2e8>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f7fd fe22 	bl	800089c <__aeabi_ddiv>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7fd ffca 	bl	8000bf8 <__aeabi_d2f>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4a83      	ldr	r2, [pc, #524]	@ (8002e74 <main+0x31c>)
 8002c68:	6013      	str	r3, [r2, #0]
            memset(hum_string, 0, sizeof(hum_string));
 8002c6a:	2232      	movs	r2, #50	@ 0x32
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4882      	ldr	r0, [pc, #520]	@ (8002e78 <main+0x320>)
 8002c70:	f008 fd40 	bl	800b6f4 <memset>
	        memset(temp_string, 0, sizeof(temp_string));
 8002c74:	2232      	movs	r2, #50	@ 0x32
 8002c76:	2100      	movs	r1, #0
 8002c78:	4880      	ldr	r0, [pc, #512]	@ (8002e7c <main+0x324>)
 8002c7a:	f008 fd3b 	bl	800b6f4 <memset>
	        memset(press_string, 0, sizeof(press_string));
 8002c7e:	2232      	movs	r2, #50	@ 0x32
 8002c80:	2100      	movs	r1, #0
 8002c82:	487f      	ldr	r0, [pc, #508]	@ (8002e80 <main+0x328>)
 8002c84:	f008 fd36 	bl	800b6f4 <memset>
            memset(hum_DHT11_string, 0, sizeof(hum_DHT11_string));
 8002c88:	2232      	movs	r2, #50	@ 0x32
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	487d      	ldr	r0, [pc, #500]	@ (8002e84 <main+0x32c>)
 8002c8e:	f008 fd31 	bl	800b6f4 <memset>
	        memset(temp_DHT11_string, 0, sizeof(temp_DHT11_string));
 8002c92:	2232      	movs	r2, #50	@ 0x32
 8002c94:	2100      	movs	r1, #0
 8002c96:	487c      	ldr	r0, [pc, #496]	@ (8002e88 <main+0x330>)
 8002c98:	f008 fd2c 	bl	800b6f4 <memset>
	        printf("Parameters measuremented by bme280: \r\n");
 8002c9c:	487b      	ldr	r0, [pc, #492]	@ (8002e8c <main+0x334>)
 8002c9e:	f008 fc29 	bl	800b4f4 <puts>
	        sprintf(hum_string, "Humidity: %03.1f %% \n\r", humidity);
 8002ca2:	4b73      	ldr	r3, [pc, #460]	@ (8002e70 <main+0x318>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc76 	bl	8000598 <__aeabi_f2d>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4977      	ldr	r1, [pc, #476]	@ (8002e90 <main+0x338>)
 8002cb2:	4871      	ldr	r0, [pc, #452]	@ (8002e78 <main+0x320>)
 8002cb4:	f008 fc26 	bl	800b504 <siprintf>
	        printf("%s", hum_string);
 8002cb8:	496f      	ldr	r1, [pc, #444]	@ (8002e78 <main+0x320>)
 8002cba:	4876      	ldr	r0, [pc, #472]	@ (8002e94 <main+0x33c>)
 8002cbc:	f008 fbb2 	bl	800b424 <iprintf>
	        sprintf(temp_string, "Temperature: %03.1f °C \n\r", temperature);
 8002cc0:	4b69      	ldr	r3, [pc, #420]	@ (8002e68 <main+0x310>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fc67 	bl	8000598 <__aeabi_f2d>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4972      	ldr	r1, [pc, #456]	@ (8002e98 <main+0x340>)
 8002cd0:	486a      	ldr	r0, [pc, #424]	@ (8002e7c <main+0x324>)
 8002cd2:	f008 fc17 	bl	800b504 <siprintf>
	        printf("%s", temp_string);
 8002cd6:	4969      	ldr	r1, [pc, #420]	@ (8002e7c <main+0x324>)
 8002cd8:	486e      	ldr	r0, [pc, #440]	@ (8002e94 <main+0x33c>)
 8002cda:	f008 fba3 	bl	800b424 <iprintf>
	        sprintf(press_string, "Pressure: %03.1f hPa \n\r", pressure);
 8002cde:	4b65      	ldr	r3, [pc, #404]	@ (8002e74 <main+0x31c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fc58 	bl	8000598 <__aeabi_f2d>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	496b      	ldr	r1, [pc, #428]	@ (8002e9c <main+0x344>)
 8002cee:	4864      	ldr	r0, [pc, #400]	@ (8002e80 <main+0x328>)
 8002cf0:	f008 fc08 	bl	800b504 <siprintf>
	        printf("%s", press_string);
 8002cf4:	4962      	ldr	r1, [pc, #392]	@ (8002e80 <main+0x328>)
 8002cf6:	4867      	ldr	r0, [pc, #412]	@ (8002e94 <main+0x33c>)
 8002cf8:	f008 fb94 	bl	800b424 <iprintf>
	        HAL_Delay(1000);
 8002cfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d00:	f000 fd7e 	bl	8003800 <HAL_Delay>
	        printf("Parameters measuremented by DHT11\n\r");
 8002d04:	4866      	ldr	r0, [pc, #408]	@ (8002ea0 <main+0x348>)
 8002d06:	f008 fb8d 	bl	800b424 <iprintf>
	        DHT11_strukturalne.DHT11_Start_struct(&DHT11_strukturalne);
 8002d0a:	4b66      	ldr	r3, [pc, #408]	@ (8002ea4 <main+0x34c>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4865      	ldr	r0, [pc, #404]	@ (8002ea4 <main+0x34c>)
 8002d10:	4798      	blx	r3
            Presence = DHT11_strukturalne.Check_Response_struct(&DHT11_strukturalne);
 8002d12:	4b64      	ldr	r3, [pc, #400]	@ (8002ea4 <main+0x34c>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	4863      	ldr	r0, [pc, #396]	@ (8002ea4 <main+0x34c>)
 8002d18:	4798      	blx	r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b62      	ldr	r3, [pc, #392]	@ (8002ea8 <main+0x350>)
 8002d20:	701a      	strb	r2, [r3, #0]
            Rh_byte1 = DHT11_strukturalne.DHT11_Read_struct(&DHT11_strukturalne);
 8002d22:	4b60      	ldr	r3, [pc, #384]	@ (8002ea4 <main+0x34c>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	485f      	ldr	r0, [pc, #380]	@ (8002ea4 <main+0x34c>)
 8002d28:	4798      	blx	r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8002eac <main+0x354>)
 8002d30:	701a      	strb	r2, [r3, #0]
            Rh_byte2 = DHT11_strukturalne.DHT11_Read_struct(&DHT11_strukturalne);
 8002d32:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea4 <main+0x34c>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	485b      	ldr	r0, [pc, #364]	@ (8002ea4 <main+0x34c>)
 8002d38:	4798      	blx	r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002eb0 <main+0x358>)
 8002d40:	701a      	strb	r2, [r3, #0]
            Temp_byte1 = DHT11_strukturalne.DHT11_Read_struct(&DHT11_strukturalne);
 8002d42:	4b58      	ldr	r3, [pc, #352]	@ (8002ea4 <main+0x34c>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4857      	ldr	r0, [pc, #348]	@ (8002ea4 <main+0x34c>)
 8002d48:	4798      	blx	r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b59      	ldr	r3, [pc, #356]	@ (8002eb4 <main+0x35c>)
 8002d50:	701a      	strb	r2, [r3, #0]
            Temp_byte2 = DHT11_strukturalne.DHT11_Read_struct(&DHT11_strukturalne);
 8002d52:	4b54      	ldr	r3, [pc, #336]	@ (8002ea4 <main+0x34c>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4853      	ldr	r0, [pc, #332]	@ (8002ea4 <main+0x34c>)
 8002d58:	4798      	blx	r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b56      	ldr	r3, [pc, #344]	@ (8002eb8 <main+0x360>)
 8002d60:	701a      	strb	r2, [r3, #0]
            SUM = DHT11_strukturalne.DHT11_Read_struct(&DHT11_strukturalne);
 8002d62:	4b50      	ldr	r3, [pc, #320]	@ (8002ea4 <main+0x34c>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	484f      	ldr	r0, [pc, #316]	@ (8002ea4 <main+0x34c>)
 8002d68:	4798      	blx	r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b53      	ldr	r3, [pc, #332]	@ (8002ebc <main+0x364>)
 8002d70:	701a      	strb	r2, [r3, #0]
            sprintf(hum_DHT11_string, "%u %%\n\r", Rh_byte1);
 8002d72:	4b4e      	ldr	r3, [pc, #312]	@ (8002eac <main+0x354>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4951      	ldr	r1, [pc, #324]	@ (8002ec0 <main+0x368>)
 8002d7a:	4842      	ldr	r0, [pc, #264]	@ (8002e84 <main+0x32c>)
 8002d7c:	f008 fbc2 	bl	800b504 <siprintf>
            sprintf(temp_DHT11_string, "%u°C\n\r", Temp_byte1);
 8002d80:	4b4c      	ldr	r3, [pc, #304]	@ (8002eb4 <main+0x35c>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	494f      	ldr	r1, [pc, #316]	@ (8002ec4 <main+0x36c>)
 8002d88:	483f      	ldr	r0, [pc, #252]	@ (8002e88 <main+0x330>)
 8002d8a:	f008 fbbb 	bl	800b504 <siprintf>
            printf("Humidity: %u %%\n\r", Rh_byte1);
 8002d8e:	4b47      	ldr	r3, [pc, #284]	@ (8002eac <main+0x354>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	4619      	mov	r1, r3
 8002d94:	484c      	ldr	r0, [pc, #304]	@ (8002ec8 <main+0x370>)
 8002d96:	f008 fb45 	bl	800b424 <iprintf>
            printf("Temperature: %u°C\n\r", Temp_byte1);
 8002d9a:	4b46      	ldr	r3, [pc, #280]	@ (8002eb4 <main+0x35c>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	484a      	ldr	r0, [pc, #296]	@ (8002ecc <main+0x374>)
 8002da2:	f008 fb3f 	bl	800b424 <iprintf>
            printf("Saving data on SD card...\n\r");
 8002da6:	484a      	ldr	r0, [pc, #296]	@ (8002ed0 <main+0x378>)
 8002da8:	f008 fb3c 	bl	800b424 <iprintf>
            HAL_Delay(10);
 8002dac:	200a      	movs	r0, #10
 8002dae:	f000 fd27 	bl	8003800 <HAL_Delay>
            SD_mount();
 8002db2:	f7ff fe21 	bl	80029f8 <SD_mount>
            HAL_Delay(10);
 8002db6:	200a      	movs	r0, #10
 8002db8:	f000 fd22 	bl	8003800 <HAL_Delay>
            if (SD_create_new_file(filename) == 8)
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fe46 	bl	8002a50 <SD_create_new_file>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d105      	bne.n	8002dd6 <main+0x27e>
            {
            	SD_close_file();
 8002dca:	f7ff fe37 	bl	8002a3c <SD_close_file>
            	SD_open_file_append(filename);
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fe71 	bl	8002ab8 <SD_open_file_append>
            }
            HAL_Delay(10);
 8002dd6:	200a      	movs	r0, #10
 8002dd8:	f000 fd12 	bl	8003800 <HAL_Delay>
            SD_write_data("Parameters measuremented by DHT11:\n\r");
 8002ddc:	483d      	ldr	r0, [pc, #244]	@ (8002ed4 <main+0x37c>)
 8002dde:	f7ff fe93 	bl	8002b08 <SD_write_data>
            SD_write_data("Humidity: ");
 8002de2:	483d      	ldr	r0, [pc, #244]	@ (8002ed8 <main+0x380>)
 8002de4:	f7ff fe90 	bl	8002b08 <SD_write_data>
            SD_write_data(hum_DHT11_string);
 8002de8:	4826      	ldr	r0, [pc, #152]	@ (8002e84 <main+0x32c>)
 8002dea:	f7ff fe8d 	bl	8002b08 <SD_write_data>
            SD_write_data("Temperature: ");
 8002dee:	483b      	ldr	r0, [pc, #236]	@ (8002edc <main+0x384>)
 8002df0:	f7ff fe8a 	bl	8002b08 <SD_write_data>
            SD_write_data(temp_DHT11_string);
 8002df4:	4824      	ldr	r0, [pc, #144]	@ (8002e88 <main+0x330>)
 8002df6:	f7ff fe87 	bl	8002b08 <SD_write_data>
            SD_write_data("Parameters measuremented by bme280:\n\r");
 8002dfa:	4839      	ldr	r0, [pc, #228]	@ (8002ee0 <main+0x388>)
 8002dfc:	f7ff fe84 	bl	8002b08 <SD_write_data>
            SD_write_data(hum_string);
 8002e00:	481d      	ldr	r0, [pc, #116]	@ (8002e78 <main+0x320>)
 8002e02:	f7ff fe81 	bl	8002b08 <SD_write_data>
            SD_write_data("\n");
 8002e06:	4837      	ldr	r0, [pc, #220]	@ (8002ee4 <main+0x38c>)
 8002e08:	f7ff fe7e 	bl	8002b08 <SD_write_data>
            SD_write_data(temp_string);
 8002e0c:	481b      	ldr	r0, [pc, #108]	@ (8002e7c <main+0x324>)
 8002e0e:	f7ff fe7b 	bl	8002b08 <SD_write_data>
            SD_write_data("\n");
 8002e12:	4834      	ldr	r0, [pc, #208]	@ (8002ee4 <main+0x38c>)
 8002e14:	f7ff fe78 	bl	8002b08 <SD_write_data>
            SD_write_data(press_string);
 8002e18:	4819      	ldr	r0, [pc, #100]	@ (8002e80 <main+0x328>)
 8002e1a:	f7ff fe75 	bl	8002b08 <SD_write_data>
            SD_write_data("\n");
 8002e1e:	4831      	ldr	r0, [pc, #196]	@ (8002ee4 <main+0x38c>)
 8002e20:	f7ff fe72 	bl	8002b08 <SD_write_data>
            SD_close_file(); // Zamknij plik;
 8002e24:	f7ff fe0a 	bl	8002a3c <SD_close_file>
            SD_unmount();    // Odmontuj system plików;
 8002e28:	f7ff fe3a 	bl	8002aa0 <SD_unmount>
            printf("Data saved\r\n");
 8002e2c:	482e      	ldr	r0, [pc, #184]	@ (8002ee8 <main+0x390>)
 8002e2e:	f008 fb61 	bl	800b4f4 <puts>
	     }

	     HAL_Delay(1000);
 8002e32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e36:	f000 fce3 	bl	8003800 <HAL_Delay>
  {
 8002e3a:	e6b1      	b.n	8002ba0 <main+0x48>
 8002e3c:	f3af 8000 	nop.w
 8002e40:	00000000 	.word	0x00000000
 8002e44:	40c38800 	.word	0x40c38800
 8002e48:	200002e0 	.word	0x200002e0
 8002e4c:	0800d750 	.word	0x0800d750
 8002e50:	0800d8f4 	.word	0x0800d8f4
 8002e54:	200003cc 	.word	0x200003cc
 8002e58:	20000418 	.word	0x20000418
 8002e5c:	0800d76c 	.word	0x0800d76c
 8002e60:	2000040c 	.word	0x2000040c
 8002e64:	40590000 	.word	0x40590000
 8002e68:	200003c0 	.word	0x200003c0
 8002e6c:	40900000 	.word	0x40900000
 8002e70:	200003c4 	.word	0x200003c4
 8002e74:	200003c8 	.word	0x200003c8
 8002e78:	2000041c 	.word	0x2000041c
 8002e7c:	20000450 	.word	0x20000450
 8002e80:	20000484 	.word	0x20000484
 8002e84:	200004b8 	.word	0x200004b8
 8002e88:	200004ec 	.word	0x200004ec
 8002e8c:	0800d784 	.word	0x0800d784
 8002e90:	0800d7ac 	.word	0x0800d7ac
 8002e94:	0800d7c4 	.word	0x0800d7c4
 8002e98:	0800d7c8 	.word	0x0800d7c8
 8002e9c:	0800d7e4 	.word	0x0800d7e4
 8002ea0:	0800d7fc 	.word	0x0800d7fc
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	2000051e 	.word	0x2000051e
 8002eac:	2000051f 	.word	0x2000051f
 8002eb0:	20000520 	.word	0x20000520
 8002eb4:	20000521 	.word	0x20000521
 8002eb8:	20000522 	.word	0x20000522
 8002ebc:	20000523 	.word	0x20000523
 8002ec0:	0800d820 	.word	0x0800d820
 8002ec4:	0800d828 	.word	0x0800d828
 8002ec8:	0800d830 	.word	0x0800d830
 8002ecc:	0800d844 	.word	0x0800d844
 8002ed0:	0800d85c 	.word	0x0800d85c
 8002ed4:	0800d878 	.word	0x0800d878
 8002ed8:	0800d8a0 	.word	0x0800d8a0
 8002edc:	0800d8ac 	.word	0x0800d8ac
 8002ee0:	0800d8bc 	.word	0x0800d8bc
 8002ee4:	0800d8e4 	.word	0x0800d8e4
 8002ee8:	0800d8e8 	.word	0x0800d8e8

08002eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b094      	sub	sp, #80	@ 0x50
 8002ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ef2:	f107 0318 	add.w	r3, r7, #24
 8002ef6:	2238      	movs	r2, #56	@ 0x38
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f008 fbfa 	bl	800b6f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002f12:	f001 fd15 	bl	8004940 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f20:	2340      	movs	r3, #64	@ 0x40
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f28:	f107 0318 	add.w	r3, r7, #24
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 fdbb 	bl	8004aa8 <HAL_RCC_OscConfig>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002f38:	f000 f99e 	bl	8003278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f40:	2301      	movs	r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f002 f8b9 	bl	80050cc <HAL_RCC_ClockConfig>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002f60:	f000 f98a 	bl	8003278 <Error_Handler>
  }
}
 8002f64:	bf00      	nop
 8002f66:	3750      	adds	r7, #80	@ 0x50
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002f72:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <MX_I2C3_Init+0x78>)
 8002f74:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8002f76:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002f78:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <MX_I2C3_Init+0x7c>)
 8002f7a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002f7c:	4b18      	ldr	r3, [pc, #96]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f82:	4b17      	ldr	r3, [pc, #92]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f88:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002f8e:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f94:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f9a:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002fa6:	480e      	ldr	r0, [pc, #56]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002fa8:	f000 fee2 	bl	8003d70 <HAL_I2C_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002fb2:	f000 f961 	bl	8003278 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4809      	ldr	r0, [pc, #36]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002fba:	f001 fc29 	bl	8004810 <HAL_I2CEx_ConfigAnalogFilter>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002fc4:	f000 f958 	bl	8003278 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4805      	ldr	r0, [pc, #20]	@ (8002fe0 <MX_I2C3_Init+0x74>)
 8002fcc:	f001 fc6b 	bl	80048a6 <HAL_I2CEx_ConfigDigitalFilter>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002fd6:	f000 f94f 	bl	8003278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000228 	.word	0x20000228
 8002fe4:	40007800 	.word	0x40007800
 8002fe8:	00503d58 	.word	0x00503d58

08002fec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <MX_SPI1_Init+0x74>)
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8003064 <MX_SPI1_Init+0x78>)
 8002ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8003060 <MX_SPI1_Init+0x74>)
 8002ff8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ffe:	4b18      	ldr	r3, [pc, #96]	@ (8003060 <MX_SPI1_Init+0x74>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003004:	4b16      	ldr	r3, [pc, #88]	@ (8003060 <MX_SPI1_Init+0x74>)
 8003006:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800300a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800300c:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <MX_SPI1_Init+0x74>)
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003012:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <MX_SPI1_Init+0x74>)
 8003014:	2200      	movs	r2, #0
 8003016:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003018:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <MX_SPI1_Init+0x74>)
 800301a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800301e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003020:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <MX_SPI1_Init+0x74>)
 8003022:	2218      	movs	r2, #24
 8003024:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003026:	4b0e      	ldr	r3, [pc, #56]	@ (8003060 <MX_SPI1_Init+0x74>)
 8003028:	2200      	movs	r2, #0
 800302a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <MX_SPI1_Init+0x74>)
 800302e:	2200      	movs	r2, #0
 8003030:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003032:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <MX_SPI1_Init+0x74>)
 8003034:	2200      	movs	r2, #0
 8003036:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <MX_SPI1_Init+0x74>)
 800303a:	2207      	movs	r2, #7
 800303c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <MX_SPI1_Init+0x74>)
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <MX_SPI1_Init+0x74>)
 8003046:	2208      	movs	r2, #8
 8003048:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800304a:	4805      	ldr	r0, [pc, #20]	@ (8003060 <MX_SPI1_Init+0x74>)
 800304c:	f002 fca8 	bl	80059a0 <HAL_SPI_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003056:	f000 f90f 	bl	8003278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000027c 	.word	0x2000027c
 8003064:	40013000 	.word	0x40013000

08003068 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800306e:	f107 0310 	add.w	r3, r7, #16
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	609a      	str	r2, [r3, #8]
 800307a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800307c:	1d3b      	adds	r3, r7, #4
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003086:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <MX_TIM1_Init+0xa0>)
 8003088:	4a20      	ldr	r2, [pc, #128]	@ (800310c <MX_TIM1_Init+0xa4>)
 800308a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800308c:	4b1e      	ldr	r3, [pc, #120]	@ (8003108 <MX_TIM1_Init+0xa0>)
 800308e:	220f      	movs	r2, #15
 8003090:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003092:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <MX_TIM1_Init+0xa0>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003098:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <MX_TIM1_Init+0xa0>)
 800309a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800309e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a0:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <MX_TIM1_Init+0xa0>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030a6:	4b18      	ldr	r3, [pc, #96]	@ (8003108 <MX_TIM1_Init+0xa0>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ac:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <MX_TIM1_Init+0xa0>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030b2:	4815      	ldr	r0, [pc, #84]	@ (8003108 <MX_TIM1_Init+0xa0>)
 80030b4:	f003 fa18 	bl	80064e8 <HAL_TIM_Base_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80030be:	f000 f8db 	bl	8003278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	4619      	mov	r1, r3
 80030ce:	480e      	ldr	r0, [pc, #56]	@ (8003108 <MX_TIM1_Init+0xa0>)
 80030d0:	f003 fad2 	bl	8006678 <HAL_TIM_ConfigClockSource>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80030da:	f000 f8cd 	bl	8003278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4806      	ldr	r0, [pc, #24]	@ (8003108 <MX_TIM1_Init+0xa0>)
 80030f0:	f003 fd28 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80030fa:	f000 f8bd 	bl	8003278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80030fe:	bf00      	nop
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200002e0 	.word	0x200002e0
 800310c:	40012c00 	.word	0x40012c00

08003110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003114:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003116:	4a23      	ldr	r2, [pc, #140]	@ (80031a4 <MX_USART2_UART_Init+0x94>)
 8003118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800311a:	4b21      	ldr	r3, [pc, #132]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800311c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003122:	4b1f      	ldr	r3, [pc, #124]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003128:	4b1d      	ldr	r3, [pc, #116]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800312e:	4b1c      	ldr	r3, [pc, #112]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003134:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003136:	220c      	movs	r2, #12
 8003138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800313a:	4b19      	ldr	r3, [pc, #100]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003140:	4b17      	ldr	r3, [pc, #92]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003142:	2200      	movs	r2, #0
 8003144:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003146:	4b16      	ldr	r3, [pc, #88]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003148:	2200      	movs	r2, #0
 800314a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800314c:	4b14      	ldr	r3, [pc, #80]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800314e:	2200      	movs	r2, #0
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003152:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003154:	2200      	movs	r2, #0
 8003156:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003158:	4811      	ldr	r0, [pc, #68]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800315a:	f003 fd89 	bl	8006c70 <HAL_UART_Init>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003164:	f000 f888 	bl	8003278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003168:	2100      	movs	r1, #0
 800316a:	480d      	ldr	r0, [pc, #52]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800316c:	f004 fbb2 	bl	80078d4 <HAL_UARTEx_SetTxFifoThreshold>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003176:	f000 f87f 	bl	8003278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800317a:	2100      	movs	r1, #0
 800317c:	4808      	ldr	r0, [pc, #32]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800317e:	f004 fbe7 	bl	8007950 <HAL_UARTEx_SetRxFifoThreshold>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003188:	f000 f876 	bl	8003278 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800318c:	4804      	ldr	r0, [pc, #16]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800318e:	f004 fb68 	bl	8007862 <HAL_UARTEx_DisableFifoMode>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003198:	f000 f86e 	bl	8003278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	2000032c 	.word	0x2000032c
 80031a4:	40004400 	.word	0x40004400

080031a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ae:	f107 030c 	add.w	r3, r7, #12
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	60da      	str	r2, [r3, #12]
 80031bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031be:	4b2b      	ldr	r3, [pc, #172]	@ (800326c <MX_GPIO_Init+0xc4>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c2:	4a2a      	ldr	r2, [pc, #168]	@ (800326c <MX_GPIO_Init+0xc4>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ca:	4b28      	ldr	r3, [pc, #160]	@ (800326c <MX_GPIO_Init+0xc4>)
 80031cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d6:	4b25      	ldr	r3, [pc, #148]	@ (800326c <MX_GPIO_Init+0xc4>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	4a24      	ldr	r2, [pc, #144]	@ (800326c <MX_GPIO_Init+0xc4>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031e2:	4b22      	ldr	r3, [pc, #136]	@ (800326c <MX_GPIO_Init+0xc4>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ee:	4b1f      	ldr	r3, [pc, #124]	@ (800326c <MX_GPIO_Init+0xc4>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f2:	4a1e      	ldr	r2, [pc, #120]	@ (800326c <MX_GPIO_Init+0xc4>)
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031fa:	4b1c      	ldr	r3, [pc, #112]	@ (800326c <MX_GPIO_Init+0xc4>)
 80031fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003206:	2201      	movs	r2, #1
 8003208:	2140      	movs	r1, #64	@ 0x40
 800320a:	4819      	ldr	r0, [pc, #100]	@ (8003270 <MX_GPIO_Init+0xc8>)
 800320c:	f000 fd98 	bl	8003d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003210:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	4619      	mov	r1, r3
 8003224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003228:	f000 fbf0 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800322c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800323a:	f107 030c 	add.w	r3, r7, #12
 800323e:	4619      	mov	r1, r3
 8003240:	480c      	ldr	r0, [pc, #48]	@ (8003274 <MX_GPIO_Init+0xcc>)
 8003242:	f000 fbe3 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003246:	2340      	movs	r3, #64	@ 0x40
 8003248:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324a:	2301      	movs	r3, #1
 800324c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800324e:	2301      	movs	r3, #1
 8003250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	4619      	mov	r1, r3
 800325c:	4804      	ldr	r0, [pc, #16]	@ (8003270 <MX_GPIO_Init+0xc8>)
 800325e:	f000 fbd5 	bl	8003a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003262:	bf00      	nop
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	48000400 	.word	0x48000400
 8003274:	48000800 	.word	0x48000800

08003278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800327c:	b672      	cpsid	i
}
 800327e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <Error_Handler+0x8>

08003284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328a:	4b0f      	ldr	r3, [pc, #60]	@ (80032c8 <HAL_MspInit+0x44>)
 800328c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328e:	4a0e      	ldr	r2, [pc, #56]	@ (80032c8 <HAL_MspInit+0x44>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6613      	str	r3, [r2, #96]	@ 0x60
 8003296:	4b0c      	ldr	r3, [pc, #48]	@ (80032c8 <HAL_MspInit+0x44>)
 8003298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <HAL_MspInit+0x44>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	4a08      	ldr	r2, [pc, #32]	@ (80032c8 <HAL_MspInit+0x44>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_MspInit+0x44>)
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80032ba:	f001 fbe5 	bl	8004a88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000

080032cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b09e      	sub	sp, #120	@ 0x78
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032e4:	f107 0310 	add.w	r3, r7, #16
 80032e8:	2254      	movs	r2, #84	@ 0x54
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f008 fa01 	bl	800b6f4 <memset>
  if(hi2c->Instance==I2C3)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003374 <HAL_I2C_MspInit+0xa8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d137      	bne.n	800336c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80032fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003300:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003302:	2300      	movs	r3, #0
 8003304:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003306:	f107 0310 	add.w	r3, r7, #16
 800330a:	4618      	mov	r0, r3
 800330c:	f002 f8fa 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003316:	f7ff ffaf 	bl	8003278 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800331a:	4b17      	ldr	r3, [pc, #92]	@ (8003378 <HAL_I2C_MspInit+0xac>)
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	4a16      	ldr	r2, [pc, #88]	@ (8003378 <HAL_I2C_MspInit+0xac>)
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003326:	4b14      	ldr	r3, [pc, #80]	@ (8003378 <HAL_I2C_MspInit+0xac>)
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003332:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003336:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003338:	2312      	movs	r3, #18
 800333a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003340:	2300      	movs	r3, #0
 8003342:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003344:	2308      	movs	r3, #8
 8003346:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003348:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800334c:	4619      	mov	r1, r3
 800334e:	480b      	ldr	r0, [pc, #44]	@ (800337c <HAL_I2C_MspInit+0xb0>)
 8003350:	f000 fb5c 	bl	8003a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003354:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <HAL_I2C_MspInit+0xac>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	4a07      	ldr	r2, [pc, #28]	@ (8003378 <HAL_I2C_MspInit+0xac>)
 800335a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800335e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_I2C_MspInit+0xac>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800336c:	bf00      	nop
 800336e:	3778      	adds	r7, #120	@ 0x78
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40007800 	.word	0x40007800
 8003378:	40021000 	.word	0x40021000
 800337c:	48000800 	.word	0x48000800

08003380 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	@ 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <HAL_SPI_MspInit+0x7c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d128      	bne.n	80033f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033a2:	4b17      	ldr	r3, [pc, #92]	@ (8003400 <HAL_SPI_MspInit+0x80>)
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	4a16      	ldr	r2, [pc, #88]	@ (8003400 <HAL_SPI_MspInit+0x80>)
 80033a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80033ae:	4b14      	ldr	r3, [pc, #80]	@ (8003400 <HAL_SPI_MspInit+0x80>)
 80033b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ba:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <HAL_SPI_MspInit+0x80>)
 80033bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033be:	4a10      	ldr	r2, [pc, #64]	@ (8003400 <HAL_SPI_MspInit+0x80>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003400 <HAL_SPI_MspInit+0x80>)
 80033c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80033d2:	23e0      	movs	r3, #224	@ 0xe0
 80033d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033e2:	2305      	movs	r3, #5
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	4619      	mov	r1, r3
 80033ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033f0:	f000 fb0c 	bl	8003a0c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80033f4:	bf00      	nop
 80033f6:	3728      	adds	r7, #40	@ 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40013000 	.word	0x40013000
 8003400:	40021000 	.word	0x40021000

08003404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0a      	ldr	r2, [pc, #40]	@ (800343c <HAL_TIM_Base_MspInit+0x38>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10b      	bne.n	800342e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <HAL_TIM_Base_MspInit+0x3c>)
 8003418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341a:	4a09      	ldr	r2, [pc, #36]	@ (8003440 <HAL_TIM_Base_MspInit+0x3c>)
 800341c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003420:	6613      	str	r3, [r2, #96]	@ 0x60
 8003422:	4b07      	ldr	r3, [pc, #28]	@ (8003440 <HAL_TIM_Base_MspInit+0x3c>)
 8003424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40021000 	.word	0x40021000

08003444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b09e      	sub	sp, #120	@ 0x78
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	2254      	movs	r2, #84	@ 0x54
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f008 f945 	bl	800b6f4 <memset>
  if(huart->Instance==USART2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <HAL_UART_MspInit+0xa8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d136      	bne.n	80034e2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003474:	2302      	movs	r3, #2
 8003476:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800347c:	f107 0310 	add.w	r3, r7, #16
 8003480:	4618      	mov	r0, r3
 8003482:	f002 f83f 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800348c:	f7ff fef4 	bl	8003278 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003490:	4b17      	ldr	r3, [pc, #92]	@ (80034f0 <HAL_UART_MspInit+0xac>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003494:	4a16      	ldr	r2, [pc, #88]	@ (80034f0 <HAL_UART_MspInit+0xac>)
 8003496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349a:	6593      	str	r3, [r2, #88]	@ 0x58
 800349c:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <HAL_UART_MspInit+0xac>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a8:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_UART_MspInit+0xac>)
 80034aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ac:	4a10      	ldr	r2, [pc, #64]	@ (80034f0 <HAL_UART_MspInit+0xac>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034b4:	4b0e      	ldr	r3, [pc, #56]	@ (80034f0 <HAL_UART_MspInit+0xac>)
 80034b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034c0:	230c      	movs	r3, #12
 80034c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034cc:	2300      	movs	r3, #0
 80034ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034d0:	2307      	movs	r3, #7
 80034d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80034d8:	4619      	mov	r1, r3
 80034da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034de:	f000 fa95 	bl	8003a0c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80034e2:	bf00      	nop
 80034e4:	3778      	adds	r7, #120	@ 0x78
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40004400 	.word	0x40004400
 80034f0:	40021000 	.word	0x40021000

080034f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <NMI_Handler+0x4>

080034fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003500:	bf00      	nop
 8003502:	e7fd      	b.n	8003500 <HardFault_Handler+0x4>

08003504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <MemManage_Handler+0x4>

0800350c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <BusFault_Handler+0x4>

08003514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <UsageFault_Handler+0x4>

0800351c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800354a:	f000 f93b 	bl	80037c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}

08003552 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0
  return 1;
 8003556:	2301      	movs	r3, #1
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <_kill>:

int _kill(int pid, int sig)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800356c:	f008 f924 	bl	800b7b8 <__errno>
 8003570:	4603      	mov	r3, r0
 8003572:	2216      	movs	r2, #22
 8003574:	601a      	str	r2, [r3, #0]
  return -1;
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <_exit>:

void _exit (int status)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800358a:	f04f 31ff 	mov.w	r1, #4294967295
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ffe7 	bl	8003562 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <_exit+0x12>

08003598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e00a      	b.n	80035c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035aa:	f3af 8000 	nop.w
 80035ae:	4601      	mov	r1, r0
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	60ba      	str	r2, [r7, #8]
 80035b6:	b2ca      	uxtb	r2, r1
 80035b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3301      	adds	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	dbf0      	blt.n	80035aa <_read+0x12>
  }

  return len;
 80035c8:	687b      	ldr	r3, [r7, #4]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035fa:	605a      	str	r2, [r3, #4]
  return 0;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <_isatty>:

int _isatty(int file)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003612:	2301      	movs	r3, #1
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003644:	4a14      	ldr	r2, [pc, #80]	@ (8003698 <_sbrk+0x5c>)
 8003646:	4b15      	ldr	r3, [pc, #84]	@ (800369c <_sbrk+0x60>)
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003650:	4b13      	ldr	r3, [pc, #76]	@ (80036a0 <_sbrk+0x64>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003658:	4b11      	ldr	r3, [pc, #68]	@ (80036a0 <_sbrk+0x64>)
 800365a:	4a12      	ldr	r2, [pc, #72]	@ (80036a4 <_sbrk+0x68>)
 800365c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800365e:	4b10      	ldr	r3, [pc, #64]	@ (80036a0 <_sbrk+0x64>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	429a      	cmp	r2, r3
 800366a:	d207      	bcs.n	800367c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800366c:	f008 f8a4 	bl	800b7b8 <__errno>
 8003670:	4603      	mov	r3, r0
 8003672:	220c      	movs	r2, #12
 8003674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	e009      	b.n	8003690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800367c:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <_sbrk+0x64>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003682:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <_sbrk+0x64>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	4a05      	ldr	r2, [pc, #20]	@ (80036a0 <_sbrk+0x64>)
 800368c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20020000 	.word	0x20020000
 800369c:	00000400 	.word	0x00000400
 80036a0:	20000988 	.word	0x20000988
 80036a4:	20000b20 	.word	0x20000b20

080036a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036ac:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <SystemInit+0x20>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	4a05      	ldr	r2, [pc, #20]	@ (80036c8 <SystemInit+0x20>)
 80036b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036cc:	480d      	ldr	r0, [pc, #52]	@ (8003704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036d0:	f7ff ffea 	bl	80036a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036d4:	480c      	ldr	r0, [pc, #48]	@ (8003708 <LoopForever+0x6>)
  ldr r1, =_edata
 80036d6:	490d      	ldr	r1, [pc, #52]	@ (800370c <LoopForever+0xa>)
  ldr r2, =_sidata
 80036d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003710 <LoopForever+0xe>)
  movs r3, #0
 80036da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80036dc:	e002      	b.n	80036e4 <LoopCopyDataInit>

080036de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036e2:	3304      	adds	r3, #4

080036e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e8:	d3f9      	bcc.n	80036de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003718 <LoopForever+0x16>)
  movs r3, #0
 80036ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f0:	e001      	b.n	80036f6 <LoopFillZerobss>

080036f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f4:	3204      	adds	r2, #4

080036f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f8:	d3fb      	bcc.n	80036f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036fa:	f008 f863 	bl	800b7c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036fe:	f7ff fa2b 	bl	8002b58 <main>

08003702 <LoopForever>:

LoopForever:
    b LoopForever
 8003702:	e7fe      	b.n	8003702 <LoopForever>
  ldr   r0, =_estack
 8003704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800370c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8003710:	0800dd88 	.word	0x0800dd88
  ldr r2, =_sbss
 8003714:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8003718:	20000b20 	.word	0x20000b20

0800371c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800371c:	e7fe      	b.n	800371c <ADC1_2_IRQHandler>

0800371e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003728:	2003      	movs	r0, #3
 800372a:	f000 f93d 	bl	80039a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800372e:	2000      	movs	r0, #0
 8003730:	f000 f80e 	bl	8003750 <HAL_InitTick>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	71fb      	strb	r3, [r7, #7]
 800373e:	e001      	b.n	8003744 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003740:	f7ff fda0 	bl	8003284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003744:	79fb      	ldrb	r3, [r7, #7]

}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800375c:	4b16      	ldr	r3, [pc, #88]	@ (80037b8 <HAL_InitTick+0x68>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003764:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <HAL_InitTick+0x6c>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b13      	ldr	r3, [pc, #76]	@ (80037b8 <HAL_InitTick+0x68>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003770:	fbb1 f3f3 	udiv	r3, r1, r3
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f93a 	bl	80039f2 <HAL_SYSTICK_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10f      	bne.n	80037a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b0f      	cmp	r3, #15
 8003788:	d809      	bhi.n	800379e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800378a:	2200      	movs	r2, #0
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	f04f 30ff 	mov.w	r0, #4294967295
 8003792:	f000 f914 	bl	80039be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003796:	4a0a      	ldr	r2, [pc, #40]	@ (80037c0 <HAL_InitTick+0x70>)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e007      	b.n	80037ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	e004      	b.n	80037ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	e001      	b.n	80037ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000028 	.word	0x20000028
 80037bc:	20000020 	.word	0x20000020
 80037c0:	20000024 	.word	0x20000024

080037c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c8:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_IncTick+0x1c>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_IncTick+0x20>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	4a03      	ldr	r2, [pc, #12]	@ (80037e0 <HAL_IncTick+0x1c>)
 80037d4:	6013      	str	r3, [r2, #0]
}
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	2000098c 	.word	0x2000098c
 80037e4:	20000028 	.word	0x20000028

080037e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return uwTick;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <HAL_GetTick+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	2000098c 	.word	0x2000098c

08003800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7ff ffee 	bl	80037e8 <HAL_GetTick>
 800380c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d004      	beq.n	8003824 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800381a:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <HAL_Delay+0x40>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4413      	add	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003824:	bf00      	nop
 8003826:	f7ff ffdf 	bl	80037e8 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	429a      	cmp	r2, r3
 8003834:	d8f7      	bhi.n	8003826 <HAL_Delay+0x26>
  {
  }
}
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000028 	.word	0x20000028

08003844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003854:	4b0c      	ldr	r3, [pc, #48]	@ (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003860:	4013      	ands	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800386c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003876:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	60d3      	str	r3, [r2, #12]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003890:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 0307 	and.w	r3, r3, #7
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db0a      	blt.n	80038d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	490c      	ldr	r1, [pc, #48]	@ (80038f4 <__NVIC_SetPriority+0x4c>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	440b      	add	r3, r1
 80038cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d0:	e00a      	b.n	80038e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4908      	ldr	r1, [pc, #32]	@ (80038f8 <__NVIC_SetPriority+0x50>)
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	3b04      	subs	r3, #4
 80038e0:	0112      	lsls	r2, r2, #4
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	440b      	add	r3, r1
 80038e6:	761a      	strb	r2, [r3, #24]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000e100 	.word	0xe000e100
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	@ 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f1c3 0307 	rsb	r3, r3, #7
 8003916:	2b04      	cmp	r3, #4
 8003918:	bf28      	it	cs
 800391a:	2304      	movcs	r3, #4
 800391c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3304      	adds	r3, #4
 8003922:	2b06      	cmp	r3, #6
 8003924:	d902      	bls.n	800392c <NVIC_EncodePriority+0x30>
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3b03      	subs	r3, #3
 800392a:	e000      	b.n	800392e <NVIC_EncodePriority+0x32>
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43da      	mvns	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	401a      	ands	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003944:	f04f 31ff 	mov.w	r1, #4294967295
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	43d9      	mvns	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	4313      	orrs	r3, r2
         );
}
 8003956:	4618      	mov	r0, r3
 8003958:	3724      	adds	r7, #36	@ 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003974:	d301      	bcc.n	800397a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003976:	2301      	movs	r3, #1
 8003978:	e00f      	b.n	800399a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800397a:	4a0a      	ldr	r2, [pc, #40]	@ (80039a4 <SysTick_Config+0x40>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003982:	210f      	movs	r1, #15
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	f7ff ff8e 	bl	80038a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <SysTick_Config+0x40>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003992:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <SysTick_Config+0x40>)
 8003994:	2207      	movs	r2, #7
 8003996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	e000e010 	.word	0xe000e010

080039a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ff47 	bl	8003844 <__NVIC_SetPriorityGrouping>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039cc:	f7ff ff5e 	bl	800388c <__NVIC_GetPriorityGrouping>
 80039d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	6978      	ldr	r0, [r7, #20]
 80039d8:	f7ff ff90 	bl	80038fc <NVIC_EncodePriority>
 80039dc:	4602      	mov	r2, r0
 80039de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff5f 	bl	80038a8 <__NVIC_SetPriority>
}
 80039ea:	bf00      	nop
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ffb2 	bl	8003964 <SysTick_Config>
 8003a00:	4603      	mov	r3, r0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a1a:	e15a      	b.n	8003cd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	2101      	movs	r1, #1
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	4013      	ands	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 814c 	beq.w	8003ccc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d005      	beq.n	8003a4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d130      	bne.n	8003aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a82:	2201      	movs	r2, #1
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	f003 0201 	and.w	r2, r3, #1
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d017      	beq.n	8003aea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d123      	bne.n	8003b3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	08da      	lsrs	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3208      	adds	r2, #8
 8003afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	220f      	movs	r2, #15
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	08da      	lsrs	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3208      	adds	r2, #8
 8003b38:	6939      	ldr	r1, [r7, #16]
 8003b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2203      	movs	r2, #3
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0203 	and.w	r2, r3, #3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80a6 	beq.w	8003ccc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b80:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf0 <HAL_GPIO_Init+0x2e4>)
 8003b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b84:	4a5a      	ldr	r2, [pc, #360]	@ (8003cf0 <HAL_GPIO_Init+0x2e4>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b8c:	4b58      	ldr	r3, [pc, #352]	@ (8003cf0 <HAL_GPIO_Init+0x2e4>)
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b98:	4a56      	ldr	r2, [pc, #344]	@ (8003cf4 <HAL_GPIO_Init+0x2e8>)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	220f      	movs	r2, #15
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bc2:	d01f      	beq.n	8003c04 <HAL_GPIO_Init+0x1f8>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8003cf8 <HAL_GPIO_Init+0x2ec>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d019      	beq.n	8003c00 <HAL_GPIO_Init+0x1f4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a4b      	ldr	r2, [pc, #300]	@ (8003cfc <HAL_GPIO_Init+0x2f0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <HAL_GPIO_Init+0x1f0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a4a      	ldr	r2, [pc, #296]	@ (8003d00 <HAL_GPIO_Init+0x2f4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00d      	beq.n	8003bf8 <HAL_GPIO_Init+0x1ec>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a49      	ldr	r2, [pc, #292]	@ (8003d04 <HAL_GPIO_Init+0x2f8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <HAL_GPIO_Init+0x1e8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a48      	ldr	r2, [pc, #288]	@ (8003d08 <HAL_GPIO_Init+0x2fc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_GPIO_Init+0x1e4>
 8003bec:	2305      	movs	r3, #5
 8003bee:	e00a      	b.n	8003c06 <HAL_GPIO_Init+0x1fa>
 8003bf0:	2306      	movs	r3, #6
 8003bf2:	e008      	b.n	8003c06 <HAL_GPIO_Init+0x1fa>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e006      	b.n	8003c06 <HAL_GPIO_Init+0x1fa>
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e004      	b.n	8003c06 <HAL_GPIO_Init+0x1fa>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e002      	b.n	8003c06 <HAL_GPIO_Init+0x1fa>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_GPIO_Init+0x1fa>
 8003c04:	2300      	movs	r3, #0
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	f002 0203 	and.w	r2, r2, #3
 8003c0c:	0092      	lsls	r2, r2, #2
 8003c0e:	4093      	lsls	r3, r2
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c16:	4937      	ldr	r1, [pc, #220]	@ (8003cf4 <HAL_GPIO_Init+0x2e8>)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c24:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <HAL_GPIO_Init+0x300>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c48:	4a30      	ldr	r2, [pc, #192]	@ (8003d0c <HAL_GPIO_Init+0x300>)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d0c <HAL_GPIO_Init+0x300>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c72:	4a26      	ldr	r2, [pc, #152]	@ (8003d0c <HAL_GPIO_Init+0x300>)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c78:	4b24      	ldr	r3, [pc, #144]	@ (8003d0c <HAL_GPIO_Init+0x300>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003d0c <HAL_GPIO_Init+0x300>)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d0c <HAL_GPIO_Init+0x300>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cc6:	4a11      	ldr	r2, [pc, #68]	@ (8003d0c <HAL_GPIO_Init+0x300>)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f47f ae9d 	bne.w	8003a1c <HAL_GPIO_Init+0x10>
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	48000400 	.word	0x48000400
 8003cfc:	48000800 	.word	0x48000800
 8003d00:	48000c00 	.word	0x48000c00
 8003d04:	48001000 	.word	0x48001000
 8003d08:	48001400 	.word	0x48001400
 8003d0c:	40010400 	.word	0x40010400

08003d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	887b      	ldrh	r3, [r7, #2]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e001      	b.n	8003d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d50:	787b      	ldrb	r3, [r7, #1]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d5c:	e002      	b.n	8003d64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d5e:	887a      	ldrh	r2, [r7, #2]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e08d      	b.n	8003e9e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fa98 	bl	80032cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	@ 0x24
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0201 	bic.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003dc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d107      	bne.n	8003dea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	e006      	b.n	8003df8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003df6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d108      	bne.n	8003e12 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	e007      	b.n	8003e22 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69d9      	ldr	r1, [r3, #28]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1a      	ldr	r2, [r3, #32]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	817b      	strh	r3, [r7, #10]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	f040 80fd 	bne.w	80040c4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_I2C_Master_Transmit+0x30>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e0f6      	b.n	80040c6 <HAL_I2C_Master_Transmit+0x21e>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ee0:	f7ff fc82 	bl	80037e8 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	2319      	movs	r3, #25
 8003eec:	2201      	movs	r2, #1
 8003eee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fa0a 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e0e1      	b.n	80040c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2221      	movs	r2, #33	@ 0x21
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	893a      	ldrh	r2, [r7, #8]
 8003f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2bff      	cmp	r3, #255	@ 0xff
 8003f32:	d906      	bls.n	8003f42 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	22ff      	movs	r2, #255	@ 0xff
 8003f38:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003f3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e007      	b.n	8003f52 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003f4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f50:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d024      	beq.n	8003fa4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	3301      	adds	r3, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	8979      	ldrh	r1, [r7, #10]
 8003f96:	4b4e      	ldr	r3, [pc, #312]	@ (80040d0 <HAL_I2C_Master_Transmit+0x228>)
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fc05 	bl	80047ac <I2C_TransferConfig>
 8003fa2:	e066      	b.n	8004072 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	4b48      	ldr	r3, [pc, #288]	@ (80040d0 <HAL_I2C_Master_Transmit+0x228>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fbfa 	bl	80047ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003fb8:	e05b      	b.n	8004072 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	6a39      	ldr	r1, [r7, #32]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f9fd 	bl	80043be <I2C_WaitOnTXISFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e07b      	b.n	80040c6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d034      	beq.n	8004072 <HAL_I2C_Master_Transmit+0x1ca>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400c:	2b00      	cmp	r3, #0
 800400e:	d130      	bne.n	8004072 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	2200      	movs	r2, #0
 8004018:	2180      	movs	r1, #128	@ 0x80
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f976 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e04d      	b.n	80040c6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	2bff      	cmp	r3, #255	@ 0xff
 8004032:	d90e      	bls.n	8004052 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	22ff      	movs	r2, #255	@ 0xff
 8004038:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	b2da      	uxtb	r2, r3
 8004040:	8979      	ldrh	r1, [r7, #10]
 8004042:	2300      	movs	r3, #0
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fbae 	bl	80047ac <I2C_TransferConfig>
 8004050:	e00f      	b.n	8004072 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004060:	b2da      	uxtb	r2, r3
 8004062:	8979      	ldrh	r1, [r7, #10]
 8004064:	2300      	movs	r3, #0
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fb9d 	bl	80047ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d19e      	bne.n	8003fba <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	6a39      	ldr	r1, [r7, #32]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f9e3 	bl	800444c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e01a      	b.n	80040c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2220      	movs	r2, #32
 8004096:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6859      	ldr	r1, [r3, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <HAL_I2C_Master_Transmit+0x22c>)
 80040a4:	400b      	ands	r3, r1
 80040a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
  }
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	80002000 	.word	0x80002000
 80040d4:	fe00e800 	.word	0xfe00e800

080040d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	461a      	mov	r2, r3
 80040e4:	460b      	mov	r3, r1
 80040e6:	817b      	strh	r3, [r7, #10]
 80040e8:	4613      	mov	r3, r2
 80040ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	f040 80db 	bne.w	80042b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_I2C_Master_Receive+0x30>
 8004104:	2302      	movs	r3, #2
 8004106:	e0d4      	b.n	80042b2 <HAL_I2C_Master_Receive+0x1da>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004110:	f7ff fb6a 	bl	80037e8 <HAL_GetTick>
 8004114:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	2319      	movs	r3, #25
 800411c:	2201      	movs	r2, #1
 800411e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f8f2 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0bf      	b.n	80042b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2222      	movs	r2, #34	@ 0x22
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2210      	movs	r2, #16
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	893a      	ldrh	r2, [r7, #8]
 8004152:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2bff      	cmp	r3, #255	@ 0xff
 8004162:	d90e      	bls.n	8004182 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	22ff      	movs	r2, #255	@ 0xff
 8004168:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416e:	b2da      	uxtb	r2, r3
 8004170:	8979      	ldrh	r1, [r7, #10]
 8004172:	4b52      	ldr	r3, [pc, #328]	@ (80042bc <HAL_I2C_Master_Receive+0x1e4>)
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fb16 	bl	80047ac <I2C_TransferConfig>
 8004180:	e06d      	b.n	800425e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004190:	b2da      	uxtb	r2, r3
 8004192:	8979      	ldrh	r1, [r7, #10]
 8004194:	4b49      	ldr	r3, [pc, #292]	@ (80042bc <HAL_I2C_Master_Receive+0x1e4>)
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fb05 	bl	80047ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80041a2:	e05c      	b.n	800425e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	6a39      	ldr	r1, [r7, #32]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f993 	bl	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e07c      	b.n	80042b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d034      	beq.n	800425e <HAL_I2C_Master_Receive+0x186>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d130      	bne.n	800425e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	2200      	movs	r2, #0
 8004204:	2180      	movs	r1, #128	@ 0x80
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f880 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e04d      	b.n	80042b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	2bff      	cmp	r3, #255	@ 0xff
 800421e:	d90e      	bls.n	800423e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	22ff      	movs	r2, #255	@ 0xff
 8004224:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422a:	b2da      	uxtb	r2, r3
 800422c:	8979      	ldrh	r1, [r7, #10]
 800422e:	2300      	movs	r3, #0
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fab8 	bl	80047ac <I2C_TransferConfig>
 800423c:	e00f      	b.n	800425e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424c:	b2da      	uxtb	r2, r3
 800424e:	8979      	ldrh	r1, [r7, #10]
 8004250:	2300      	movs	r3, #0
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 faa7 	bl	80047ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d19d      	bne.n	80041a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	6a39      	ldr	r1, [r7, #32]
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f8ed 	bl	800444c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e01a      	b.n	80042b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2220      	movs	r2, #32
 8004282:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <HAL_I2C_Master_Receive+0x1e8>)
 8004290:	400b      	ands	r3, r1
 8004292:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e000      	b.n	80042b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80042b0:	2302      	movs	r3, #2
  }
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	80002400 	.word	0x80002400
 80042c0:	fe00e800 	.word	0xfe00e800

080042c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d103      	bne.n	80042e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d007      	beq.n	8004300 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	619a      	str	r2, [r3, #24]
  }
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800431c:	e03b      	b.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f962 	bl	80045ec <I2C_IsErrorOccurred>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e041      	b.n	80043b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d02d      	beq.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433a:	f7ff fa55 	bl	80037e8 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d302      	bcc.n	8004350 <I2C_WaitOnFlagUntilTimeout+0x44>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d122      	bne.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4013      	ands	r3, r2
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	429a      	cmp	r2, r3
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	429a      	cmp	r2, r3
 800436c:	d113      	bne.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e00f      	b.n	80043b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d0b4      	beq.n	800431e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043ca:	e033      	b.n	8004434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f90b 	bl	80045ec <I2C_IsErrorOccurred>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e031      	b.n	8004444 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d025      	beq.n	8004434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e8:	f7ff f9fe 	bl	80037e8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11a      	bne.n	8004434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b02      	cmp	r3, #2
 800440a:	d013      	beq.n	8004434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e007      	b.n	8004444 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d1c4      	bne.n	80043cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004458:	e02f      	b.n	80044ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f8c4 	bl	80045ec <I2C_IsErrorOccurred>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e02d      	b.n	80044ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446e:	f7ff f9bb 	bl	80037e8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	d302      	bcc.n	8004484 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11a      	bne.n	80044ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b20      	cmp	r3, #32
 8004490:	d013      	beq.n	80044ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e007      	b.n	80044ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d1c8      	bne.n	800445a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80044e4:	e071      	b.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f87e 	bl	80045ec <I2C_IsErrorOccurred>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b20      	cmp	r3, #32
 8004506:	d13b      	bne.n	8004580 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d138      	bne.n	8004580 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b04      	cmp	r3, #4
 800451a:	d105      	bne.n	8004528 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b10      	cmp	r3, #16
 8004534:	d121      	bne.n	800457a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2210      	movs	r2, #16
 800453c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2204      	movs	r2, #4
 8004542:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2220      	movs	r2, #32
 800454a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4b24      	ldr	r3, [pc, #144]	@ (80045e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004558:	400b      	ands	r3, r1
 800455a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	75fb      	strb	r3, [r7, #23]
 8004578:	e002      	b.n	8004580 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004580:	f7ff f932 	bl	80037e8 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d119      	bne.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d116      	bne.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d00f      	beq.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d002      	beq.n	80045de <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d083      	beq.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80045de:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	fe00e800 	.word	0xfe00e800

080045ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	@ 0x28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	d068      	beq.n	80046ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2210      	movs	r2, #16
 800461e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004620:	e049      	b.n	80046b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d045      	beq.n	80046b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7ff f8dd 	bl	80037e8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <I2C_IsErrorOccurred+0x54>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d13a      	bne.n	80046b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800464a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004652:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800465e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004662:	d121      	bne.n	80046a8 <I2C_IsErrorOccurred+0xbc>
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800466a:	d01d      	beq.n	80046a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	2b20      	cmp	r3, #32
 8004670:	d01a      	beq.n	80046a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004680:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004682:	f7ff f8b1 	bl	80037e8 <HAL_GetTick>
 8004686:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004688:	e00e      	b.n	80046a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800468a:	f7ff f8ad 	bl	80037e8 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b19      	cmp	r3, #25
 8004696:	d907      	bls.n	80046a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	f043 0320 	orr.w	r3, r3, #32
 800469e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80046a6:	e006      	b.n	80046b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d1e9      	bne.n	800468a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d003      	beq.n	80046cc <I2C_IsErrorOccurred+0xe0>
 80046c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0aa      	beq.n	8004622 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d103      	bne.n	80046dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2220      	movs	r2, #32
 80046da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	f043 0304 	orr.w	r3, r3, #4
 80046e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00b      	beq.n	8004714 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800470c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	f043 0308 	orr.w	r3, r3, #8
 8004724:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800472e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00b      	beq.n	8004758 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	f043 0302 	orr.w	r3, r3, #2
 8004746:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004750:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01c      	beq.n	800479a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7ff fdaf 	bl	80042c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6859      	ldr	r1, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b0d      	ldr	r3, [pc, #52]	@ (80047a8 <I2C_IsErrorOccurred+0x1bc>)
 8004772:	400b      	ands	r3, r1
 8004774:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	431a      	orrs	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800479a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3728      	adds	r7, #40	@ 0x28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	fe00e800 	.word	0xfe00e800

080047ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	460b      	mov	r3, r1
 80047b8:	817b      	strh	r3, [r7, #10]
 80047ba:	4613      	mov	r3, r2
 80047bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047be:	897b      	ldrh	r3, [r7, #10]
 80047c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047c4:	7a7b      	ldrb	r3, [r7, #9]
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	0d5b      	lsrs	r3, r3, #21
 80047e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80047ea:	4b08      	ldr	r3, [pc, #32]	@ (800480c <I2C_TransferConfig+0x60>)
 80047ec:	430b      	orrs	r3, r1
 80047ee:	43db      	mvns	r3, r3
 80047f0:	ea02 0103 	and.w	r1, r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	03ff63ff 	.word	0x03ff63ff

08004810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b20      	cmp	r3, #32
 8004824:	d138      	bne.n	8004898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004830:	2302      	movs	r3, #2
 8004832:	e032      	b.n	800489a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	@ 0x24
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6819      	ldr	r1, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	e000      	b.n	800489a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004898:	2302      	movs	r3, #2
  }
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d139      	bne.n	8004930 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e033      	b.n	8004932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2224      	movs	r2, #36	@ 0x24
 80048d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d141      	bne.n	80049d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800494e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495a:	d131      	bne.n	80049c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800495c:	4b47      	ldr	r3, [pc, #284]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004962:	4a46      	ldr	r2, [pc, #280]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800496c:	4b43      	ldr	r3, [pc, #268]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004974:	4a41      	ldr	r2, [pc, #260]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800497a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800497c:	4b40      	ldr	r3, [pc, #256]	@ (8004a80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2232      	movs	r2, #50	@ 0x32
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	4a3f      	ldr	r2, [pc, #252]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	0c9b      	lsrs	r3, r3, #18
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004992:	e002      	b.n	800499a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3b01      	subs	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800499a:	4b38      	ldr	r3, [pc, #224]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a6:	d102      	bne.n	80049ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f2      	bne.n	8004994 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049ae:	4b33      	ldr	r3, [pc, #204]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ba:	d158      	bne.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e057      	b.n	8004a70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049c0:	4b2e      	ldr	r3, [pc, #184]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049c6:	4a2d      	ldr	r2, [pc, #180]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049d0:	e04d      	b.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d8:	d141      	bne.n	8004a5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049da:	4b28      	ldr	r3, [pc, #160]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e6:	d131      	bne.n	8004a4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049e8:	4b24      	ldr	r3, [pc, #144]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ee:	4a23      	ldr	r2, [pc, #140]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049f8:	4b20      	ldr	r3, [pc, #128]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a00:	4a1e      	ldr	r2, [pc, #120]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a08:	4b1d      	ldr	r3, [pc, #116]	@ (8004a80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2232      	movs	r2, #50	@ 0x32
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	4a1c      	ldr	r2, [pc, #112]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	0c9b      	lsrs	r3, r3, #18
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a1e:	e002      	b.n	8004a26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a26:	4b15      	ldr	r3, [pc, #84]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a32:	d102      	bne.n	8004a3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f2      	bne.n	8004a20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a3a:	4b10      	ldr	r3, [pc, #64]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a46:	d112      	bne.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e011      	b.n	8004a70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a52:	4a0a      	ldr	r2, [pc, #40]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a5c:	e007      	b.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a5e:	4b07      	ldr	r3, [pc, #28]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a66:	4a05      	ldr	r2, [pc, #20]	@ (8004a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	40007000 	.word	0x40007000
 8004a80:	20000020 	.word	0x20000020
 8004a84:	431bde83 	.word	0x431bde83

08004a88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a8c:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a04      	ldr	r2, [pc, #16]	@ (8004aa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a96:	6093      	str	r3, [r2, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40007000 	.word	0x40007000

08004aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e2fe      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d075      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac6:	4b97      	ldr	r3, [pc, #604]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad0:	4b94      	ldr	r3, [pc, #592]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	d102      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x3e>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d002      	beq.n	8004aec <HAL_RCC_OscConfig+0x44>
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d10b      	bne.n	8004b04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aec:	4b8d      	ldr	r3, [pc, #564]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d05b      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x108>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d157      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e2d9      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0c:	d106      	bne.n	8004b1c <HAL_RCC_OscConfig+0x74>
 8004b0e:	4b85      	ldr	r3, [pc, #532]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a84      	ldr	r2, [pc, #528]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e01d      	b.n	8004b58 <HAL_RCC_OscConfig+0xb0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCC_OscConfig+0x98>
 8004b26:	4b7f      	ldr	r3, [pc, #508]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	4b7c      	ldr	r3, [pc, #496]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a7b      	ldr	r2, [pc, #492]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e00b      	b.n	8004b58 <HAL_RCC_OscConfig+0xb0>
 8004b40:	4b78      	ldr	r3, [pc, #480]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a77      	ldr	r2, [pc, #476]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	4b75      	ldr	r3, [pc, #468]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a74      	ldr	r2, [pc, #464]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d013      	beq.n	8004b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fe fe42 	bl	80037e8 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b68:	f7fe fe3e 	bl	80037e8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	@ 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e29e      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0xc0>
 8004b86:	e014      	b.n	8004bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fe fe2e 	bl	80037e8 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b90:	f7fe fe2a 	bl	80037e8 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	@ 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e28a      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ba2:	4b60      	ldr	r3, [pc, #384]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0xe8>
 8004bae:	e000      	b.n	8004bb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d075      	beq.n	8004caa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bbe:	4b59      	ldr	r3, [pc, #356]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bc8:	4b56      	ldr	r3, [pc, #344]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d102      	bne.n	8004bde <HAL_RCC_OscConfig+0x136>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCC_OscConfig+0x13c>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d11f      	bne.n	8004c24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be4:	4b4f      	ldr	r3, [pc, #316]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_OscConfig+0x154>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e25d      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfc:	4b49      	ldr	r3, [pc, #292]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	4946      	ldr	r1, [pc, #280]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c10:	4b45      	ldr	r3, [pc, #276]	@ (8004d28 <HAL_RCC_OscConfig+0x280>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe fd9b 	bl	8003750 <HAL_InitTick>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d043      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e249      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d023      	beq.n	8004c74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a3c      	ldr	r2, [pc, #240]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fe fdd6 	bl	80037e8 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c40:	f7fe fdd2 	bl	80037e8 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e232      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c52:	4b34      	ldr	r3, [pc, #208]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5e:	4b31      	ldr	r3, [pc, #196]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	492d      	ldr	r1, [pc, #180]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	604b      	str	r3, [r1, #4]
 8004c72:	e01a      	b.n	8004caa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c74:	4b2b      	ldr	r3, [pc, #172]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a2a      	ldr	r2, [pc, #168]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004c7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fe fdb2 	bl	80037e8 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c88:	f7fe fdae 	bl	80037e8 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e20e      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c9a:	4b22      	ldr	r3, [pc, #136]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x1e0>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d041      	beq.n	8004d3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01c      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cbe:	4b19      	ldr	r3, [pc, #100]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cc4:	4a17      	ldr	r2, [pc, #92]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fe fd8b 	bl	80037e8 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fe fd87 	bl	80037e8 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e1e7      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0ef      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x22e>
 8004cf6:	e020      	b.n	8004d3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cfe:	4a09      	ldr	r2, [pc, #36]	@ (8004d24 <HAL_RCC_OscConfig+0x27c>)
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d08:	f7fe fd6e 	bl	80037e8 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d0e:	e00d      	b.n	8004d2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d10:	f7fe fd6a 	bl	80037e8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d906      	bls.n	8004d2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e1ca      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
 8004d28:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d2c:	4b8c      	ldr	r3, [pc, #560]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ea      	bne.n	8004d10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 80a6 	beq.w	8004e94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d4c:	4b84      	ldr	r3, [pc, #528]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_RCC_OscConfig+0x2b4>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x2b6>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d62:	4b7f      	ldr	r3, [pc, #508]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d66:	4a7e      	ldr	r2, [pc, #504]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d7e:	4b79      	ldr	r3, [pc, #484]	@ (8004f64 <HAL_RCC_OscConfig+0x4bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d118      	bne.n	8004dbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d8a:	4b76      	ldr	r3, [pc, #472]	@ (8004f64 <HAL_RCC_OscConfig+0x4bc>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a75      	ldr	r2, [pc, #468]	@ (8004f64 <HAL_RCC_OscConfig+0x4bc>)
 8004d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d96:	f7fe fd27 	bl	80037e8 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9e:	f7fe fd23 	bl	80037e8 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e183      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db0:	4b6c      	ldr	r3, [pc, #432]	@ (8004f64 <HAL_RCC_OscConfig+0x4bc>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d108      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x32e>
 8004dc4:	4b66      	ldr	r3, [pc, #408]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dca:	4a65      	ldr	r2, [pc, #404]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dd4:	e024      	b.n	8004e20 <HAL_RCC_OscConfig+0x378>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b05      	cmp	r3, #5
 8004ddc:	d110      	bne.n	8004e00 <HAL_RCC_OscConfig+0x358>
 8004dde:	4b60      	ldr	r3, [pc, #384]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004de6:	f043 0304 	orr.w	r3, r3, #4
 8004dea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dee:	4b5c      	ldr	r3, [pc, #368]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df4:	4a5a      	ldr	r2, [pc, #360]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dfe:	e00f      	b.n	8004e20 <HAL_RCC_OscConfig+0x378>
 8004e00:	4b57      	ldr	r3, [pc, #348]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e06:	4a56      	ldr	r2, [pc, #344]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e10:	4b53      	ldr	r3, [pc, #332]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e16:	4a52      	ldr	r2, [pc, #328]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d016      	beq.n	8004e56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fe fcde 	bl	80037e8 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e30:	f7fe fcda 	bl	80037e8 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e138      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e46:	4b46      	ldr	r3, [pc, #280]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ed      	beq.n	8004e30 <HAL_RCC_OscConfig+0x388>
 8004e54:	e015      	b.n	8004e82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e56:	f7fe fcc7 	bl	80037e8 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5e:	f7fe fcc3 	bl	80037e8 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e121      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e74:	4b3a      	ldr	r3, [pc, #232]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ed      	bne.n	8004e5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e82:	7ffb      	ldrb	r3, [r7, #31]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b35      	ldr	r3, [pc, #212]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8c:	4a34      	ldr	r2, [pc, #208]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d03c      	beq.n	8004f1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01c      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eae:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fe fc96 	bl	80037e8 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ec0:	f7fe fc92 	bl	80037e8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0f2      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ed2:	4b23      	ldr	r3, [pc, #140]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ef      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x418>
 8004ee0:	e01b      	b.n	8004f1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004eea:	f023 0301 	bic.w	r3, r3, #1
 8004eee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef2:	f7fe fc79 	bl	80037e8 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004efa:	f7fe fc75 	bl	80037e8 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e0d5      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f0c:	4b14      	ldr	r3, [pc, #80]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ef      	bne.n	8004efa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 80c9 	beq.w	80050b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f24:	4b0e      	ldr	r3, [pc, #56]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	f000 8083 	beq.w	8005038 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d15e      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3a:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a08      	ldr	r2, [pc, #32]	@ (8004f60 <HAL_RCC_OscConfig+0x4b8>)
 8004f40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f46:	f7fe fc4f 	bl	80037e8 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f4c:	e00c      	b.n	8004f68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fe fc4b 	bl	80037e8 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d905      	bls.n	8004f68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e0ab      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f68:	4b55      	ldr	r3, [pc, #340]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ec      	bne.n	8004f4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f74:	4b52      	ldr	r3, [pc, #328]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	4b52      	ldr	r3, [pc, #328]	@ (80050c4 <HAL_RCC_OscConfig+0x61c>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6a11      	ldr	r1, [r2, #32]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f84:	3a01      	subs	r2, #1
 8004f86:	0112      	lsls	r2, r2, #4
 8004f88:	4311      	orrs	r1, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f8e:	0212      	lsls	r2, r2, #8
 8004f90:	4311      	orrs	r1, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f96:	0852      	lsrs	r2, r2, #1
 8004f98:	3a01      	subs	r2, #1
 8004f9a:	0552      	lsls	r2, r2, #21
 8004f9c:	4311      	orrs	r1, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fa2:	0852      	lsrs	r2, r2, #1
 8004fa4:	3a01      	subs	r2, #1
 8004fa6:	0652      	lsls	r2, r2, #25
 8004fa8:	4311      	orrs	r1, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fae:	06d2      	lsls	r2, r2, #27
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	4943      	ldr	r1, [pc, #268]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb8:	4b41      	ldr	r3, [pc, #260]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a40      	ldr	r2, [pc, #256]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4a3d      	ldr	r2, [pc, #244]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fe fc0a 	bl	80037e8 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fe fc06 	bl	80037e8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e066      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fea:	4b35      	ldr	r3, [pc, #212]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x530>
 8004ff6:	e05e      	b.n	80050b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff8:	4b31      	ldr	r3, [pc, #196]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a30      	ldr	r2, [pc, #192]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fe fbf0 	bl	80037e8 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500c:	f7fe fbec 	bl	80037e8 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e04c      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800501e:	4b28      	ldr	r3, [pc, #160]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800502a:	4b25      	ldr	r3, [pc, #148]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	4924      	ldr	r1, [pc, #144]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8005030:	4b25      	ldr	r3, [pc, #148]	@ (80050c8 <HAL_RCC_OscConfig+0x620>)
 8005032:	4013      	ands	r3, r2
 8005034:	60cb      	str	r3, [r1, #12]
 8005036:	e03e      	b.n	80050b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e039      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005044:	4b1e      	ldr	r3, [pc, #120]	@ (80050c0 <HAL_RCC_OscConfig+0x618>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f003 0203 	and.w	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	429a      	cmp	r2, r3
 8005056:	d12c      	bne.n	80050b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	3b01      	subs	r3, #1
 8005064:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d123      	bne.n	80050b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d11b      	bne.n	80050b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d113      	bne.n	80050b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	3b01      	subs	r3, #1
 8005098:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800509a:	429a      	cmp	r2, r3
 800509c:	d109      	bne.n	80050b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	3b01      	subs	r3, #1
 80050ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d001      	beq.n	80050b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40021000 	.word	0x40021000
 80050c4:	019f800c 	.word	0x019f800c
 80050c8:	feeefffc 	.word	0xfeeefffc

080050cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e11e      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050e4:	4b91      	ldr	r3, [pc, #580]	@ (800532c <HAL_RCC_ClockConfig+0x260>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d910      	bls.n	8005114 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b8e      	ldr	r3, [pc, #568]	@ (800532c <HAL_RCC_ClockConfig+0x260>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 020f 	bic.w	r2, r3, #15
 80050fa:	498c      	ldr	r1, [pc, #560]	@ (800532c <HAL_RCC_ClockConfig+0x260>)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b8a      	ldr	r3, [pc, #552]	@ (800532c <HAL_RCC_ClockConfig+0x260>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e106      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d073      	beq.n	8005208 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d129      	bne.n	800517c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005128:	4b81      	ldr	r3, [pc, #516]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0f4      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005138:	f000 f99e 	bl	8005478 <RCC_GetSysClockFreqFromPLLSource>
 800513c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4a7c      	ldr	r2, [pc, #496]	@ (8005334 <HAL_RCC_ClockConfig+0x268>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d93f      	bls.n	80051c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005146:	4b7a      	ldr	r3, [pc, #488]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800515a:	2b00      	cmp	r3, #0
 800515c:	d033      	beq.n	80051c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005162:	2b00      	cmp	r3, #0
 8005164:	d12f      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005166:	4b72      	ldr	r3, [pc, #456]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800516e:	4a70      	ldr	r2, [pc, #448]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005174:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005176:	2380      	movs	r3, #128	@ 0x80
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e024      	b.n	80051c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d107      	bne.n	8005194 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005184:	4b6a      	ldr	r3, [pc, #424]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0c6      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005194:	4b66      	ldr	r3, [pc, #408]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0be      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051a4:	f000 f8ce 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4a61      	ldr	r2, [pc, #388]	@ (8005334 <HAL_RCC_ClockConfig+0x268>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d909      	bls.n	80051c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051b2:	4b5f      	ldr	r3, [pc, #380]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051ba:	4a5d      	ldr	r2, [pc, #372]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 80051bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051c2:	2380      	movs	r3, #128	@ 0x80
 80051c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051c6:	4b5a      	ldr	r3, [pc, #360]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f023 0203 	bic.w	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4957      	ldr	r1, [pc, #348]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d8:	f7fe fb06 	bl	80037e8 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e0:	f7fe fb02 	bl	80037e8 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e095      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f6:	4b4e      	ldr	r3, [pc, #312]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 020c 	and.w	r2, r3, #12
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	429a      	cmp	r2, r3
 8005206:	d1eb      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d023      	beq.n	800525c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005220:	4b43      	ldr	r3, [pc, #268]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4a42      	ldr	r2, [pc, #264]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005226:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800522a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005238:	4b3d      	ldr	r3, [pc, #244]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005240:	4a3b      	ldr	r2, [pc, #236]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005242:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005246:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005248:	4b39      	ldr	r3, [pc, #228]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	4936      	ldr	r1, [pc, #216]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
 800525a:	e008      	b.n	800526e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2b80      	cmp	r3, #128	@ 0x80
 8005260:	d105      	bne.n	800526e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005262:	4b33      	ldr	r3, [pc, #204]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	4a32      	ldr	r2, [pc, #200]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005268:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800526c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800526e:	4b2f      	ldr	r3, [pc, #188]	@ (800532c <HAL_RCC_ClockConfig+0x260>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d21d      	bcs.n	80052b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527c:	4b2b      	ldr	r3, [pc, #172]	@ (800532c <HAL_RCC_ClockConfig+0x260>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 020f 	bic.w	r2, r3, #15
 8005284:	4929      	ldr	r1, [pc, #164]	@ (800532c <HAL_RCC_ClockConfig+0x260>)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800528c:	f7fe faac 	bl	80037e8 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005292:	e00a      	b.n	80052aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005294:	f7fe faa8 	bl	80037e8 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e03b      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052aa:	4b20      	ldr	r3, [pc, #128]	@ (800532c <HAL_RCC_ClockConfig+0x260>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d1ed      	bne.n	8005294 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4917      	ldr	r1, [pc, #92]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052e2:	4b13      	ldr	r3, [pc, #76]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	490f      	ldr	r1, [pc, #60]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052f6:	f000 f825 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 80052fa:	4602      	mov	r2, r0
 80052fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <HAL_RCC_ClockConfig+0x264>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	490c      	ldr	r1, [pc, #48]	@ (8005338 <HAL_RCC_ClockConfig+0x26c>)
 8005308:	5ccb      	ldrb	r3, [r1, r3]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	fa22 f303 	lsr.w	r3, r2, r3
 8005312:	4a0a      	ldr	r2, [pc, #40]	@ (800533c <HAL_RCC_ClockConfig+0x270>)
 8005314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005316:	4b0a      	ldr	r3, [pc, #40]	@ (8005340 <HAL_RCC_ClockConfig+0x274>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe fa18 	bl	8003750 <HAL_InitTick>
 8005320:	4603      	mov	r3, r0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40022000 	.word	0x40022000
 8005330:	40021000 	.word	0x40021000
 8005334:	04c4b400 	.word	0x04c4b400
 8005338:	0800d944 	.word	0x0800d944
 800533c:	20000020 	.word	0x20000020
 8005340:	20000024 	.word	0x20000024

08005344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800534a:	4b2c      	ldr	r3, [pc, #176]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
 8005352:	2b04      	cmp	r3, #4
 8005354:	d102      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005356:	4b2a      	ldr	r3, [pc, #168]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e047      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800535c:	4b27      	ldr	r3, [pc, #156]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b08      	cmp	r3, #8
 8005366:	d102      	bne.n	800536e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005368:	4b26      	ldr	r3, [pc, #152]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xc0>)
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	e03e      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800536e:	4b23      	ldr	r3, [pc, #140]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b0c      	cmp	r3, #12
 8005378:	d136      	bne.n	80053e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800537a:	4b20      	ldr	r3, [pc, #128]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005384:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	3301      	adds	r3, #1
 8005390:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d10c      	bne.n	80053b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005398:	4a1a      	ldr	r2, [pc, #104]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xc0>)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a0:	4a16      	ldr	r2, [pc, #88]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a2:	68d2      	ldr	r2, [r2, #12]
 80053a4:	0a12      	lsrs	r2, r2, #8
 80053a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	617b      	str	r3, [r7, #20]
      break;
 80053b0:	e00c      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053b2:	4a13      	ldr	r2, [pc, #76]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	4a10      	ldr	r2, [pc, #64]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80053bc:	68d2      	ldr	r2, [r2, #12]
 80053be:	0a12      	lsrs	r2, r2, #8
 80053c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]
      break;
 80053ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053cc:	4b0b      	ldr	r3, [pc, #44]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	0e5b      	lsrs	r3, r3, #25
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	3301      	adds	r3, #1
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	e001      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053ec:	693b      	ldr	r3, [r7, #16]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
 8005400:	00f42400 	.word	0x00f42400
 8005404:	016e3600 	.word	0x016e3600

08005408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800540c:	4b03      	ldr	r3, [pc, #12]	@ (800541c <HAL_RCC_GetHCLKFreq+0x14>)
 800540e:	681b      	ldr	r3, [r3, #0]
}
 8005410:	4618      	mov	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000020 	.word	0x20000020

08005420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005424:	f7ff fff0 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	4904      	ldr	r1, [pc, #16]	@ (8005448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	0800d954 	.word	0x0800d954

0800544c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005450:	f7ff ffda 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0adb      	lsrs	r3, r3, #11
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4904      	ldr	r1, [pc, #16]	@ (8005474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	0800d954 	.word	0x0800d954

08005478 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800547e:	4b1e      	ldr	r3, [pc, #120]	@ (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d10c      	bne.n	80054b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800549c:	4a17      	ldr	r2, [pc, #92]	@ (80054fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a4:	4a14      	ldr	r2, [pc, #80]	@ (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054a6:	68d2      	ldr	r2, [r2, #12]
 80054a8:	0a12      	lsrs	r2, r2, #8
 80054aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	617b      	str	r3, [r7, #20]
    break;
 80054b4:	e00c      	b.n	80054d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054b6:	4a12      	ldr	r2, [pc, #72]	@ (8005500 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	4a0e      	ldr	r2, [pc, #56]	@ (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054c0:	68d2      	ldr	r2, [r2, #12]
 80054c2:	0a12      	lsrs	r2, r2, #8
 80054c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054c8:	fb02 f303 	mul.w	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]
    break;
 80054ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054d0:	4b09      	ldr	r3, [pc, #36]	@ (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	0e5b      	lsrs	r3, r3, #25
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	3301      	adds	r3, #1
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80054ea:	687b      	ldr	r3, [r7, #4]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	40021000 	.word	0x40021000
 80054fc:	016e3600 	.word	0x016e3600
 8005500:	00f42400 	.word	0x00f42400

08005504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800550c:	2300      	movs	r3, #0
 800550e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005510:	2300      	movs	r3, #0
 8005512:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8098 	beq.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005522:	2300      	movs	r3, #0
 8005524:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005526:	4b43      	ldr	r3, [pc, #268]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10d      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005532:	4b40      	ldr	r3, [pc, #256]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005536:	4a3f      	ldr	r2, [pc, #252]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800553c:	6593      	str	r3, [r2, #88]	@ 0x58
 800553e:	4b3d      	ldr	r3, [pc, #244]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005546:	60bb      	str	r3, [r7, #8]
 8005548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554a:	2301      	movs	r3, #1
 800554c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800554e:	4b3a      	ldr	r3, [pc, #232]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a39      	ldr	r2, [pc, #228]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800555a:	f7fe f945 	bl	80037e8 <HAL_GetTick>
 800555e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005560:	e009      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005562:	f7fe f941 	bl	80037e8 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d902      	bls.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	74fb      	strb	r3, [r7, #19]
        break;
 8005574:	e005      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005576:	4b30      	ldr	r3, [pc, #192]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ef      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005582:	7cfb      	ldrb	r3, [r7, #19]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d159      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005588:	4b2a      	ldr	r3, [pc, #168]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005592:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01e      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d019      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055a4:	4b23      	ldr	r3, [pc, #140]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055b0:	4b20      	ldr	r3, [pc, #128]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055d0:	4a18      	ldr	r2, [pc, #96]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d016      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fe f901 	bl	80037e8 <HAL_GetTick>
 80055e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e8:	e00b      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fe f8fd 	bl	80037e8 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d902      	bls.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005600:	e006      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005602:	4b0c      	ldr	r3, [pc, #48]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0ec      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005616:	4b07      	ldr	r3, [pc, #28]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005624:	4903      	ldr	r1, [pc, #12]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800562c:	e008      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800562e:	7cfb      	ldrb	r3, [r7, #19]
 8005630:	74bb      	strb	r3, [r7, #18]
 8005632:	e005      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005634:	40021000 	.word	0x40021000
 8005638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005640:	7c7b      	ldrb	r3, [r7, #17]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005646:	4ba7      	ldr	r3, [pc, #668]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564a:	4aa6      	ldr	r2, [pc, #664]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800564c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005650:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800565e:	4ba1      	ldr	r3, [pc, #644]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005664:	f023 0203 	bic.w	r2, r3, #3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	499d      	ldr	r1, [pc, #628]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005680:	4b98      	ldr	r3, [pc, #608]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	f023 020c 	bic.w	r2, r3, #12
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	4995      	ldr	r1, [pc, #596]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056a2:	4b90      	ldr	r3, [pc, #576]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	498c      	ldr	r1, [pc, #560]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056c4:	4b87      	ldr	r3, [pc, #540]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	4984      	ldr	r1, [pc, #528]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056e6:	4b7f      	ldr	r3, [pc, #508]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	497b      	ldr	r1, [pc, #492]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005708:	4b76      	ldr	r3, [pc, #472]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	4973      	ldr	r1, [pc, #460]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800572a:	4b6e      	ldr	r3, [pc, #440]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005730:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	496a      	ldr	r1, [pc, #424]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800574c:	4b65      	ldr	r3, [pc, #404]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	4962      	ldr	r1, [pc, #392]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800576e:	4b5d      	ldr	r3, [pc, #372]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005774:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	4959      	ldr	r1, [pc, #356]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005790:	4b54      	ldr	r3, [pc, #336]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005792:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005796:	f023 0203 	bic.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579e:	4951      	ldr	r1, [pc, #324]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057b2:	4b4c      	ldr	r3, [pc, #304]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	4948      	ldr	r1, [pc, #288]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d015      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057d4:	4b43      	ldr	r3, [pc, #268]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e2:	4940      	ldr	r1, [pc, #256]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057f2:	d105      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f4:	4b3b      	ldr	r3, [pc, #236]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4a3a      	ldr	r2, [pc, #232]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057fe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005808:	2b00      	cmp	r3, #0
 800580a:	d015      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800580c:	4b35      	ldr	r3, [pc, #212]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005812:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800581a:	4932      	ldr	r1, [pc, #200]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005826:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800582a:	d105      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800582c:	4b2d      	ldr	r3, [pc, #180]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a2c      	ldr	r2, [pc, #176]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005836:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d015      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005844:	4b27      	ldr	r3, [pc, #156]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	4924      	ldr	r1, [pc, #144]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005862:	d105      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005864:	4b1f      	ldr	r3, [pc, #124]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4a1e      	ldr	r2, [pc, #120]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800586e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d015      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800587c:	4b19      	ldr	r3, [pc, #100]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005882:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588a:	4916      	ldr	r1, [pc, #88]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005896:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800589a:	d105      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800589c:	4b11      	ldr	r3, [pc, #68]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	4a10      	ldr	r2, [pc, #64]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d019      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058b4:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	4908      	ldr	r1, [pc, #32]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058d2:	d109      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d4:	4b03      	ldr	r3, [pc, #12]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4a02      	ldr	r2, [pc, #8]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058de:	60d3      	str	r3, [r2, #12]
 80058e0:	e002      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80058e2:	bf00      	nop
 80058e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d015      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058f4:	4b29      	ldr	r3, [pc, #164]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005902:	4926      	ldr	r1, [pc, #152]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005912:	d105      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005914:	4b21      	ldr	r3, [pc, #132]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4a20      	ldr	r2, [pc, #128]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800591a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800591e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d015      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800592c:	4b1b      	ldr	r3, [pc, #108]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005932:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800593a:	4918      	ldr	r1, [pc, #96]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594a:	d105      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800594c:	4b13      	ldr	r3, [pc, #76]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4a12      	ldr	r2, [pc, #72]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005956:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d015      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005964:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005966:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800596a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005972:	490a      	ldr	r1, [pc, #40]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800597e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005982:	d105      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005984:	4b05      	ldr	r3, [pc, #20]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4a04      	ldr	r2, [pc, #16]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800598a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800598e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005990:	7cbb      	ldrb	r3, [r7, #18]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40021000 	.word	0x40021000

080059a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e09d      	b.n	8005aee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d108      	bne.n	80059cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059c2:	d009      	beq.n	80059d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	61da      	str	r2, [r3, #28]
 80059ca:	e005      	b.n	80059d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d106      	bne.n	80059f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fd fcc4 	bl	8003380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a18:	d902      	bls.n	8005a20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e002      	b.n	8005a26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a2e:	d007      	beq.n	8005a40 <HAL_SPI_Init+0xa0>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a38:	d002      	beq.n	8005a40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a82:	ea42 0103 	orr.w	r1, r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	0c1b      	lsrs	r3, r3, #16
 8005a9c:	f003 0204 	and.w	r2, r3, #4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005abc:	ea42 0103 	orr.w	r1, r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005adc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b088      	sub	sp, #32
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b06:	f7fd fe6f 	bl	80037e8 <HAL_GetTick>
 8005b0a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d001      	beq.n	8005b20 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e15c      	b.n	8005dda <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_SPI_Transmit+0x36>
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e154      	b.n	8005dda <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_SPI_Transmit+0x48>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e14d      	b.n	8005dda <HAL_SPI_Transmit+0x2e4>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2203      	movs	r2, #3
 8005b4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	88fa      	ldrh	r2, [r7, #6]
 8005b64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b90:	d10f      	bne.n	8005bb2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbc:	2b40      	cmp	r3, #64	@ 0x40
 8005bbe:	d007      	beq.n	8005bd0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bd8:	d952      	bls.n	8005c80 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_SPI_Transmit+0xf2>
 8005be2:	8b7b      	ldrh	r3, [r7, #26]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d145      	bne.n	8005c74 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bec:	881a      	ldrh	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	1c9a      	adds	r2, r3, #2
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c0c:	e032      	b.n	8005c74 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d112      	bne.n	8005c42 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c20:	881a      	ldrh	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2c:	1c9a      	adds	r2, r3, #2
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c40:	e018      	b.n	8005c74 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c42:	f7fd fdd1 	bl	80037e8 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d803      	bhi.n	8005c5a <HAL_SPI_Transmit+0x164>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d102      	bne.n	8005c60 <HAL_SPI_Transmit+0x16a>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e0b2      	b.n	8005dda <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1c7      	bne.n	8005c0e <HAL_SPI_Transmit+0x118>
 8005c7e:	e083      	b.n	8005d88 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_SPI_Transmit+0x198>
 8005c88:	8b7b      	ldrh	r3, [r7, #26]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d177      	bne.n	8005d7e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d912      	bls.n	8005cbe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9c:	881a      	ldrh	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca8:	1c9a      	adds	r2, r3, #2
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b02      	subs	r3, #2
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cbc:	e05f      	b.n	8005d7e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ce4:	e04b      	b.n	8005d7e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d12b      	bne.n	8005d4c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d912      	bls.n	8005d24 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d02:	881a      	ldrh	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b02      	subs	r3, #2
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d22:	e02c      	b.n	8005d7e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	7812      	ldrb	r2, [r2, #0]
 8005d30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d4a:	e018      	b.n	8005d7e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d4c:	f7fd fd4c 	bl	80037e8 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d803      	bhi.n	8005d64 <HAL_SPI_Transmit+0x26e>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d102      	bne.n	8005d6a <HAL_SPI_Transmit+0x274>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e02d      	b.n	8005dda <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1ae      	bne.n	8005ce6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fb65 	bl	800645c <SPI_EndRxTxTransaction>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b08a      	sub	sp, #40	@ 0x28
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005df0:	2301      	movs	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005df4:	f7fd fcf8 	bl	80037e8 <HAL_GetTick>
 8005df8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e00:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e08:	887b      	ldrh	r3, [r7, #2]
 8005e0a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005e0c:	887b      	ldrh	r3, [r7, #2]
 8005e0e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e10:	7ffb      	ldrb	r3, [r7, #31]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d00c      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x4e>
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e1c:	d106      	bne.n	8005e2c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <HAL_SPI_TransmitReceive+0x4a>
 8005e26:	7ffb      	ldrb	r3, [r7, #31]
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d001      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e1f3      	b.n	8006218 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x60>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x60>
 8005e3c:	887b      	ldrh	r3, [r7, #2]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e1e8      	b.n	8006218 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_SPI_TransmitReceive+0x72>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e1e1      	b.n	8006218 <HAL_SPI_TransmitReceive+0x436>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d003      	beq.n	8005e70 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	887a      	ldrh	r2, [r7, #2]
 8005e80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	887a      	ldrh	r2, [r7, #2]
 8005e88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	887a      	ldrh	r2, [r7, #2]
 8005e96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	887a      	ldrh	r2, [r7, #2]
 8005e9c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005eb2:	d802      	bhi.n	8005eba <HAL_SPI_TransmitReceive+0xd8>
 8005eb4:	8abb      	ldrh	r3, [r7, #20]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d908      	bls.n	8005ecc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	e007      	b.n	8005edc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005eda:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee6:	2b40      	cmp	r3, #64	@ 0x40
 8005ee8:	d007      	beq.n	8005efa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ef8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f02:	f240 8083 	bls.w	800600c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_SPI_TransmitReceive+0x132>
 8005f0e:	8afb      	ldrh	r3, [r7, #22]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d16f      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f24:	1c9a      	adds	r2, r3, #2
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f38:	e05c      	b.n	8005ff4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d11b      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x19e>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d016      	beq.n	8005f80 <HAL_SPI_TransmitReceive+0x19e>
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d113      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5c:	881a      	ldrh	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f68:	1c9a      	adds	r2, r3, #2
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d11c      	bne.n	8005fc8 <HAL_SPI_TransmitReceive+0x1e6>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d016      	beq.n	8005fc8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa4:	b292      	uxth	r2, r2
 8005fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	1c9a      	adds	r2, r3, #2
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fc8:	f7fd fc0e 	bl	80037e8 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d80d      	bhi.n	8005ff4 <HAL_SPI_TransmitReceive+0x212>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d009      	beq.n	8005ff4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e111      	b.n	8006218 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d19d      	bne.n	8005f3a <HAL_SPI_TransmitReceive+0x158>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d197      	bne.n	8005f3a <HAL_SPI_TransmitReceive+0x158>
 800600a:	e0e5      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_SPI_TransmitReceive+0x23a>
 8006014:	8afb      	ldrh	r3, [r7, #22]
 8006016:	2b01      	cmp	r3, #1
 8006018:	f040 80d1 	bne.w	80061be <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b01      	cmp	r3, #1
 8006024:	d912      	bls.n	800604c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602a:	881a      	ldrh	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006036:	1c9a      	adds	r2, r3, #2
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b02      	subs	r3, #2
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800604a:	e0b8      	b.n	80061be <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	330c      	adds	r3, #12
 8006056:	7812      	ldrb	r2, [r2, #0]
 8006058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006072:	e0a4      	b.n	80061be <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b02      	cmp	r3, #2
 8006080:	d134      	bne.n	80060ec <HAL_SPI_TransmitReceive+0x30a>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d02f      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x30a>
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	2b01      	cmp	r3, #1
 8006090:	d12c      	bne.n	80060ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	d912      	bls.n	80060c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a0:	881a      	ldrh	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ac:	1c9a      	adds	r2, r3, #2
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b02      	subs	r3, #2
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060c0:	e012      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	330c      	adds	r3, #12
 80060cc:	7812      	ldrb	r2, [r2, #0]
 80060ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d148      	bne.n	800618c <HAL_SPI_TransmitReceive+0x3aa>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d042      	beq.n	800618c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b01      	cmp	r3, #1
 8006110:	d923      	bls.n	800615a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611c:	b292      	uxth	r2, r2
 800611e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b02      	subs	r3, #2
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d81f      	bhi.n	8006188 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006156:	605a      	str	r2, [r3, #4]
 8006158:	e016      	b.n	8006188 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f103 020c 	add.w	r2, r3, #12
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006188:	2301      	movs	r3, #1
 800618a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800618c:	f7fd fb2c 	bl	80037e8 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006198:	429a      	cmp	r2, r3
 800619a:	d803      	bhi.n	80061a4 <HAL_SPI_TransmitReceive+0x3c2>
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d102      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x3c8>
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e02c      	b.n	8006218 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f47f af55 	bne.w	8006074 <HAL_SPI_TransmitReceive+0x292>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f47f af4e 	bne.w	8006074 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f93d 	bl	800645c <SPI_EndRxTxTransaction>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e00e      	b.n	8006218 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006216:	2300      	movs	r3, #0
  }
}
 8006218:	4618      	mov	r0, r3
 800621a:	3728      	adds	r7, #40	@ 0x28
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006230:	f7fd fada 	bl	80037e8 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006238:	1a9b      	subs	r3, r3, r2
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	4413      	add	r3, r2
 800623e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006240:	f7fd fad2 	bl	80037e8 <HAL_GetTick>
 8006244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006246:	4b39      	ldr	r3, [pc, #228]	@ (800632c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	015b      	lsls	r3, r3, #5
 800624c:	0d1b      	lsrs	r3, r3, #20
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006256:	e054      	b.n	8006302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625e:	d050      	beq.n	8006302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006260:	f7fd fac2 	bl	80037e8 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	429a      	cmp	r2, r3
 800626e:	d902      	bls.n	8006276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d13d      	bne.n	80062f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800628e:	d111      	bne.n	80062b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006298:	d004      	beq.n	80062a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a2:	d107      	bne.n	80062b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062bc:	d10f      	bne.n	80062de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e017      	b.n	8006322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	3b01      	subs	r3, #1
 8006300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4013      	ands	r3, r2
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	429a      	cmp	r2, r3
 8006310:	bf0c      	ite	eq
 8006312:	2301      	moveq	r3, #1
 8006314:	2300      	movne	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	429a      	cmp	r2, r3
 800631e:	d19b      	bne.n	8006258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3720      	adds	r7, #32
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000020 	.word	0x20000020

08006330 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	@ 0x28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006342:	f7fd fa51 	bl	80037e8 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	4413      	add	r3, r2
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006352:	f7fd fa49 	bl	80037e8 <HAL_GetTick>
 8006356:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	330c      	adds	r3, #12
 800635e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006360:	4b3d      	ldr	r3, [pc, #244]	@ (8006458 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	00da      	lsls	r2, r3, #3
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	0d1b      	lsrs	r3, r3, #20
 8006370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006372:	fb02 f303 	mul.w	r3, r2, r3
 8006376:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006378:	e060      	b.n	800643c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006380:	d107      	bne.n	8006392 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006390:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d050      	beq.n	800643c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800639a:	f7fd fa25 	bl	80037e8 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d902      	bls.n	80063b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d13d      	bne.n	800642c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c8:	d111      	bne.n	80063ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063d2:	d004      	beq.n	80063de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063dc:	d107      	bne.n	80063ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f6:	d10f      	bne.n	8006418 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006416:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e010      	b.n	800644e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	3b01      	subs	r3, #1
 800643a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4013      	ands	r3, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	429a      	cmp	r2, r3
 800644a:	d196      	bne.n	800637a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3728      	adds	r7, #40	@ 0x28
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000020 	.word	0x20000020

0800645c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2200      	movs	r2, #0
 8006470:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff ff5b 	bl	8006330 <SPI_WaitFifoStateUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006484:	f043 0220 	orr.w	r2, r3, #32
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e027      	b.n	80064e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2200      	movs	r2, #0
 8006498:	2180      	movs	r1, #128	@ 0x80
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7ff fec0 	bl	8006220 <SPI_WaitFlagStateUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d007      	beq.n	80064b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064aa:	f043 0220 	orr.w	r2, r3, #32
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e014      	b.n	80064e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2200      	movs	r2, #0
 80064be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff ff34 	bl	8006330 <SPI_WaitFifoStateUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d2:	f043 0220 	orr.w	r2, r3, #32
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e000      	b.n	80064e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e049      	b.n	800658e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fc ff78 	bl	8003404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f000 f9bc 	bl	80068a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d001      	beq.n	80065b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e04c      	b.n	800664a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a26      	ldr	r2, [pc, #152]	@ (8006658 <HAL_TIM_Base_Start+0xc0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d022      	beq.n	8006608 <HAL_TIM_Base_Start+0x70>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ca:	d01d      	beq.n	8006608 <HAL_TIM_Base_Start+0x70>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a22      	ldr	r2, [pc, #136]	@ (800665c <HAL_TIM_Base_Start+0xc4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d018      	beq.n	8006608 <HAL_TIM_Base_Start+0x70>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a21      	ldr	r2, [pc, #132]	@ (8006660 <HAL_TIM_Base_Start+0xc8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d013      	beq.n	8006608 <HAL_TIM_Base_Start+0x70>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006664 <HAL_TIM_Base_Start+0xcc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00e      	beq.n	8006608 <HAL_TIM_Base_Start+0x70>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006668 <HAL_TIM_Base_Start+0xd0>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d009      	beq.n	8006608 <HAL_TIM_Base_Start+0x70>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1c      	ldr	r2, [pc, #112]	@ (800666c <HAL_TIM_Base_Start+0xd4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <HAL_TIM_Base_Start+0x70>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <HAL_TIM_Base_Start+0xd8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d115      	bne.n	8006634 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	4b19      	ldr	r3, [pc, #100]	@ (8006674 <HAL_TIM_Base_Start+0xdc>)
 8006610:	4013      	ands	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b06      	cmp	r3, #6
 8006618:	d015      	beq.n	8006646 <HAL_TIM_Base_Start+0xae>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006620:	d011      	beq.n	8006646 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0201 	orr.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006632:	e008      	b.n	8006646 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0201 	orr.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e000      	b.n	8006648 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006646:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40012c00 	.word	0x40012c00
 800665c:	40000400 	.word	0x40000400
 8006660:	40000800 	.word	0x40000800
 8006664:	40000c00 	.word	0x40000c00
 8006668:	40013400 	.word	0x40013400
 800666c:	40014000 	.word	0x40014000
 8006670:	40015000 	.word	0x40015000
 8006674:	00010007 	.word	0x00010007

08006678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_TIM_ConfigClockSource+0x1c>
 8006690:	2302      	movs	r3, #2
 8006692:	e0f6      	b.n	8006882 <HAL_TIM_ConfigClockSource+0x20a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80066b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a6f      	ldr	r2, [pc, #444]	@ (800688c <HAL_TIM_ConfigClockSource+0x214>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	f000 80c1 	beq.w	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 80066d4:	4a6d      	ldr	r2, [pc, #436]	@ (800688c <HAL_TIM_ConfigClockSource+0x214>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	f200 80c6 	bhi.w	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 80066dc:	4a6c      	ldr	r2, [pc, #432]	@ (8006890 <HAL_TIM_ConfigClockSource+0x218>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	f000 80b9 	beq.w	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 80066e4:	4a6a      	ldr	r2, [pc, #424]	@ (8006890 <HAL_TIM_ConfigClockSource+0x218>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	f200 80be 	bhi.w	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 80066ec:	4a69      	ldr	r2, [pc, #420]	@ (8006894 <HAL_TIM_ConfigClockSource+0x21c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	f000 80b1 	beq.w	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 80066f4:	4a67      	ldr	r2, [pc, #412]	@ (8006894 <HAL_TIM_ConfigClockSource+0x21c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f200 80b6 	bhi.w	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 80066fc:	4a66      	ldr	r2, [pc, #408]	@ (8006898 <HAL_TIM_ConfigClockSource+0x220>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	f000 80a9 	beq.w	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 8006704:	4a64      	ldr	r2, [pc, #400]	@ (8006898 <HAL_TIM_ConfigClockSource+0x220>)
 8006706:	4293      	cmp	r3, r2
 8006708:	f200 80ae 	bhi.w	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 800670c:	4a63      	ldr	r2, [pc, #396]	@ (800689c <HAL_TIM_ConfigClockSource+0x224>)
 800670e:	4293      	cmp	r3, r2
 8006710:	f000 80a1 	beq.w	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 8006714:	4a61      	ldr	r2, [pc, #388]	@ (800689c <HAL_TIM_ConfigClockSource+0x224>)
 8006716:	4293      	cmp	r3, r2
 8006718:	f200 80a6 	bhi.w	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 800671c:	4a60      	ldr	r2, [pc, #384]	@ (80068a0 <HAL_TIM_ConfigClockSource+0x228>)
 800671e:	4293      	cmp	r3, r2
 8006720:	f000 8099 	beq.w	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 8006724:	4a5e      	ldr	r2, [pc, #376]	@ (80068a0 <HAL_TIM_ConfigClockSource+0x228>)
 8006726:	4293      	cmp	r3, r2
 8006728:	f200 809e 	bhi.w	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 800672c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006730:	f000 8091 	beq.w	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 8006734:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006738:	f200 8096 	bhi.w	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 800673c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006740:	f000 8089 	beq.w	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 8006744:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006748:	f200 808e 	bhi.w	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 800674c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006750:	d03e      	beq.n	80067d0 <HAL_TIM_ConfigClockSource+0x158>
 8006752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006756:	f200 8087 	bhi.w	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 800675a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675e:	f000 8086 	beq.w	800686e <HAL_TIM_ConfigClockSource+0x1f6>
 8006762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006766:	d87f      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 8006768:	2b70      	cmp	r3, #112	@ 0x70
 800676a:	d01a      	beq.n	80067a2 <HAL_TIM_ConfigClockSource+0x12a>
 800676c:	2b70      	cmp	r3, #112	@ 0x70
 800676e:	d87b      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 8006770:	2b60      	cmp	r3, #96	@ 0x60
 8006772:	d050      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x19e>
 8006774:	2b60      	cmp	r3, #96	@ 0x60
 8006776:	d877      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 8006778:	2b50      	cmp	r3, #80	@ 0x50
 800677a:	d03c      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x17e>
 800677c:	2b50      	cmp	r3, #80	@ 0x50
 800677e:	d873      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 8006780:	2b40      	cmp	r3, #64	@ 0x40
 8006782:	d058      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 8006784:	2b40      	cmp	r3, #64	@ 0x40
 8006786:	d86f      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 8006788:	2b30      	cmp	r3, #48	@ 0x30
 800678a:	d064      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 800678c:	2b30      	cmp	r3, #48	@ 0x30
 800678e:	d86b      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 8006790:	2b20      	cmp	r3, #32
 8006792:	d060      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 8006794:	2b20      	cmp	r3, #32
 8006796:	d867      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d05c      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 800679c:	2b10      	cmp	r3, #16
 800679e:	d05a      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x1de>
 80067a0:	e062      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067b2:	f000 f9a7 	bl	8006b04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	609a      	str	r2, [r3, #8]
      break;
 80067ce:	e04f      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067e0:	f000 f990 	bl	8006b04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067f2:	609a      	str	r2, [r3, #8]
      break;
 80067f4:	e03c      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006802:	461a      	mov	r2, r3
 8006804:	f000 f902 	bl	8006a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2150      	movs	r1, #80	@ 0x50
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f95b 	bl	8006aca <TIM_ITRx_SetConfig>
      break;
 8006814:	e02c      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006822:	461a      	mov	r2, r3
 8006824:	f000 f921 	bl	8006a6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2160      	movs	r1, #96	@ 0x60
 800682e:	4618      	mov	r0, r3
 8006830:	f000 f94b 	bl	8006aca <TIM_ITRx_SetConfig>
      break;
 8006834:	e01c      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006842:	461a      	mov	r2, r3
 8006844:	f000 f8e2 	bl	8006a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2140      	movs	r1, #64	@ 0x40
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f93b 	bl	8006aca <TIM_ITRx_SetConfig>
      break;
 8006854:	e00c      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4619      	mov	r1, r3
 8006860:	4610      	mov	r0, r2
 8006862:	f000 f932 	bl	8006aca <TIM_ITRx_SetConfig>
      break;
 8006866:	e003      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
      break;
 800686c:	e000      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800686e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	00100070 	.word	0x00100070
 8006890:	00100060 	.word	0x00100060
 8006894:	00100050 	.word	0x00100050
 8006898:	00100040 	.word	0x00100040
 800689c:	00100030 	.word	0x00100030
 80068a0:	00100020 	.word	0x00100020

080068a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a4c      	ldr	r2, [pc, #304]	@ (80069e8 <TIM_Base_SetConfig+0x144>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d017      	beq.n	80068ec <TIM_Base_SetConfig+0x48>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c2:	d013      	beq.n	80068ec <TIM_Base_SetConfig+0x48>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a49      	ldr	r2, [pc, #292]	@ (80069ec <TIM_Base_SetConfig+0x148>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00f      	beq.n	80068ec <TIM_Base_SetConfig+0x48>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a48      	ldr	r2, [pc, #288]	@ (80069f0 <TIM_Base_SetConfig+0x14c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00b      	beq.n	80068ec <TIM_Base_SetConfig+0x48>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a47      	ldr	r2, [pc, #284]	@ (80069f4 <TIM_Base_SetConfig+0x150>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <TIM_Base_SetConfig+0x48>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a46      	ldr	r2, [pc, #280]	@ (80069f8 <TIM_Base_SetConfig+0x154>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_Base_SetConfig+0x48>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a45      	ldr	r2, [pc, #276]	@ (80069fc <TIM_Base_SetConfig+0x158>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d108      	bne.n	80068fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a39      	ldr	r2, [pc, #228]	@ (80069e8 <TIM_Base_SetConfig+0x144>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d023      	beq.n	800694e <TIM_Base_SetConfig+0xaa>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800690c:	d01f      	beq.n	800694e <TIM_Base_SetConfig+0xaa>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a36      	ldr	r2, [pc, #216]	@ (80069ec <TIM_Base_SetConfig+0x148>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01b      	beq.n	800694e <TIM_Base_SetConfig+0xaa>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a35      	ldr	r2, [pc, #212]	@ (80069f0 <TIM_Base_SetConfig+0x14c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d017      	beq.n	800694e <TIM_Base_SetConfig+0xaa>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a34      	ldr	r2, [pc, #208]	@ (80069f4 <TIM_Base_SetConfig+0x150>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <TIM_Base_SetConfig+0xaa>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a33      	ldr	r2, [pc, #204]	@ (80069f8 <TIM_Base_SetConfig+0x154>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00f      	beq.n	800694e <TIM_Base_SetConfig+0xaa>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a33      	ldr	r2, [pc, #204]	@ (8006a00 <TIM_Base_SetConfig+0x15c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00b      	beq.n	800694e <TIM_Base_SetConfig+0xaa>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a32      	ldr	r2, [pc, #200]	@ (8006a04 <TIM_Base_SetConfig+0x160>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_Base_SetConfig+0xaa>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a31      	ldr	r2, [pc, #196]	@ (8006a08 <TIM_Base_SetConfig+0x164>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_Base_SetConfig+0xaa>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2c      	ldr	r2, [pc, #176]	@ (80069fc <TIM_Base_SetConfig+0x158>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d108      	bne.n	8006960 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a18      	ldr	r2, [pc, #96]	@ (80069e8 <TIM_Base_SetConfig+0x144>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d013      	beq.n	80069b4 <TIM_Base_SetConfig+0x110>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a1a      	ldr	r2, [pc, #104]	@ (80069f8 <TIM_Base_SetConfig+0x154>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00f      	beq.n	80069b4 <TIM_Base_SetConfig+0x110>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a1a      	ldr	r2, [pc, #104]	@ (8006a00 <TIM_Base_SetConfig+0x15c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00b      	beq.n	80069b4 <TIM_Base_SetConfig+0x110>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a19      	ldr	r2, [pc, #100]	@ (8006a04 <TIM_Base_SetConfig+0x160>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d007      	beq.n	80069b4 <TIM_Base_SetConfig+0x110>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a18      	ldr	r2, [pc, #96]	@ (8006a08 <TIM_Base_SetConfig+0x164>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d003      	beq.n	80069b4 <TIM_Base_SetConfig+0x110>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a13      	ldr	r2, [pc, #76]	@ (80069fc <TIM_Base_SetConfig+0x158>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d103      	bne.n	80069bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d105      	bne.n	80069da <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f023 0201 	bic.w	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	611a      	str	r2, [r3, #16]
  }
}
 80069da:	bf00      	nop
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40000c00 	.word	0x40000c00
 80069f8:	40013400 	.word	0x40013400
 80069fc:	40015000 	.word	0x40015000
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800

08006a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f023 0201 	bic.w	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f023 030a 	bic.w	r3, r3, #10
 8006a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	f023 0210 	bic.w	r2, r3, #16
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	031b      	lsls	r3, r3, #12
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006aa6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f043 0307 	orr.w	r3, r3, #7
 8006af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	609a      	str	r2, [r3, #8]
}
 8006af8:	bf00      	nop
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	021a      	lsls	r2, r3, #8
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	609a      	str	r2, [r3, #8]
}
 8006b38:	bf00      	nop
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e074      	b.n	8006c46 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a34      	ldr	r2, [pc, #208]	@ (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d009      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a33      	ldr	r2, [pc, #204]	@ (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d004      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a31      	ldr	r2, [pc, #196]	@ (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d108      	bne.n	8006bac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ba0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a21      	ldr	r2, [pc, #132]	@ (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d022      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bdc:	d01d      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1f      	ldr	r2, [pc, #124]	@ (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d018      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1d      	ldr	r2, [pc, #116]	@ (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d013      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a15      	ldr	r2, [pc, #84]	@ (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a18      	ldr	r2, [pc, #96]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a11      	ldr	r2, [pc, #68]	@ (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10c      	bne.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40012c00 	.word	0x40012c00
 8006c58:	40013400 	.word	0x40013400
 8006c5c:	40015000 	.word	0x40015000
 8006c60:	40000400 	.word	0x40000400
 8006c64:	40000800 	.word	0x40000800
 8006c68:	40000c00 	.word	0x40000c00
 8006c6c:	40014000 	.word	0x40014000

08006c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e042      	b.n	8006d08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d106      	bne.n	8006c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7fc fbd5 	bl	8003444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2224      	movs	r2, #36	@ 0x24
 8006c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fbb2 	bl	8007424 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f8b3 	bl	8006e2c <UART_SetConfig>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e01b      	b.n	8006d08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fc31 	bl	8007568 <UART_CheckIdleState>
 8006d06:	4603      	mov	r3, r0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	@ 0x28
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	d17b      	bne.n	8006e22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_UART_Transmit+0x26>
 8006d30:	88fb      	ldrh	r3, [r7, #6]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e074      	b.n	8006e24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2221      	movs	r2, #33	@ 0x21
 8006d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d4a:	f7fc fd4d 	bl	80037e8 <HAL_GetTick>
 8006d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	88fa      	ldrh	r2, [r7, #6]
 8006d54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	88fa      	ldrh	r2, [r7, #6]
 8006d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d68:	d108      	bne.n	8006d7c <HAL_UART_Transmit+0x6c>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d104      	bne.n	8006d7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	e003      	b.n	8006d84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d84:	e030      	b.n	8006de8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2180      	movs	r1, #128	@ 0x80
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 fc93 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e03d      	b.n	8006e24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10b      	bne.n	8006dc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dbc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	61bb      	str	r3, [r7, #24]
 8006dc4:	e007      	b.n	8006dd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1c8      	bne.n	8006d86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2140      	movs	r1, #64	@ 0x40
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fc5c 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e006      	b.n	8006e24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e000      	b.n	8006e24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006e22:	2302      	movs	r3, #2
  }
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e30:	b08c      	sub	sp, #48	@ 0x30
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	431a      	orrs	r2, r3
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4baa      	ldr	r3, [pc, #680]	@ (8007104 <UART_SetConfig+0x2d8>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e64:	430b      	orrs	r3, r1
 8006e66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a9f      	ldr	r2, [pc, #636]	@ (8007108 <UART_SetConfig+0x2dc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e94:	4313      	orrs	r3, r2
 8006e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006ea2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	6812      	ldr	r2, [r2, #0]
 8006eaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eac:	430b      	orrs	r3, r1
 8006eae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb6:	f023 010f 	bic.w	r1, r3, #15
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a90      	ldr	r2, [pc, #576]	@ (800710c <UART_SetConfig+0x2e0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d125      	bne.n	8006f1c <UART_SetConfig+0xf0>
 8006ed0:	4b8f      	ldr	r3, [pc, #572]	@ (8007110 <UART_SetConfig+0x2e4>)
 8006ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d81a      	bhi.n	8006f14 <UART_SetConfig+0xe8>
 8006ede:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee4 <UART_SetConfig+0xb8>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006ef5 	.word	0x08006ef5
 8006ee8:	08006f05 	.word	0x08006f05
 8006eec:	08006efd 	.word	0x08006efd
 8006ef0:	08006f0d 	.word	0x08006f0d
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efa:	e116      	b.n	800712a <UART_SetConfig+0x2fe>
 8006efc:	2302      	movs	r3, #2
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f02:	e112      	b.n	800712a <UART_SetConfig+0x2fe>
 8006f04:	2304      	movs	r3, #4
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0a:	e10e      	b.n	800712a <UART_SetConfig+0x2fe>
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f12:	e10a      	b.n	800712a <UART_SetConfig+0x2fe>
 8006f14:	2310      	movs	r3, #16
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1a:	e106      	b.n	800712a <UART_SetConfig+0x2fe>
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a7c      	ldr	r2, [pc, #496]	@ (8007114 <UART_SetConfig+0x2e8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d138      	bne.n	8006f98 <UART_SetConfig+0x16c>
 8006f26:	4b7a      	ldr	r3, [pc, #488]	@ (8007110 <UART_SetConfig+0x2e4>)
 8006f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2c:	f003 030c 	and.w	r3, r3, #12
 8006f30:	2b0c      	cmp	r3, #12
 8006f32:	d82d      	bhi.n	8006f90 <UART_SetConfig+0x164>
 8006f34:	a201      	add	r2, pc, #4	@ (adr r2, 8006f3c <UART_SetConfig+0x110>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006f71 	.word	0x08006f71
 8006f40:	08006f91 	.word	0x08006f91
 8006f44:	08006f91 	.word	0x08006f91
 8006f48:	08006f91 	.word	0x08006f91
 8006f4c:	08006f81 	.word	0x08006f81
 8006f50:	08006f91 	.word	0x08006f91
 8006f54:	08006f91 	.word	0x08006f91
 8006f58:	08006f91 	.word	0x08006f91
 8006f5c:	08006f79 	.word	0x08006f79
 8006f60:	08006f91 	.word	0x08006f91
 8006f64:	08006f91 	.word	0x08006f91
 8006f68:	08006f91 	.word	0x08006f91
 8006f6c:	08006f89 	.word	0x08006f89
 8006f70:	2300      	movs	r3, #0
 8006f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f76:	e0d8      	b.n	800712a <UART_SetConfig+0x2fe>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7e:	e0d4      	b.n	800712a <UART_SetConfig+0x2fe>
 8006f80:	2304      	movs	r3, #4
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f86:	e0d0      	b.n	800712a <UART_SetConfig+0x2fe>
 8006f88:	2308      	movs	r3, #8
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8e:	e0cc      	b.n	800712a <UART_SetConfig+0x2fe>
 8006f90:	2310      	movs	r3, #16
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f96:	e0c8      	b.n	800712a <UART_SetConfig+0x2fe>
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a5e      	ldr	r2, [pc, #376]	@ (8007118 <UART_SetConfig+0x2ec>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d125      	bne.n	8006fee <UART_SetConfig+0x1c2>
 8006fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8007110 <UART_SetConfig+0x2e4>)
 8006fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006fac:	2b30      	cmp	r3, #48	@ 0x30
 8006fae:	d016      	beq.n	8006fde <UART_SetConfig+0x1b2>
 8006fb0:	2b30      	cmp	r3, #48	@ 0x30
 8006fb2:	d818      	bhi.n	8006fe6 <UART_SetConfig+0x1ba>
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d00a      	beq.n	8006fce <UART_SetConfig+0x1a2>
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d814      	bhi.n	8006fe6 <UART_SetConfig+0x1ba>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <UART_SetConfig+0x19a>
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d008      	beq.n	8006fd6 <UART_SetConfig+0x1aa>
 8006fc4:	e00f      	b.n	8006fe6 <UART_SetConfig+0x1ba>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fcc:	e0ad      	b.n	800712a <UART_SetConfig+0x2fe>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd4:	e0a9      	b.n	800712a <UART_SetConfig+0x2fe>
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fdc:	e0a5      	b.n	800712a <UART_SetConfig+0x2fe>
 8006fde:	2308      	movs	r3, #8
 8006fe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe4:	e0a1      	b.n	800712a <UART_SetConfig+0x2fe>
 8006fe6:	2310      	movs	r3, #16
 8006fe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fec:	e09d      	b.n	800712a <UART_SetConfig+0x2fe>
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800711c <UART_SetConfig+0x2f0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d125      	bne.n	8007044 <UART_SetConfig+0x218>
 8006ff8:	4b45      	ldr	r3, [pc, #276]	@ (8007110 <UART_SetConfig+0x2e4>)
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007002:	2bc0      	cmp	r3, #192	@ 0xc0
 8007004:	d016      	beq.n	8007034 <UART_SetConfig+0x208>
 8007006:	2bc0      	cmp	r3, #192	@ 0xc0
 8007008:	d818      	bhi.n	800703c <UART_SetConfig+0x210>
 800700a:	2b80      	cmp	r3, #128	@ 0x80
 800700c:	d00a      	beq.n	8007024 <UART_SetConfig+0x1f8>
 800700e:	2b80      	cmp	r3, #128	@ 0x80
 8007010:	d814      	bhi.n	800703c <UART_SetConfig+0x210>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <UART_SetConfig+0x1f0>
 8007016:	2b40      	cmp	r3, #64	@ 0x40
 8007018:	d008      	beq.n	800702c <UART_SetConfig+0x200>
 800701a:	e00f      	b.n	800703c <UART_SetConfig+0x210>
 800701c:	2300      	movs	r3, #0
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007022:	e082      	b.n	800712a <UART_SetConfig+0x2fe>
 8007024:	2302      	movs	r3, #2
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702a:	e07e      	b.n	800712a <UART_SetConfig+0x2fe>
 800702c:	2304      	movs	r3, #4
 800702e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007032:	e07a      	b.n	800712a <UART_SetConfig+0x2fe>
 8007034:	2308      	movs	r3, #8
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703a:	e076      	b.n	800712a <UART_SetConfig+0x2fe>
 800703c:	2310      	movs	r3, #16
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e072      	b.n	800712a <UART_SetConfig+0x2fe>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a35      	ldr	r2, [pc, #212]	@ (8007120 <UART_SetConfig+0x2f4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d12a      	bne.n	80070a4 <UART_SetConfig+0x278>
 800704e:	4b30      	ldr	r3, [pc, #192]	@ (8007110 <UART_SetConfig+0x2e4>)
 8007050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800705c:	d01a      	beq.n	8007094 <UART_SetConfig+0x268>
 800705e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007062:	d81b      	bhi.n	800709c <UART_SetConfig+0x270>
 8007064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007068:	d00c      	beq.n	8007084 <UART_SetConfig+0x258>
 800706a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800706e:	d815      	bhi.n	800709c <UART_SetConfig+0x270>
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <UART_SetConfig+0x250>
 8007074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007078:	d008      	beq.n	800708c <UART_SetConfig+0x260>
 800707a:	e00f      	b.n	800709c <UART_SetConfig+0x270>
 800707c:	2300      	movs	r3, #0
 800707e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007082:	e052      	b.n	800712a <UART_SetConfig+0x2fe>
 8007084:	2302      	movs	r3, #2
 8007086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800708a:	e04e      	b.n	800712a <UART_SetConfig+0x2fe>
 800708c:	2304      	movs	r3, #4
 800708e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007092:	e04a      	b.n	800712a <UART_SetConfig+0x2fe>
 8007094:	2308      	movs	r3, #8
 8007096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800709a:	e046      	b.n	800712a <UART_SetConfig+0x2fe>
 800709c:	2310      	movs	r3, #16
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a2:	e042      	b.n	800712a <UART_SetConfig+0x2fe>
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a17      	ldr	r2, [pc, #92]	@ (8007108 <UART_SetConfig+0x2dc>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d13a      	bne.n	8007124 <UART_SetConfig+0x2f8>
 80070ae:	4b18      	ldr	r3, [pc, #96]	@ (8007110 <UART_SetConfig+0x2e4>)
 80070b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80070b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070bc:	d01a      	beq.n	80070f4 <UART_SetConfig+0x2c8>
 80070be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070c2:	d81b      	bhi.n	80070fc <UART_SetConfig+0x2d0>
 80070c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070c8:	d00c      	beq.n	80070e4 <UART_SetConfig+0x2b8>
 80070ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ce:	d815      	bhi.n	80070fc <UART_SetConfig+0x2d0>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <UART_SetConfig+0x2b0>
 80070d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d8:	d008      	beq.n	80070ec <UART_SetConfig+0x2c0>
 80070da:	e00f      	b.n	80070fc <UART_SetConfig+0x2d0>
 80070dc:	2300      	movs	r3, #0
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070e2:	e022      	b.n	800712a <UART_SetConfig+0x2fe>
 80070e4:	2302      	movs	r3, #2
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ea:	e01e      	b.n	800712a <UART_SetConfig+0x2fe>
 80070ec:	2304      	movs	r3, #4
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f2:	e01a      	b.n	800712a <UART_SetConfig+0x2fe>
 80070f4:	2308      	movs	r3, #8
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070fa:	e016      	b.n	800712a <UART_SetConfig+0x2fe>
 80070fc:	2310      	movs	r3, #16
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007102:	e012      	b.n	800712a <UART_SetConfig+0x2fe>
 8007104:	cfff69f3 	.word	0xcfff69f3
 8007108:	40008000 	.word	0x40008000
 800710c:	40013800 	.word	0x40013800
 8007110:	40021000 	.word	0x40021000
 8007114:	40004400 	.word	0x40004400
 8007118:	40004800 	.word	0x40004800
 800711c:	40004c00 	.word	0x40004c00
 8007120:	40005000 	.word	0x40005000
 8007124:	2310      	movs	r3, #16
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4aae      	ldr	r2, [pc, #696]	@ (80073e8 <UART_SetConfig+0x5bc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	f040 8097 	bne.w	8007264 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007136:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800713a:	2b08      	cmp	r3, #8
 800713c:	d823      	bhi.n	8007186 <UART_SetConfig+0x35a>
 800713e:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <UART_SetConfig+0x318>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007169 	.word	0x08007169
 8007148:	08007187 	.word	0x08007187
 800714c:	08007171 	.word	0x08007171
 8007150:	08007187 	.word	0x08007187
 8007154:	08007177 	.word	0x08007177
 8007158:	08007187 	.word	0x08007187
 800715c:	08007187 	.word	0x08007187
 8007160:	08007187 	.word	0x08007187
 8007164:	0800717f 	.word	0x0800717f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007168:	f7fe f95a 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 800716c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800716e:	e010      	b.n	8007192 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007170:	4b9e      	ldr	r3, [pc, #632]	@ (80073ec <UART_SetConfig+0x5c0>)
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007174:	e00d      	b.n	8007192 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007176:	f7fe f8e5 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 800717a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800717c:	e009      	b.n	8007192 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800717e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007182:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007184:	e005      	b.n	8007192 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007190:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 8130 	beq.w	80073fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	4a94      	ldr	r2, [pc, #592]	@ (80073f0 <UART_SetConfig+0x5c4>)
 80071a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a4:	461a      	mov	r2, r3
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80071ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	4613      	mov	r3, r2
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d305      	bcc.n	80071ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d903      	bls.n	80071d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071d0:	e113      	b.n	80073fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	2200      	movs	r2, #0
 80071d6:	60bb      	str	r3, [r7, #8]
 80071d8:	60fa      	str	r2, [r7, #12]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071de:	4a84      	ldr	r2, [pc, #528]	@ (80073f0 <UART_SetConfig+0x5c4>)
 80071e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2200      	movs	r2, #0
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071f4:	f7f9 fda0 	bl	8000d38 <__aeabi_uldivmod>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	4610      	mov	r0, r2
 80071fe:	4619      	mov	r1, r3
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	020b      	lsls	r3, r1, #8
 800720a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800720e:	0202      	lsls	r2, r0, #8
 8007210:	6979      	ldr	r1, [r7, #20]
 8007212:	6849      	ldr	r1, [r1, #4]
 8007214:	0849      	lsrs	r1, r1, #1
 8007216:	2000      	movs	r0, #0
 8007218:	460c      	mov	r4, r1
 800721a:	4605      	mov	r5, r0
 800721c:	eb12 0804 	adds.w	r8, r2, r4
 8007220:	eb43 0905 	adc.w	r9, r3, r5
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	469a      	mov	sl, r3
 800722c:	4693      	mov	fp, r2
 800722e:	4652      	mov	r2, sl
 8007230:	465b      	mov	r3, fp
 8007232:	4640      	mov	r0, r8
 8007234:	4649      	mov	r1, r9
 8007236:	f7f9 fd7f 	bl	8000d38 <__aeabi_uldivmod>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4613      	mov	r3, r2
 8007240:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007248:	d308      	bcc.n	800725c <UART_SetConfig+0x430>
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007250:	d204      	bcs.n	800725c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6a3a      	ldr	r2, [r7, #32]
 8007258:	60da      	str	r2, [r3, #12]
 800725a:	e0ce      	b.n	80073fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007262:	e0ca      	b.n	80073fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800726c:	d166      	bne.n	800733c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800726e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007272:	2b08      	cmp	r3, #8
 8007274:	d827      	bhi.n	80072c6 <UART_SetConfig+0x49a>
 8007276:	a201      	add	r2, pc, #4	@ (adr r2, 800727c <UART_SetConfig+0x450>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	080072a1 	.word	0x080072a1
 8007280:	080072a9 	.word	0x080072a9
 8007284:	080072b1 	.word	0x080072b1
 8007288:	080072c7 	.word	0x080072c7
 800728c:	080072b7 	.word	0x080072b7
 8007290:	080072c7 	.word	0x080072c7
 8007294:	080072c7 	.word	0x080072c7
 8007298:	080072c7 	.word	0x080072c7
 800729c:	080072bf 	.word	0x080072bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a0:	f7fe f8be 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 80072a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072a6:	e014      	b.n	80072d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a8:	f7fe f8d0 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 80072ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072ae:	e010      	b.n	80072d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b0:	4b4e      	ldr	r3, [pc, #312]	@ (80073ec <UART_SetConfig+0x5c0>)
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072b4:	e00d      	b.n	80072d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b6:	f7fe f845 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 80072ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072bc:	e009      	b.n	80072d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072c4:	e005      	b.n	80072d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8090 	beq.w	80073fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072de:	4a44      	ldr	r2, [pc, #272]	@ (80073f0 <UART_SetConfig+0x5c4>)
 80072e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ec:	005a      	lsls	r2, r3, #1
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	441a      	add	r2, r3
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	2b0f      	cmp	r3, #15
 8007304:	d916      	bls.n	8007334 <UART_SetConfig+0x508>
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800730c:	d212      	bcs.n	8007334 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f023 030f 	bic.w	r3, r3, #15
 8007316:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	b29b      	uxth	r3, r3
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	b29a      	uxth	r2, r3
 8007324:	8bfb      	ldrh	r3, [r7, #30]
 8007326:	4313      	orrs	r3, r2
 8007328:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	8bfa      	ldrh	r2, [r7, #30]
 8007330:	60da      	str	r2, [r3, #12]
 8007332:	e062      	b.n	80073fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800733a:	e05e      	b.n	80073fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800733c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007340:	2b08      	cmp	r3, #8
 8007342:	d828      	bhi.n	8007396 <UART_SetConfig+0x56a>
 8007344:	a201      	add	r2, pc, #4	@ (adr r2, 800734c <UART_SetConfig+0x520>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	08007371 	.word	0x08007371
 8007350:	08007379 	.word	0x08007379
 8007354:	08007381 	.word	0x08007381
 8007358:	08007397 	.word	0x08007397
 800735c:	08007387 	.word	0x08007387
 8007360:	08007397 	.word	0x08007397
 8007364:	08007397 	.word	0x08007397
 8007368:	08007397 	.word	0x08007397
 800736c:	0800738f 	.word	0x0800738f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007370:	f7fe f856 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8007374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007376:	e014      	b.n	80073a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007378:	f7fe f868 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 800737c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800737e:	e010      	b.n	80073a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007380:	4b1a      	ldr	r3, [pc, #104]	@ (80073ec <UART_SetConfig+0x5c0>)
 8007382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007384:	e00d      	b.n	80073a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007386:	f7fd ffdd 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 800738a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800738c:	e009      	b.n	80073a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007394:	e005      	b.n	80073a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073a0:	bf00      	nop
    }

    if (pclk != 0U)
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d028      	beq.n	80073fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ac:	4a10      	ldr	r2, [pc, #64]	@ (80073f0 <UART_SetConfig+0x5c4>)
 80073ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b2:	461a      	mov	r2, r3
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	441a      	add	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	2b0f      	cmp	r3, #15
 80073d0:	d910      	bls.n	80073f4 <UART_SetConfig+0x5c8>
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073d8:	d20c      	bcs.n	80073f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60da      	str	r2, [r3, #12]
 80073e4:	e009      	b.n	80073fa <UART_SetConfig+0x5ce>
 80073e6:	bf00      	nop
 80073e8:	40008000 	.word	0x40008000
 80073ec:	00f42400 	.word	0x00f42400
 80073f0:	0800d95c 	.word	0x0800d95c
      }
      else
      {
        ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2201      	movs	r2, #1
 8007406:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2200      	movs	r2, #0
 800740e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2200      	movs	r2, #0
 8007414:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007416:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800741a:	4618      	mov	r0, r3
 800741c:	3730      	adds	r7, #48	@ 0x30
 800741e:	46bd      	mov	sp, r7
 8007420:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	f003 0308 	and.w	r3, r3, #8
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01a      	beq.n	800753a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007522:	d10a      	bne.n	800753a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	605a      	str	r2, [r3, #4]
  }
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b098      	sub	sp, #96	@ 0x60
 800756c:	af02      	add	r7, sp, #8
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007578:	f7fc f936 	bl	80037e8 <HAL_GetTick>
 800757c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d12f      	bne.n	80075ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800758c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007594:	2200      	movs	r2, #0
 8007596:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f88e 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d022      	beq.n	80075ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e6      	bne.n	80075a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e063      	b.n	80076b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d149      	bne.n	800768e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007602:	2200      	movs	r2, #0
 8007604:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f857 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d03c      	beq.n	800768e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	623b      	str	r3, [r7, #32]
   return(result);
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007632:	633b      	str	r3, [r7, #48]	@ 0x30
 8007634:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e6      	bne.n	8007614 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	60fb      	str	r3, [r7, #12]
   return(result);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3308      	adds	r3, #8
 8007664:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007666:	61fa      	str	r2, [r7, #28]
 8007668:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	69b9      	ldr	r1, [r7, #24]
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	617b      	str	r3, [r7, #20]
   return(result);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e012      	b.n	80076b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3758      	adds	r7, #88	@ 0x58
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4613      	mov	r3, r2
 80076ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076cc:	e04f      	b.n	800776e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d04b      	beq.n	800776e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d6:	f7fc f887 	bl	80037e8 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d302      	bcc.n	80076ec <UART_WaitOnFlagUntilTimeout+0x30>
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e04e      	b.n	800778e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d037      	beq.n	800776e <UART_WaitOnFlagUntilTimeout+0xb2>
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b80      	cmp	r3, #128	@ 0x80
 8007702:	d034      	beq.n	800776e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b40      	cmp	r3, #64	@ 0x40
 8007708:	d031      	beq.n	800776e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b08      	cmp	r3, #8
 8007716:	d110      	bne.n	800773a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2208      	movs	r2, #8
 800771e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 f838 	bl	8007796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2208      	movs	r2, #8
 800772a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e029      	b.n	800778e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007748:	d111      	bne.n	800776e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 f81e 	bl	8007796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e00f      	b.n	800778e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69da      	ldr	r2, [r3, #28]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4013      	ands	r3, r2
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	429a      	cmp	r2, r3
 800777c:	bf0c      	ite	eq
 800777e:	2301      	moveq	r3, #1
 8007780:	2300      	movne	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	461a      	mov	r2, r3
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	429a      	cmp	r2, r3
 800778a:	d0a0      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007796:	b480      	push	{r7}
 8007798:	b095      	sub	sp, #84	@ 0x54
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80077be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e6      	bne.n	800779e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077e6:	f023 0301 	bic.w	r3, r3, #1
 80077ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e3      	bne.n	80077d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800780c:	2b01      	cmp	r3, #1
 800780e:	d118      	bne.n	8007842 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	60bb      	str	r3, [r7, #8]
   return(result);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f023 0310 	bic.w	r3, r3, #16
 8007824:	647b      	str	r3, [r7, #68]	@ 0x44
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	6979      	ldr	r1, [r7, #20]
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	613b      	str	r3, [r7, #16]
   return(result);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e6      	bne.n	8007810 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007856:	bf00      	nop
 8007858:	3754      	adds	r7, #84	@ 0x54
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007862:	b480      	push	{r7}
 8007864:	b085      	sub	sp, #20
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_UARTEx_DisableFifoMode+0x16>
 8007874:	2302      	movs	r3, #2
 8007876:	e027      	b.n	80078c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2224      	movs	r2, #36	@ 0x24
 8007884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 0201 	bic.w	r2, r2, #1
 800789e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e02d      	b.n	8007948 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2224      	movs	r2, #36	@ 0x24
 80078f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0201 	bic.w	r2, r2, #1
 8007912:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f84f 	bl	80079cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2220      	movs	r2, #32
 800793a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007960:	2b01      	cmp	r3, #1
 8007962:	d101      	bne.n	8007968 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007964:	2302      	movs	r3, #2
 8007966:	e02d      	b.n	80079c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2224      	movs	r2, #36	@ 0x24
 8007974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0201 	bic.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f811 	bl	80079cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d108      	bne.n	80079ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079ec:	e031      	b.n	8007a52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079ee:	2308      	movs	r3, #8
 80079f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079f2:	2308      	movs	r3, #8
 80079f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	0e5b      	lsrs	r3, r3, #25
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	0f5b      	lsrs	r3, r3, #29
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	7b3a      	ldrb	r2, [r7, #12]
 8007a1a:	4911      	ldr	r1, [pc, #68]	@ (8007a60 <UARTEx_SetNbDataToProcess+0x94>)
 8007a1c:	5c8a      	ldrb	r2, [r1, r2]
 8007a1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a22:	7b3a      	ldrb	r2, [r7, #12]
 8007a24:	490f      	ldr	r1, [pc, #60]	@ (8007a64 <UARTEx_SetNbDataToProcess+0x98>)
 8007a26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	7b7a      	ldrb	r2, [r7, #13]
 8007a38:	4909      	ldr	r1, [pc, #36]	@ (8007a60 <UARTEx_SetNbDataToProcess+0x94>)
 8007a3a:	5c8a      	ldrb	r2, [r1, r2]
 8007a3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a40:	7b7a      	ldrb	r2, [r7, #13]
 8007a42:	4908      	ldr	r1, [pc, #32]	@ (8007a64 <UARTEx_SetNbDataToProcess+0x98>)
 8007a44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007a52:	bf00      	nop
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	0800d974 	.word	0x0800d974
 8007a64:	0800d97c 	.word	0x0800d97c

08007a68 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8007a6c:	4907      	ldr	r1, [pc, #28]	@ (8007a8c <MX_FATFS_Init+0x24>)
 8007a6e:	4808      	ldr	r0, [pc, #32]	@ (8007a90 <MX_FATFS_Init+0x28>)
 8007a70:	f002 fef0 	bl	800a854 <FATFS_LinkDriver>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8007a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7e:	e003      	b.n	8007a88 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8007a80:	4b04      	ldr	r3, [pc, #16]	@ (8007a94 <MX_FATFS_Init+0x2c>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8007a86:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20000990 	.word	0x20000990
 8007a90:	2000002c 	.word	0x2000002c
 8007a94:	20000994 	.word	0x20000994

08007a98 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007a9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 f9d5 	bl	8007e64 <USER_SPI_initialize>
 8007aba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fab3 	bl	800803c <USER_SPI_status>
 8007ad6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 8007af0:	7bf8      	ldrb	r0, [r7, #15]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	f000 fab6 	bl	8008068 <USER_SPI_read>
 8007afc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	4603      	mov	r3, r0
 8007b14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8007b16:	7bf8      	ldrb	r0, [r7, #15]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	68b9      	ldr	r1, [r7, #8]
 8007b1e:	f000 fb09 	bl	8008134 <USER_SPI_write>
 8007b22:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	603a      	str	r2, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8007b40:	79b9      	ldrb	r1, [r7, #6]
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fb70 	bl	800822c <USER_SPI_ioctl>
 8007b4c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007b60:	f7fb fe42 	bl	80037e8 <HAL_GetTick>
 8007b64:	4603      	mov	r3, r0
 8007b66:	4a04      	ldr	r2, [pc, #16]	@ (8007b78 <SPI_Timer_On+0x20>)
 8007b68:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007b6a:	4a04      	ldr	r2, [pc, #16]	@ (8007b7c <SPI_Timer_On+0x24>)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6013      	str	r3, [r2, #0]
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20000998 	.word	0x20000998
 8007b7c:	2000099c 	.word	0x2000099c

08007b80 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007b84:	f7fb fe30 	bl	80037e8 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	4b06      	ldr	r3, [pc, #24]	@ (8007ba4 <SPI_Timer_Status+0x24>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	1ad2      	subs	r2, r2, r3
 8007b90:	4b05      	ldr	r3, [pc, #20]	@ (8007ba8 <SPI_Timer_Status+0x28>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	bf34      	ite	cc
 8007b98:	2301      	movcc	r3, #1
 8007b9a:	2300      	movcs	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000998 	.word	0x20000998
 8007ba8:	2000099c 	.word	0x2000099c

08007bac <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007bb6:	f107 020f 	add.w	r2, r7, #15
 8007bba:	1df9      	adds	r1, r7, #7
 8007bbc:	2332      	movs	r3, #50	@ 0x32
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	4804      	ldr	r0, [pc, #16]	@ (8007bd4 <xchg_spi+0x28>)
 8007bc4:	f7fe f90d 	bl	8005de2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	2000027c 	.word	0x2000027c

08007bd8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007bd8:	b590      	push	{r4, r7, lr}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	e00a      	b.n	8007bfe <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	18d4      	adds	r4, r2, r3
 8007bee:	20ff      	movs	r0, #255	@ 0xff
 8007bf0:	f7ff ffdc 	bl	8007bac <xchg_spi>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d3f0      	bcc.n	8007be8 <rcvr_spi_multi+0x10>
	}
}
 8007c06:	bf00      	nop
 8007c08:	bf00      	nop
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd90      	pop	{r4, r7, pc}

08007c10 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4803      	ldr	r0, [pc, #12]	@ (8007c34 <xmit_spi_multi+0x24>)
 8007c26:	f7fd ff66 	bl	8005af6 <HAL_SPI_Transmit>
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	2000027c 	.word	0x2000027c

08007c38 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007c40:	f7fb fdd2 	bl	80037e8 <HAL_GetTick>
 8007c44:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007c4a:	20ff      	movs	r0, #255	@ 0xff
 8007c4c:	f7ff ffae 	bl	8007bac <xchg_spi>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	2bff      	cmp	r3, #255	@ 0xff
 8007c58:	d007      	beq.n	8007c6a <wait_ready+0x32>
 8007c5a:	f7fb fdc5 	bl	80037e8 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d8ef      	bhi.n	8007c4a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2bff      	cmp	r3, #255	@ 0xff
 8007c6e:	bf0c      	ite	eq
 8007c70:	2301      	moveq	r3, #1
 8007c72:	2300      	movne	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007c84:	2201      	movs	r2, #1
 8007c86:	2140      	movs	r1, #64	@ 0x40
 8007c88:	4803      	ldr	r0, [pc, #12]	@ (8007c98 <despiselect+0x18>)
 8007c8a:	f7fc f859 	bl	8003d40 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007c8e:	20ff      	movs	r0, #255	@ 0xff
 8007c90:	f7ff ff8c 	bl	8007bac <xchg_spi>

}
 8007c94:	bf00      	nop
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	48000400 	.word	0x48000400

08007c9c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2140      	movs	r1, #64	@ 0x40
 8007ca4:	4809      	ldr	r0, [pc, #36]	@ (8007ccc <spiselect+0x30>)
 8007ca6:	f7fc f84b 	bl	8003d40 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007caa:	20ff      	movs	r0, #255	@ 0xff
 8007cac:	f7ff ff7e 	bl	8007bac <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007cb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007cb4:	f7ff ffc0 	bl	8007c38 <wait_ready>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <spiselect+0x26>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e002      	b.n	8007cc8 <spiselect+0x2c>

	despiselect();
 8007cc2:	f7ff ffdd 	bl	8007c80 <despiselect>
	return 0;	/* Timeout */
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	48000400 	.word	0x48000400

08007cd0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007cda:	20c8      	movs	r0, #200	@ 0xc8
 8007cdc:	f7ff ff3c 	bl	8007b58 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007ce0:	20ff      	movs	r0, #255	@ 0xff
 8007ce2:	f7ff ff63 	bl	8007bac <xchg_spi>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2bff      	cmp	r3, #255	@ 0xff
 8007cee:	d104      	bne.n	8007cfa <rcvr_datablock+0x2a>
 8007cf0:	f7ff ff46 	bl	8007b80 <SPI_Timer_Status>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f2      	bne.n	8007ce0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	2bfe      	cmp	r3, #254	@ 0xfe
 8007cfe:	d001      	beq.n	8007d04 <rcvr_datablock+0x34>
 8007d00:	2300      	movs	r3, #0
 8007d02:	e00a      	b.n	8007d1a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff ff66 	bl	8007bd8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007d0c:	20ff      	movs	r0, #255	@ 0xff
 8007d0e:	f7ff ff4d 	bl	8007bac <xchg_spi>
 8007d12:	20ff      	movs	r0, #255	@ 0xff
 8007d14:	f7ff ff4a 	bl	8007bac <xchg_spi>

	return 1;						/* Function succeeded */
 8007d18:	2301      	movs	r3, #1
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007d2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007d32:	f7ff ff81 	bl	8007c38 <wait_ready>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <xmit_datablock+0x1e>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e01e      	b.n	8007d7e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff ff32 	bl	8007bac <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	2bfd      	cmp	r3, #253	@ 0xfd
 8007d4c:	d016      	beq.n	8007d7c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007d4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff ff5c 	bl	8007c10 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007d58:	20ff      	movs	r0, #255	@ 0xff
 8007d5a:	f7ff ff27 	bl	8007bac <xchg_spi>
 8007d5e:	20ff      	movs	r0, #255	@ 0xff
 8007d60:	f7ff ff24 	bl	8007bac <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007d64:	20ff      	movs	r0, #255	@ 0xff
 8007d66:	f7ff ff21 	bl	8007bac <xchg_spi>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	f003 031f 	and.w	r3, r3, #31
 8007d74:	2b05      	cmp	r3, #5
 8007d76:	d001      	beq.n	8007d7c <xmit_datablock+0x5a>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e000      	b.n	8007d7e <xmit_datablock+0x5c>
	}
	return 1;
 8007d7c:	2301      	movs	r3, #1
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	6039      	str	r1, [r7, #0]
 8007d90:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	da0e      	bge.n	8007db8 <send_cmd+0x32>
		cmd &= 0x7F;
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007da2:	2100      	movs	r1, #0
 8007da4:	2037      	movs	r0, #55	@ 0x37
 8007da6:	f7ff ffee 	bl	8007d86 <send_cmd>
 8007daa:	4603      	mov	r3, r0
 8007dac:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d901      	bls.n	8007db8 <send_cmd+0x32>
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	e051      	b.n	8007e5c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	2b0c      	cmp	r3, #12
 8007dbc:	d008      	beq.n	8007dd0 <send_cmd+0x4a>
		despiselect();
 8007dbe:	f7ff ff5f 	bl	8007c80 <despiselect>
		if (!spiselect()) return 0xFF;
 8007dc2:	f7ff ff6b 	bl	8007c9c <spiselect>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <send_cmd+0x4a>
 8007dcc:	23ff      	movs	r3, #255	@ 0xff
 8007dce:	e045      	b.n	8007e5c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007dd0:	79fb      	ldrb	r3, [r7, #7]
 8007dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7ff fee7 	bl	8007bac <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	0e1b      	lsrs	r3, r3, #24
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff fee1 	bl	8007bac <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	0c1b      	lsrs	r3, r3, #16
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff fedb 	bl	8007bac <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	0a1b      	lsrs	r3, r3, #8
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff fed5 	bl	8007bac <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff fed0 	bl	8007bac <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <send_cmd+0x94>
 8007e16:	2395      	movs	r3, #149	@ 0x95
 8007e18:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d101      	bne.n	8007e24 <send_cmd+0x9e>
 8007e20:	2387      	movs	r3, #135	@ 0x87
 8007e22:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff fec0 	bl	8007bac <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b0c      	cmp	r3, #12
 8007e30:	d102      	bne.n	8007e38 <send_cmd+0xb2>
 8007e32:	20ff      	movs	r0, #255	@ 0xff
 8007e34:	f7ff feba 	bl	8007bac <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007e38:	230a      	movs	r3, #10
 8007e3a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007e3c:	20ff      	movs	r0, #255	@ 0xff
 8007e3e:	f7ff feb5 	bl	8007bac <xchg_spi>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da05      	bge.n	8007e5a <send_cmd+0xd4>
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	73fb      	strb	r3, [r7, #15]
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f0      	bne.n	8007e3c <send_cmd+0xb6>

	return res;							/* Return received response */
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007e64:	b590      	push	{r4, r7, lr}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <USER_SPI_initialize+0x14>
 8007e74:	2301      	movs	r3, #1
 8007e76:	e0d6      	b.n	8008026 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007e78:	4b6d      	ldr	r3, [pc, #436]	@ (8008030 <USER_SPI_initialize+0x1cc>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <USER_SPI_initialize+0x2a>
 8007e86:	4b6a      	ldr	r3, [pc, #424]	@ (8008030 <USER_SPI_initialize+0x1cc>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	e0cb      	b.n	8008026 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007e8e:	4b69      	ldr	r3, [pc, #420]	@ (8008034 <USER_SPI_initialize+0x1d0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007e98:	4b66      	ldr	r3, [pc, #408]	@ (8008034 <USER_SPI_initialize+0x1d0>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007ea0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007ea2:	230a      	movs	r3, #10
 8007ea4:	73fb      	strb	r3, [r7, #15]
 8007ea6:	e005      	b.n	8007eb4 <USER_SPI_initialize+0x50>
 8007ea8:	20ff      	movs	r0, #255	@ 0xff
 8007eaa:	f7ff fe7f 	bl	8007bac <xchg_spi>
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	73fb      	strb	r3, [r7, #15]
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1f6      	bne.n	8007ea8 <USER_SPI_initialize+0x44>

	ty = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	f7ff ff60 	bl	8007d86 <send_cmd>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	f040 808b 	bne.w	8007fe4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007ece:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007ed2:	f7ff fe41 	bl	8007b58 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007ed6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007eda:	2008      	movs	r0, #8
 8007edc:	f7ff ff53 	bl	8007d86 <send_cmd>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d151      	bne.n	8007f8a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
 8007eea:	e00d      	b.n	8007f08 <USER_SPI_initialize+0xa4>
 8007eec:	7bfc      	ldrb	r4, [r7, #15]
 8007eee:	20ff      	movs	r0, #255	@ 0xff
 8007ef0:	f7ff fe5c 	bl	8007bac <xchg_spi>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f104 0310 	add.w	r3, r4, #16
 8007efc:	443b      	add	r3, r7
 8007efe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	3301      	adds	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d9ee      	bls.n	8007eec <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007f0e:	7abb      	ldrb	r3, [r7, #10]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d167      	bne.n	8007fe4 <USER_SPI_initialize+0x180>
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	2baa      	cmp	r3, #170	@ 0xaa
 8007f18:	d164      	bne.n	8007fe4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007f1a:	bf00      	nop
 8007f1c:	f7ff fe30 	bl	8007b80 <SPI_Timer_Status>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d007      	beq.n	8007f36 <USER_SPI_initialize+0xd2>
 8007f26:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007f2a:	20a9      	movs	r0, #169	@ 0xa9
 8007f2c:	f7ff ff2b 	bl	8007d86 <send_cmd>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f2      	bne.n	8007f1c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007f36:	f7ff fe23 	bl	8007b80 <SPI_Timer_Status>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d051      	beq.n	8007fe4 <USER_SPI_initialize+0x180>
 8007f40:	2100      	movs	r1, #0
 8007f42:	203a      	movs	r0, #58	@ 0x3a
 8007f44:	f7ff ff1f 	bl	8007d86 <send_cmd>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d14a      	bne.n	8007fe4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
 8007f52:	e00d      	b.n	8007f70 <USER_SPI_initialize+0x10c>
 8007f54:	7bfc      	ldrb	r4, [r7, #15]
 8007f56:	20ff      	movs	r0, #255	@ 0xff
 8007f58:	f7ff fe28 	bl	8007bac <xchg_spi>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f104 0310 	add.w	r3, r4, #16
 8007f64:	443b      	add	r3, r7
 8007f66:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	73fb      	strb	r3, [r7, #15]
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d9ee      	bls.n	8007f54 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007f76:	7a3b      	ldrb	r3, [r7, #8]
 8007f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <USER_SPI_initialize+0x120>
 8007f80:	230c      	movs	r3, #12
 8007f82:	e000      	b.n	8007f86 <USER_SPI_initialize+0x122>
 8007f84:	2304      	movs	r3, #4
 8007f86:	737b      	strb	r3, [r7, #13]
 8007f88:	e02c      	b.n	8007fe4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	20a9      	movs	r0, #169	@ 0xa9
 8007f8e:	f7ff fefa 	bl	8007d86 <send_cmd>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d804      	bhi.n	8007fa2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007f98:	2302      	movs	r3, #2
 8007f9a:	737b      	strb	r3, [r7, #13]
 8007f9c:	23a9      	movs	r3, #169	@ 0xa9
 8007f9e:	73bb      	strb	r3, [r7, #14]
 8007fa0:	e003      	b.n	8007faa <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	737b      	strb	r3, [r7, #13]
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007faa:	bf00      	nop
 8007fac:	f7ff fde8 	bl	8007b80 <SPI_Timer_Status>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d007      	beq.n	8007fc6 <USER_SPI_initialize+0x162>
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	2100      	movs	r1, #0
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff fee3 	bl	8007d86 <send_cmd>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f2      	bne.n	8007fac <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007fc6:	f7ff fddb 	bl	8007b80 <SPI_Timer_Status>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <USER_SPI_initialize+0x17c>
 8007fd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007fd4:	2010      	movs	r0, #16
 8007fd6:	f7ff fed6 	bl	8007d86 <send_cmd>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <USER_SPI_initialize+0x180>
				ty = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007fe4:	4a14      	ldr	r2, [pc, #80]	@ (8008038 <USER_SPI_initialize+0x1d4>)
 8007fe6:	7b7b      	ldrb	r3, [r7, #13]
 8007fe8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007fea:	f7ff fe49 	bl	8007c80 <despiselect>

	if (ty) {			/* OK */
 8007fee:	7b7b      	ldrb	r3, [r7, #13]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d012      	beq.n	800801a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8008034 <USER_SPI_initialize+0x1d0>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8008034 <USER_SPI_initialize+0x1d0>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0210 	orr.w	r2, r2, #16
 8008006:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008008:	4b09      	ldr	r3, [pc, #36]	@ (8008030 <USER_SPI_initialize+0x1cc>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	b2db      	uxtb	r3, r3
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	b2da      	uxtb	r2, r3
 8008014:	4b06      	ldr	r3, [pc, #24]	@ (8008030 <USER_SPI_initialize+0x1cc>)
 8008016:	701a      	strb	r2, [r3, #0]
 8008018:	e002      	b.n	8008020 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800801a:	4b05      	ldr	r3, [pc, #20]	@ (8008030 <USER_SPI_initialize+0x1cc>)
 800801c:	2201      	movs	r2, #1
 800801e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008020:	4b03      	ldr	r3, [pc, #12]	@ (8008030 <USER_SPI_initialize+0x1cc>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	b2db      	uxtb	r3, r3
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	bd90      	pop	{r4, r7, pc}
 800802e:	bf00      	nop
 8008030:	20000040 	.word	0x20000040
 8008034:	2000027c 	.word	0x2000027c
 8008038:	20000995 	.word	0x20000995

0800803c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USER_SPI_status+0x14>
 800804c:	2301      	movs	r3, #1
 800804e:	e002      	b.n	8008056 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008050:	4b04      	ldr	r3, [pc, #16]	@ (8008064 <USER_SPI_status+0x28>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	b2db      	uxtb	r3, r3
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20000040 	.word	0x20000040

08008068 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <USER_SPI_read+0x1c>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <USER_SPI_read+0x20>
 8008084:	2304      	movs	r3, #4
 8008086:	e04d      	b.n	8008124 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008088:	4b28      	ldr	r3, [pc, #160]	@ (800812c <USER_SPI_read+0xc4>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <USER_SPI_read+0x32>
 8008096:	2303      	movs	r3, #3
 8008098:	e044      	b.n	8008124 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800809a:	4b25      	ldr	r3, [pc, #148]	@ (8008130 <USER_SPI_read+0xc8>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	f003 0308 	and.w	r3, r3, #8
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d102      	bne.n	80080ac <USER_SPI_read+0x44>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	025b      	lsls	r3, r3, #9
 80080aa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d111      	bne.n	80080d6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	2011      	movs	r0, #17
 80080b6:	f7ff fe66 	bl	8007d86 <send_cmd>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d129      	bne.n	8008114 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80080c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80080c4:	68b8      	ldr	r0, [r7, #8]
 80080c6:	f7ff fe03 	bl	8007cd0 <rcvr_datablock>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d021      	beq.n	8008114 <USER_SPI_read+0xac>
			count = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	603b      	str	r3, [r7, #0]
 80080d4:	e01e      	b.n	8008114 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	2012      	movs	r0, #18
 80080da:	f7ff fe54 	bl	8007d86 <send_cmd>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d117      	bne.n	8008114 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80080e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80080e8:	68b8      	ldr	r0, [r7, #8]
 80080ea:	f7ff fdf1 	bl	8007cd0 <rcvr_datablock>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <USER_SPI_read+0xa2>
				buff += 512;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80080fa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	3b01      	subs	r3, #1
 8008100:	603b      	str	r3, [r7, #0]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1ed      	bne.n	80080e4 <USER_SPI_read+0x7c>
 8008108:	e000      	b.n	800810c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800810a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800810c:	2100      	movs	r1, #0
 800810e:	200c      	movs	r0, #12
 8008110:	f7ff fe39 	bl	8007d86 <send_cmd>
		}
	}
	despiselect();
 8008114:	f7ff fdb4 	bl	8007c80 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	bf14      	ite	ne
 800811e:	2301      	movne	r3, #1
 8008120:	2300      	moveq	r3, #0
 8008122:	b2db      	uxtb	r3, r3
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20000040 	.word	0x20000040
 8008130:	20000995 	.word	0x20000995

08008134 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	607a      	str	r2, [r7, #4]
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	4603      	mov	r3, r0
 8008142:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d102      	bne.n	8008150 <USER_SPI_write+0x1c>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USER_SPI_write+0x20>
 8008150:	2304      	movs	r3, #4
 8008152:	e063      	b.n	800821c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008154:	4b33      	ldr	r3, [pc, #204]	@ (8008224 <USER_SPI_write+0xf0>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	b2db      	uxtb	r3, r3
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <USER_SPI_write+0x32>
 8008162:	2303      	movs	r3, #3
 8008164:	e05a      	b.n	800821c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008166:	4b2f      	ldr	r3, [pc, #188]	@ (8008224 <USER_SPI_write+0xf0>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <USER_SPI_write+0x44>
 8008174:	2302      	movs	r3, #2
 8008176:	e051      	b.n	800821c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008178:	4b2b      	ldr	r3, [pc, #172]	@ (8008228 <USER_SPI_write+0xf4>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	2b00      	cmp	r3, #0
 8008182:	d102      	bne.n	800818a <USER_SPI_write+0x56>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	025b      	lsls	r3, r3, #9
 8008188:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d110      	bne.n	80081b2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	2018      	movs	r0, #24
 8008194:	f7ff fdf7 	bl	8007d86 <send_cmd>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d136      	bne.n	800820c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800819e:	21fe      	movs	r1, #254	@ 0xfe
 80081a0:	68b8      	ldr	r0, [r7, #8]
 80081a2:	f7ff fdbe 	bl	8007d22 <xmit_datablock>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d02f      	beq.n	800820c <USER_SPI_write+0xd8>
			count = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	e02c      	b.n	800820c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80081b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008228 <USER_SPI_write+0xf4>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 0306 	and.w	r3, r3, #6
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <USER_SPI_write+0x92>
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	2097      	movs	r0, #151	@ 0x97
 80081c2:	f7ff fde0 	bl	8007d86 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	2019      	movs	r0, #25
 80081ca:	f7ff fddc 	bl	8007d86 <send_cmd>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d11b      	bne.n	800820c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80081d4:	21fc      	movs	r1, #252	@ 0xfc
 80081d6:	68b8      	ldr	r0, [r7, #8]
 80081d8:	f7ff fda3 	bl	8007d22 <xmit_datablock>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00a      	beq.n	80081f8 <USER_SPI_write+0xc4>
				buff += 512;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80081e8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1ee      	bne.n	80081d4 <USER_SPI_write+0xa0>
 80081f6:	e000      	b.n	80081fa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80081f8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80081fa:	21fd      	movs	r1, #253	@ 0xfd
 80081fc:	2000      	movs	r0, #0
 80081fe:	f7ff fd90 	bl	8007d22 <xmit_datablock>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <USER_SPI_write+0xd8>
 8008208:	2301      	movs	r3, #1
 800820a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800820c:	f7ff fd38 	bl	8007c80 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	bf14      	ite	ne
 8008216:	2301      	movne	r3, #1
 8008218:	2300      	moveq	r3, #0
 800821a:	b2db      	uxtb	r3, r3
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20000040 	.word	0x20000040
 8008228:	20000995 	.word	0x20000995

0800822c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08c      	sub	sp, #48	@ 0x30
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	603a      	str	r2, [r7, #0]
 8008236:	71fb      	strb	r3, [r7, #7]
 8008238:	460b      	mov	r3, r1
 800823a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <USER_SPI_ioctl+0x1a>
 8008242:	2304      	movs	r3, #4
 8008244:	e15a      	b.n	80084fc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008246:	4baf      	ldr	r3, [pc, #700]	@ (8008504 <USER_SPI_ioctl+0x2d8>)
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <USER_SPI_ioctl+0x2c>
 8008254:	2303      	movs	r3, #3
 8008256:	e151      	b.n	80084fc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800825e:	79bb      	ldrb	r3, [r7, #6]
 8008260:	2b04      	cmp	r3, #4
 8008262:	f200 8136 	bhi.w	80084d2 <USER_SPI_ioctl+0x2a6>
 8008266:	a201      	add	r2, pc, #4	@ (adr r2, 800826c <USER_SPI_ioctl+0x40>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008281 	.word	0x08008281
 8008270:	08008295 	.word	0x08008295
 8008274:	080084d3 	.word	0x080084d3
 8008278:	08008341 	.word	0x08008341
 800827c:	08008437 	.word	0x08008437
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008280:	f7ff fd0c 	bl	8007c9c <spiselect>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8127 	beq.w	80084da <USER_SPI_ioctl+0x2ae>
 800828c:	2300      	movs	r3, #0
 800828e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008292:	e122      	b.n	80084da <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008294:	2100      	movs	r1, #0
 8008296:	2009      	movs	r0, #9
 8008298:	f7ff fd75 	bl	8007d86 <send_cmd>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f040 811d 	bne.w	80084de <USER_SPI_ioctl+0x2b2>
 80082a4:	f107 030c 	add.w	r3, r7, #12
 80082a8:	2110      	movs	r1, #16
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff fd10 	bl	8007cd0 <rcvr_datablock>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 8113 	beq.w	80084de <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80082b8:	7b3b      	ldrb	r3, [r7, #12]
 80082ba:	099b      	lsrs	r3, r3, #6
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d111      	bne.n	80082e6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80082c2:	7d7b      	ldrb	r3, [r7, #21]
 80082c4:	461a      	mov	r2, r3
 80082c6:	7d3b      	ldrb	r3, [r7, #20]
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	4413      	add	r3, r2
 80082cc:	461a      	mov	r2, r3
 80082ce:	7cfb      	ldrb	r3, [r7, #19]
 80082d0:	041b      	lsls	r3, r3, #16
 80082d2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80082d6:	4413      	add	r3, r2
 80082d8:	3301      	adds	r3, #1
 80082da:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	029a      	lsls	r2, r3, #10
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e028      	b.n	8008338 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80082e6:	7c7b      	ldrb	r3, [r7, #17]
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	7dbb      	ldrb	r3, [r7, #22]
 80082f0:	09db      	lsrs	r3, r3, #7
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	4413      	add	r3, r2
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	7d7b      	ldrb	r3, [r7, #21]
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	f003 0306 	and.w	r3, r3, #6
 8008302:	b2db      	uxtb	r3, r3
 8008304:	4413      	add	r3, r2
 8008306:	b2db      	uxtb	r3, r3
 8008308:	3302      	adds	r3, #2
 800830a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800830e:	7d3b      	ldrb	r3, [r7, #20]
 8008310:	099b      	lsrs	r3, r3, #6
 8008312:	b2db      	uxtb	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	7cfb      	ldrb	r3, [r7, #19]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	441a      	add	r2, r3
 800831c:	7cbb      	ldrb	r3, [r7, #18]
 800831e:	029b      	lsls	r3, r3, #10
 8008320:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008324:	4413      	add	r3, r2
 8008326:	3301      	adds	r3, #1
 8008328:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800832a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800832e:	3b09      	subs	r3, #9
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	409a      	lsls	r2, r3
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800833e:	e0ce      	b.n	80084de <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008340:	4b71      	ldr	r3, [pc, #452]	@ (8008508 <USER_SPI_ioctl+0x2dc>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d031      	beq.n	80083b0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800834c:	2100      	movs	r1, #0
 800834e:	208d      	movs	r0, #141	@ 0x8d
 8008350:	f7ff fd19 	bl	8007d86 <send_cmd>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 80c3 	bne.w	80084e2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800835c:	20ff      	movs	r0, #255	@ 0xff
 800835e:	f7ff fc25 	bl	8007bac <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008362:	f107 030c 	add.w	r3, r7, #12
 8008366:	2110      	movs	r1, #16
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff fcb1 	bl	8007cd0 <rcvr_datablock>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80b6 	beq.w	80084e2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008376:	2330      	movs	r3, #48	@ 0x30
 8008378:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800837c:	e007      	b.n	800838e <USER_SPI_ioctl+0x162>
 800837e:	20ff      	movs	r0, #255	@ 0xff
 8008380:	f7ff fc14 	bl	8007bac <xchg_spi>
 8008384:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008388:	3b01      	subs	r3, #1
 800838a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800838e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1f3      	bne.n	800837e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008396:	7dbb      	ldrb	r3, [r7, #22]
 8008398:	091b      	lsrs	r3, r3, #4
 800839a:	b2db      	uxtb	r3, r3
 800839c:	461a      	mov	r2, r3
 800839e:	2310      	movs	r3, #16
 80083a0:	fa03 f202 	lsl.w	r2, r3, r2
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80083ae:	e098      	b.n	80084e2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80083b0:	2100      	movs	r1, #0
 80083b2:	2009      	movs	r0, #9
 80083b4:	f7ff fce7 	bl	8007d86 <send_cmd>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 8091 	bne.w	80084e2 <USER_SPI_ioctl+0x2b6>
 80083c0:	f107 030c 	add.w	r3, r7, #12
 80083c4:	2110      	movs	r1, #16
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fc82 	bl	8007cd0 <rcvr_datablock>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8087 	beq.w	80084e2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80083d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008508 <USER_SPI_ioctl+0x2dc>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d012      	beq.n	8008406 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80083e0:	7dbb      	ldrb	r3, [r7, #22]
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80083e8:	7dfa      	ldrb	r2, [r7, #23]
 80083ea:	09d2      	lsrs	r2, r2, #7
 80083ec:	b2d2      	uxtb	r2, r2
 80083ee:	4413      	add	r3, r2
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	7e7b      	ldrb	r3, [r7, #25]
 80083f4:	099b      	lsrs	r3, r3, #6
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	3b01      	subs	r3, #1
 80083fa:	fa02 f303 	lsl.w	r3, r2, r3
 80083fe:	461a      	mov	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	e013      	b.n	800842e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008406:	7dbb      	ldrb	r3, [r7, #22]
 8008408:	109b      	asrs	r3, r3, #2
 800840a:	b29b      	uxth	r3, r3
 800840c:	f003 031f 	and.w	r3, r3, #31
 8008410:	3301      	adds	r3, #1
 8008412:	7dfa      	ldrb	r2, [r7, #23]
 8008414:	00d2      	lsls	r2, r2, #3
 8008416:	f002 0218 	and.w	r2, r2, #24
 800841a:	7df9      	ldrb	r1, [r7, #23]
 800841c:	0949      	lsrs	r1, r1, #5
 800841e:	b2c9      	uxtb	r1, r1
 8008420:	440a      	add	r2, r1
 8008422:	3201      	adds	r2, #1
 8008424:	fb02 f303 	mul.w	r3, r2, r3
 8008428:	461a      	mov	r2, r3
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008434:	e055      	b.n	80084e2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008436:	4b34      	ldr	r3, [pc, #208]	@ (8008508 <USER_SPI_ioctl+0x2dc>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	f003 0306 	and.w	r3, r3, #6
 800843e:	2b00      	cmp	r3, #0
 8008440:	d051      	beq.n	80084e6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008442:	f107 020c 	add.w	r2, r7, #12
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	210b      	movs	r1, #11
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff feee 	bl	800822c <USER_SPI_ioctl>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d149      	bne.n	80084ea <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008456:	7b3b      	ldrb	r3, [r7, #12]
 8008458:	099b      	lsrs	r3, r3, #6
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <USER_SPI_ioctl+0x23e>
 8008460:	7dbb      	ldrb	r3, [r7, #22]
 8008462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	d041      	beq.n	80084ee <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	623b      	str	r3, [r7, #32]
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800847a:	4b23      	ldr	r3, [pc, #140]	@ (8008508 <USER_SPI_ioctl+0x2dc>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	f003 0308 	and.w	r3, r3, #8
 8008482:	2b00      	cmp	r3, #0
 8008484:	d105      	bne.n	8008492 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008488:	025b      	lsls	r3, r3, #9
 800848a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	025b      	lsls	r3, r3, #9
 8008490:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008494:	2020      	movs	r0, #32
 8008496:	f7ff fc76 	bl	8007d86 <send_cmd>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d128      	bne.n	80084f2 <USER_SPI_ioctl+0x2c6>
 80084a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084a2:	2021      	movs	r0, #33	@ 0x21
 80084a4:	f7ff fc6f 	bl	8007d86 <send_cmd>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d121      	bne.n	80084f2 <USER_SPI_ioctl+0x2c6>
 80084ae:	2100      	movs	r1, #0
 80084b0:	2026      	movs	r0, #38	@ 0x26
 80084b2:	f7ff fc68 	bl	8007d86 <send_cmd>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d11a      	bne.n	80084f2 <USER_SPI_ioctl+0x2c6>
 80084bc:	f247 5030 	movw	r0, #30000	@ 0x7530
 80084c0:	f7ff fbba 	bl	8007c38 <wait_ready>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d013      	beq.n	80084f2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80084ca:	2300      	movs	r3, #0
 80084cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80084d0:	e00f      	b.n	80084f2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80084d2:	2304      	movs	r3, #4
 80084d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80084d8:	e00c      	b.n	80084f4 <USER_SPI_ioctl+0x2c8>
		break;
 80084da:	bf00      	nop
 80084dc:	e00a      	b.n	80084f4 <USER_SPI_ioctl+0x2c8>
		break;
 80084de:	bf00      	nop
 80084e0:	e008      	b.n	80084f4 <USER_SPI_ioctl+0x2c8>
		break;
 80084e2:	bf00      	nop
 80084e4:	e006      	b.n	80084f4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80084e6:	bf00      	nop
 80084e8:	e004      	b.n	80084f4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80084ea:	bf00      	nop
 80084ec:	e002      	b.n	80084f4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80084ee:	bf00      	nop
 80084f0:	e000      	b.n	80084f4 <USER_SPI_ioctl+0x2c8>
		break;
 80084f2:	bf00      	nop
	}

	despiselect();
 80084f4:	f7ff fbc4 	bl	8007c80 <despiselect>

	return res;
 80084f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3730      	adds	r7, #48	@ 0x30
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	20000040 	.word	0x20000040
 8008508:	20000995 	.word	0x20000995

0800850c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	4a08      	ldr	r2, [pc, #32]	@ (800853c <disk_status+0x30>)
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	79fa      	ldrb	r2, [r7, #7]
 8008524:	4905      	ldr	r1, [pc, #20]	@ (800853c <disk_status+0x30>)
 8008526:	440a      	add	r2, r1
 8008528:	7a12      	ldrb	r2, [r2, #8]
 800852a:	4610      	mov	r0, r2
 800852c:	4798      	blx	r3
 800852e:	4603      	mov	r3, r0
 8008530:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	200009c8 	.word	0x200009c8

08008540 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	4a0d      	ldr	r2, [pc, #52]	@ (8008588 <disk_initialize+0x48>)
 8008552:	5cd3      	ldrb	r3, [r2, r3]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d111      	bne.n	800857c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	4a0b      	ldr	r2, [pc, #44]	@ (8008588 <disk_initialize+0x48>)
 800855c:	2101      	movs	r1, #1
 800855e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	4a09      	ldr	r2, [pc, #36]	@ (8008588 <disk_initialize+0x48>)
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	79fa      	ldrb	r2, [r7, #7]
 800856e:	4906      	ldr	r1, [pc, #24]	@ (8008588 <disk_initialize+0x48>)
 8008570:	440a      	add	r2, r1
 8008572:	7a12      	ldrb	r2, [r2, #8]
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	200009c8 	.word	0x200009c8

0800858c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800858c:	b590      	push	{r4, r7, lr}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	4a0a      	ldr	r2, [pc, #40]	@ (80085c8 <disk_read+0x3c>)
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	689c      	ldr	r4, [r3, #8]
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4a07      	ldr	r2, [pc, #28]	@ (80085c8 <disk_read+0x3c>)
 80085ac:	4413      	add	r3, r2
 80085ae:	7a18      	ldrb	r0, [r3, #8]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	47a0      	blx	r4
 80085b8:	4603      	mov	r3, r0
 80085ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80085bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd90      	pop	{r4, r7, pc}
 80085c6:	bf00      	nop
 80085c8:	200009c8 	.word	0x200009c8

080085cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80085cc:	b590      	push	{r4, r7, lr}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	4a0a      	ldr	r2, [pc, #40]	@ (8008608 <disk_write+0x3c>)
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	68dc      	ldr	r4, [r3, #12]
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	4a07      	ldr	r2, [pc, #28]	@ (8008608 <disk_write+0x3c>)
 80085ec:	4413      	add	r3, r2
 80085ee:	7a18      	ldrb	r0, [r3, #8]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	47a0      	blx	r4
 80085f8:	4603      	mov	r3, r0
 80085fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	bd90      	pop	{r4, r7, pc}
 8008606:	bf00      	nop
 8008608:	200009c8 	.word	0x200009c8

0800860c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	603a      	str	r2, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
 8008618:	460b      	mov	r3, r1
 800861a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	4a09      	ldr	r2, [pc, #36]	@ (8008644 <disk_ioctl+0x38>)
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	79fa      	ldrb	r2, [r7, #7]
 800862a:	4906      	ldr	r1, [pc, #24]	@ (8008644 <disk_ioctl+0x38>)
 800862c:	440a      	add	r2, r1
 800862e:	7a10      	ldrb	r0, [r2, #8]
 8008630:	79b9      	ldrb	r1, [r7, #6]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	4798      	blx	r3
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]
  return res;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	200009c8 	.word	0x200009c8

08008648 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3301      	adds	r3, #1
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008658:	89fb      	ldrh	r3, [r7, #14]
 800865a:	021b      	lsls	r3, r3, #8
 800865c:	b21a      	sxth	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	b21b      	sxth	r3, r3
 8008664:	4313      	orrs	r3, r2
 8008666:	b21b      	sxth	r3, r3
 8008668:	81fb      	strh	r3, [r7, #14]
	return rv;
 800866a:	89fb      	ldrh	r3, [r7, #14]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3303      	adds	r3, #3
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	3202      	adds	r2, #2
 8008690:	7812      	ldrb	r2, [r2, #0]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	3201      	adds	r2, #1
 800869e:	7812      	ldrb	r2, [r2, #0]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	021b      	lsls	r3, r3, #8
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	7812      	ldrb	r2, [r2, #0]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80086b0:	68fb      	ldr	r3, [r7, #12]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	887a      	ldrh	r2, [r7, #2]
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	887b      	ldrh	r3, [r7, #2]
 80086d8:	0a1b      	lsrs	r3, r3, #8
 80086da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	887a      	ldrh	r2, [r7, #2]
 80086e4:	b2d2      	uxtb	r2, r2
 80086e6:	701a      	strb	r2, [r3, #0]
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	701a      	strb	r2, [r3, #0]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	607a      	str	r2, [r7, #4]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	b2d2      	uxtb	r2, r2
 800871a:	701a      	strb	r2, [r3, #0]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	0a1b      	lsrs	r3, r3, #8
 8008720:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	0a1b      	lsrs	r3, r3, #8
 8008732:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	607a      	str	r2, [r7, #4]
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00d      	beq.n	8008782 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	1c53      	adds	r3, r2, #1
 800876a:	613b      	str	r3, [r7, #16]
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	1c59      	adds	r1, r3, #1
 8008770:	6179      	str	r1, [r7, #20]
 8008772:	7812      	ldrb	r2, [r2, #0]
 8008774:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3b01      	subs	r3, #1
 800877a:	607b      	str	r3, [r7, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f1      	bne.n	8008766 <mem_cpy+0x1a>
	}
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800878e:	b480      	push	{r7}
 8008790:	b087      	sub	sp, #28
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	617a      	str	r2, [r7, #20]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f3      	bne.n	800879e <mem_set+0x10>
}
 80087b6:	bf00      	nop
 80087b8:	bf00      	nop
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80087c4:	b480      	push	{r7}
 80087c6:	b089      	sub	sp, #36	@ 0x24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	61fa      	str	r2, [r7, #28]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	4619      	mov	r1, r3
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	61ba      	str	r2, [r7, #24]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	1acb      	subs	r3, r1, r3
 80087f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	607b      	str	r3, [r7, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d002      	beq.n	8008804 <mem_cmp+0x40>
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0eb      	beq.n	80087dc <mem_cmp+0x18>

	return r;
 8008804:	697b      	ldr	r3, [r7, #20]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3724      	adds	r7, #36	@ 0x24
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800881c:	e002      	b.n	8008824 <chk_chr+0x12>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3301      	adds	r3, #1
 8008822:	607b      	str	r3, [r7, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d005      	beq.n	8008838 <chk_chr+0x26>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	4293      	cmp	r3, r2
 8008836:	d1f2      	bne.n	800881e <chk_chr+0xc>
	return *str;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	781b      	ldrb	r3, [r3, #0]
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008852:	2300      	movs	r3, #0
 8008854:	60bb      	str	r3, [r7, #8]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	e029      	b.n	80088b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800885c:	4a27      	ldr	r2, [pc, #156]	@ (80088fc <chk_lock+0xb4>)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	4413      	add	r3, r2
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d01d      	beq.n	80088a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800886a:	4a24      	ldr	r2, [pc, #144]	@ (80088fc <chk_lock+0xb4>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	4413      	add	r3, r2
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d116      	bne.n	80088aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800887c:	4a1f      	ldr	r2, [pc, #124]	@ (80088fc <chk_lock+0xb4>)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	011b      	lsls	r3, r3, #4
 8008882:	4413      	add	r3, r2
 8008884:	3304      	adds	r3, #4
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800888c:	429a      	cmp	r2, r3
 800888e:	d10c      	bne.n	80088aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008890:	4a1a      	ldr	r2, [pc, #104]	@ (80088fc <chk_lock+0xb4>)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	4413      	add	r3, r2
 8008898:	3308      	adds	r3, #8
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d102      	bne.n	80088aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80088a4:	e007      	b.n	80088b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80088a6:	2301      	movs	r3, #1
 80088a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d9d2      	bls.n	800885c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d109      	bne.n	80088d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <chk_lock+0x80>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d101      	bne.n	80088cc <chk_lock+0x84>
 80088c8:	2300      	movs	r3, #0
 80088ca:	e010      	b.n	80088ee <chk_lock+0xa6>
 80088cc:	2312      	movs	r3, #18
 80088ce:	e00e      	b.n	80088ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d108      	bne.n	80088e8 <chk_lock+0xa0>
 80088d6:	4a09      	ldr	r2, [pc, #36]	@ (80088fc <chk_lock+0xb4>)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	4413      	add	r3, r2
 80088de:	330c      	adds	r3, #12
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e6:	d101      	bne.n	80088ec <chk_lock+0xa4>
 80088e8:	2310      	movs	r3, #16
 80088ea:	e000      	b.n	80088ee <chk_lock+0xa6>
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	200009a8 	.word	0x200009a8

08008900 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008906:	2300      	movs	r3, #0
 8008908:	607b      	str	r3, [r7, #4]
 800890a:	e002      	b.n	8008912 <enq_lock+0x12>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	3301      	adds	r3, #1
 8008910:	607b      	str	r3, [r7, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d806      	bhi.n	8008926 <enq_lock+0x26>
 8008918:	4a09      	ldr	r2, [pc, #36]	@ (8008940 <enq_lock+0x40>)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	4413      	add	r3, r2
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1f2      	bne.n	800890c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b02      	cmp	r3, #2
 800892a:	bf14      	ite	ne
 800892c:	2301      	movne	r3, #1
 800892e:	2300      	moveq	r3, #0
 8008930:	b2db      	uxtb	r3, r3
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	200009a8 	.word	0x200009a8

08008944 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	e01f      	b.n	8008994 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008954:	4a41      	ldr	r2, [pc, #260]	@ (8008a5c <inc_lock+0x118>)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	4413      	add	r3, r2
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d113      	bne.n	800898e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008966:	4a3d      	ldr	r2, [pc, #244]	@ (8008a5c <inc_lock+0x118>)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	4413      	add	r3, r2
 800896e:	3304      	adds	r3, #4
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008976:	429a      	cmp	r2, r3
 8008978:	d109      	bne.n	800898e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800897a:	4a38      	ldr	r2, [pc, #224]	@ (8008a5c <inc_lock+0x118>)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	011b      	lsls	r3, r3, #4
 8008980:	4413      	add	r3, r2
 8008982:	3308      	adds	r3, #8
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800898a:	429a      	cmp	r2, r3
 800898c:	d006      	beq.n	800899c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3301      	adds	r3, #1
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d9dc      	bls.n	8008954 <inc_lock+0x10>
 800899a:	e000      	b.n	800899e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800899c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d132      	bne.n	8008a0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80089a4:	2300      	movs	r3, #0
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	e002      	b.n	80089b0 <inc_lock+0x6c>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3301      	adds	r3, #1
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d806      	bhi.n	80089c4 <inc_lock+0x80>
 80089b6:	4a29      	ldr	r2, [pc, #164]	@ (8008a5c <inc_lock+0x118>)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	011b      	lsls	r3, r3, #4
 80089bc:	4413      	add	r3, r2
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1f2      	bne.n	80089aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d101      	bne.n	80089ce <inc_lock+0x8a>
 80089ca:	2300      	movs	r3, #0
 80089cc:	e040      	b.n	8008a50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4922      	ldr	r1, [pc, #136]	@ (8008a5c <inc_lock+0x118>)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	440b      	add	r3, r1
 80089da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	491e      	ldr	r1, [pc, #120]	@ (8008a5c <inc_lock+0x118>)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	440b      	add	r3, r1
 80089e8:	3304      	adds	r3, #4
 80089ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	695a      	ldr	r2, [r3, #20]
 80089f0:	491a      	ldr	r1, [pc, #104]	@ (8008a5c <inc_lock+0x118>)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	440b      	add	r3, r1
 80089f8:	3308      	adds	r3, #8
 80089fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80089fc:	4a17      	ldr	r2, [pc, #92]	@ (8008a5c <inc_lock+0x118>)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	4413      	add	r3, r2
 8008a04:	330c      	adds	r3, #12
 8008a06:	2200      	movs	r2, #0
 8008a08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d009      	beq.n	8008a24 <inc_lock+0xe0>
 8008a10:	4a12      	ldr	r2, [pc, #72]	@ (8008a5c <inc_lock+0x118>)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	011b      	lsls	r3, r3, #4
 8008a16:	4413      	add	r3, r2
 8008a18:	330c      	adds	r3, #12
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <inc_lock+0xe0>
 8008a20:	2300      	movs	r3, #0
 8008a22:	e015      	b.n	8008a50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d108      	bne.n	8008a3c <inc_lock+0xf8>
 8008a2a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a5c <inc_lock+0x118>)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	4413      	add	r3, r2
 8008a32:	330c      	adds	r3, #12
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	e001      	b.n	8008a40 <inc_lock+0xfc>
 8008a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a40:	4906      	ldr	r1, [pc, #24]	@ (8008a5c <inc_lock+0x118>)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	011b      	lsls	r3, r3, #4
 8008a46:	440b      	add	r3, r1
 8008a48:	330c      	adds	r3, #12
 8008a4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3301      	adds	r3, #1
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	200009a8 	.word	0x200009a8

08008a60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	607b      	str	r3, [r7, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d825      	bhi.n	8008ac0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008a74:	4a17      	ldr	r2, [pc, #92]	@ (8008ad4 <dec_lock+0x74>)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	4413      	add	r3, r2
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008a82:	89fb      	ldrh	r3, [r7, #14]
 8008a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a88:	d101      	bne.n	8008a8e <dec_lock+0x2e>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008a8e:	89fb      	ldrh	r3, [r7, #14]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <dec_lock+0x3a>
 8008a94:	89fb      	ldrh	r3, [r7, #14]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8008ad4 <dec_lock+0x74>)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	4413      	add	r3, r2
 8008aa2:	330c      	adds	r3, #12
 8008aa4:	89fa      	ldrh	r2, [r7, #14]
 8008aa6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008aa8:	89fb      	ldrh	r3, [r7, #14]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d105      	bne.n	8008aba <dec_lock+0x5a>
 8008aae:	4a09      	ldr	r2, [pc, #36]	@ (8008ad4 <dec_lock+0x74>)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	011b      	lsls	r3, r3, #4
 8008ab4:	4413      	add	r3, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	737b      	strb	r3, [r7, #13]
 8008abe:	e001      	b.n	8008ac4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008ac4:	7b7b      	ldrb	r3, [r7, #13]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	200009a8 	.word	0x200009a8

08008ad8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e010      	b.n	8008b08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8008b1c <clear_lock+0x44>)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	4413      	add	r3, r2
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d105      	bne.n	8008b02 <clear_lock+0x2a>
 8008af6:	4a09      	ldr	r2, [pc, #36]	@ (8008b1c <clear_lock+0x44>)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	4413      	add	r3, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	3301      	adds	r3, #1
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d9eb      	bls.n	8008ae6 <clear_lock+0xe>
	}
}
 8008b0e:	bf00      	nop
 8008b10:	bf00      	nop
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	200009a8 	.word	0x200009a8

08008b20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	78db      	ldrb	r3, [r3, #3]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d034      	beq.n	8008b9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	7858      	ldrb	r0, [r3, #1]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b44:	2301      	movs	r3, #1
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	f7ff fd40 	bl	80085cc <disk_write>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	73fb      	strb	r3, [r7, #15]
 8008b56:	e022      	b.n	8008b9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	1ad2      	subs	r2, r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d217      	bcs.n	8008b9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	789b      	ldrb	r3, [r3, #2]
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	e010      	b.n	8008b98 <sync_window+0x78>
					wsect += fs->fsize;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	7858      	ldrb	r0, [r3, #1]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	f7ff fd1d 	bl	80085cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	613b      	str	r3, [r7, #16]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d8eb      	bhi.n	8008b76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d01b      	beq.n	8008bf8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff ffad 	bl	8008b20 <sync_window>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d113      	bne.n	8008bf8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	7858      	ldrb	r0, [r3, #1]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bda:	2301      	movs	r3, #1
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	f7ff fcd5 	bl	800858c <disk_read>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d004      	beq.n	8008bf2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff ff87 	bl	8008b20 <sync_window>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d158      	bne.n	8008cce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d148      	bne.n	8008cb6 <sync_fs+0xb2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	791b      	ldrb	r3, [r3, #4]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d144      	bne.n	8008cb6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3330      	adds	r3, #48	@ 0x30
 8008c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c34:	2100      	movs	r1, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7ff fda9 	bl	800878e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3330      	adds	r3, #48	@ 0x30
 8008c40:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008c44:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff fd38 	bl	80086be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3330      	adds	r3, #48	@ 0x30
 8008c52:	4921      	ldr	r1, [pc, #132]	@ (8008cd8 <sync_fs+0xd4>)
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff fd4d 	bl	80086f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3330      	adds	r3, #48	@ 0x30
 8008c5e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008c62:	491e      	ldr	r1, [pc, #120]	@ (8008cdc <sync_fs+0xd8>)
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fd45 	bl	80086f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	3330      	adds	r3, #48	@ 0x30
 8008c6e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f7ff fd3b 	bl	80086f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3330      	adds	r3, #48	@ 0x30
 8008c82:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	f7ff fd31 	bl	80086f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	7858      	ldrb	r0, [r3, #1]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008caa:	2301      	movs	r3, #1
 8008cac:	f7ff fc8e 	bl	80085cc <disk_write>
			fs->fsi_flag = 0;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	785b      	ldrb	r3, [r3, #1]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff fca4 	bl	800860c <disk_ioctl>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <sync_fs+0xca>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	41615252 	.word	0x41615252
 8008cdc:	61417272 	.word	0x61417272

08008ce0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	3b02      	subs	r3, #2
 8008cee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	3b02      	subs	r3, #2
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d301      	bcc.n	8008d00 <clust2sect+0x20>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e008      	b.n	8008d12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	895b      	ldrh	r3, [r3, #10]
 8008d04:	461a      	mov	r2, r3
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	fb03 f202 	mul.w	r2, r3, r2
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d10:	4413      	add	r3, r2
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b086      	sub	sp, #24
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d904      	bls.n	8008d3e <get_fat+0x20>
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d302      	bcc.n	8008d44 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008d3e:	2301      	movs	r3, #1
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	e08e      	b.n	8008e62 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008d44:	f04f 33ff 	mov.w	r3, #4294967295
 8008d48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d061      	beq.n	8008e16 <get_fat+0xf8>
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	dc7b      	bgt.n	8008e4e <get_fat+0x130>
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d002      	beq.n	8008d60 <get_fat+0x42>
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d041      	beq.n	8008de2 <get_fat+0xc4>
 8008d5e:	e076      	b.n	8008e4e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	085b      	lsrs	r3, r3, #1
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	6a1a      	ldr	r2, [r3, #32]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	0a5b      	lsrs	r3, r3, #9
 8008d76:	4413      	add	r3, r2
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6938      	ldr	r0, [r7, #16]
 8008d7c:	f7ff ff14 	bl	8008ba8 <move_window>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d166      	bne.n	8008e54 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	60fa      	str	r2, [r7, #12]
 8008d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4413      	add	r3, r2
 8008d94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6a1a      	ldr	r2, [r3, #32]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	0a5b      	lsrs	r3, r3, #9
 8008da2:	4413      	add	r3, r2
 8008da4:	4619      	mov	r1, r3
 8008da6:	6938      	ldr	r0, [r7, #16]
 8008da8:	f7ff fefe 	bl	8008ba8 <move_window>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d152      	bne.n	8008e58 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <get_fat+0xba>
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	091b      	lsrs	r3, r3, #4
 8008dd6:	e002      	b.n	8008dde <get_fat+0xc0>
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dde:	617b      	str	r3, [r7, #20]
			break;
 8008de0:	e03f      	b.n	8008e62 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	6a1a      	ldr	r2, [r3, #32]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	0a1b      	lsrs	r3, r3, #8
 8008dea:	4413      	add	r3, r2
 8008dec:	4619      	mov	r1, r3
 8008dee:	6938      	ldr	r0, [r7, #16]
 8008df0:	f7ff feda 	bl	8008ba8 <move_window>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d130      	bne.n	8008e5c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008e08:	4413      	add	r3, r2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fc1c 	bl	8008648 <ld_word>
 8008e10:	4603      	mov	r3, r0
 8008e12:	617b      	str	r3, [r7, #20]
			break;
 8008e14:	e025      	b.n	8008e62 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6a1a      	ldr	r2, [r3, #32]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	09db      	lsrs	r3, r3, #7
 8008e1e:	4413      	add	r3, r2
 8008e20:	4619      	mov	r1, r3
 8008e22:	6938      	ldr	r0, [r7, #16]
 8008e24:	f7ff fec0 	bl	8008ba8 <move_window>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d118      	bne.n	8008e60 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008e3c:	4413      	add	r3, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fc1a 	bl	8008678 <ld_dword>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008e4a:	617b      	str	r3, [r7, #20]
			break;
 8008e4c:	e009      	b.n	8008e62 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008e4e:	2301      	movs	r3, #1
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	e006      	b.n	8008e62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e54:	bf00      	nop
 8008e56:	e004      	b.n	8008e62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e58:	bf00      	nop
 8008e5a:	e002      	b.n	8008e62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e5c:	bf00      	nop
 8008e5e:	e000      	b.n	8008e62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008e60:	bf00      	nop
		}
	}

	return val;
 8008e62:	697b      	ldr	r3, [r7, #20]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008e6c:	b590      	push	{r4, r7, lr}
 8008e6e:	b089      	sub	sp, #36	@ 0x24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	f240 80d9 	bls.w	8009036 <put_fat+0x1ca>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	f080 80d3 	bcs.w	8009036 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	f000 8096 	beq.w	8008fc6 <put_fat+0x15a>
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	f300 80cb 	bgt.w	8009036 <put_fat+0x1ca>
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d002      	beq.n	8008eaa <put_fat+0x3e>
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d06e      	beq.n	8008f86 <put_fat+0x11a>
 8008ea8:	e0c5      	b.n	8009036 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	61bb      	str	r3, [r7, #24]
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	085b      	lsrs	r3, r3, #1
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a1a      	ldr	r2, [r3, #32]
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	0a5b      	lsrs	r3, r3, #9
 8008ec0:	4413      	add	r3, r2
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f7ff fe6f 	bl	8008ba8 <move_window>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ece:	7ffb      	ldrb	r3, [r7, #31]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f040 80a9 	bne.w	8009028 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	1c59      	adds	r1, r3, #1
 8008ee0:	61b9      	str	r1, [r7, #24]
 8008ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee6:	4413      	add	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00d      	beq.n	8008f10 <put_fat+0xa4>
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	b25b      	sxtb	r3, r3
 8008efa:	f003 030f 	and.w	r3, r3, #15
 8008efe:	b25a      	sxtb	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	b25b      	sxtb	r3, r3
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	e001      	b.n	8008f14 <put_fat+0xa8>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6a1a      	ldr	r2, [r3, #32]
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	0a5b      	lsrs	r3, r3, #9
 8008f26:	4413      	add	r3, r2
 8008f28:	4619      	mov	r1, r3
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f7ff fe3c 	bl	8008ba8 <move_window>
 8008f30:	4603      	mov	r3, r0
 8008f32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f34:	7ffb      	ldrb	r3, [r7, #31]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d178      	bne.n	800902c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f46:	4413      	add	r3, r2
 8008f48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <put_fat+0xf0>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	091b      	lsrs	r3, r3, #4
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	e00e      	b.n	8008f7a <put_fat+0x10e>
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	b25b      	sxtb	r3, r3
 8008f62:	f023 030f 	bic.w	r3, r3, #15
 8008f66:	b25a      	sxtb	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	0a1b      	lsrs	r3, r3, #8
 8008f6c:	b25b      	sxtb	r3, r3
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	b25b      	sxtb	r3, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b25b      	sxtb	r3, r3
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	70da      	strb	r2, [r3, #3]
			break;
 8008f84:	e057      	b.n	8009036 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a1a      	ldr	r2, [r3, #32]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
 8008f8e:	4413      	add	r3, r2
 8008f90:	4619      	mov	r1, r3
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7ff fe08 	bl	8008ba8 <move_window>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f9c:	7ffb      	ldrb	r3, [r7, #31]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d146      	bne.n	8009030 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	005b      	lsls	r3, r3, #1
 8008fac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008fb0:	4413      	add	r3, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	b292      	uxth	r2, r2
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff fb80 	bl	80086be <st_word>
			fs->wflag = 1;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	70da      	strb	r2, [r3, #3]
			break;
 8008fc4:	e037      	b.n	8009036 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6a1a      	ldr	r2, [r3, #32]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	09db      	lsrs	r3, r3, #7
 8008fce:	4413      	add	r3, r2
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f7ff fde8 	bl	8008ba8 <move_window>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fdc:	7ffb      	ldrb	r3, [r7, #31]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d128      	bne.n	8009034 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008ff6:	4413      	add	r3, r2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fb3d 	bl	8008678 <ld_dword>
 8008ffe:	4603      	mov	r3, r0
 8009000:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009004:	4323      	orrs	r3, r4
 8009006:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009016:	4413      	add	r3, r2
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff fb6a 	bl	80086f4 <st_dword>
			fs->wflag = 1;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2201      	movs	r2, #1
 8009024:	70da      	strb	r2, [r3, #3]
			break;
 8009026:	e006      	b.n	8009036 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009028:	bf00      	nop
 800902a:	e004      	b.n	8009036 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800902c:	bf00      	nop
 800902e:	e002      	b.n	8009036 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009030:	bf00      	nop
 8009032:	e000      	b.n	8009036 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009034:	bf00      	nop
		}
	}
	return res;
 8009036:	7ffb      	ldrb	r3, [r7, #31]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3724      	adds	r7, #36	@ 0x24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd90      	pop	{r4, r7, pc}

08009040 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d904      	bls.n	8009066 <remove_chain+0x26>
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	429a      	cmp	r2, r3
 8009064:	d301      	bcc.n	800906a <remove_chain+0x2a>
 8009066:	2302      	movs	r3, #2
 8009068:	e04b      	b.n	8009102 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00c      	beq.n	800908a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009070:	f04f 32ff 	mov.w	r2, #4294967295
 8009074:	6879      	ldr	r1, [r7, #4]
 8009076:	69b8      	ldr	r0, [r7, #24]
 8009078:	f7ff fef8 	bl	8008e6c <put_fat>
 800907c:	4603      	mov	r3, r0
 800907e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009080:	7ffb      	ldrb	r3, [r7, #31]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <remove_chain+0x4a>
 8009086:	7ffb      	ldrb	r3, [r7, #31]
 8009088:	e03b      	b.n	8009102 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800908a:	68b9      	ldr	r1, [r7, #8]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff fe46 	bl	8008d1e <get_fat>
 8009092:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d031      	beq.n	80090fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d101      	bne.n	80090a4 <remove_chain+0x64>
 80090a0:	2302      	movs	r3, #2
 80090a2:	e02e      	b.n	8009102 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090aa:	d101      	bne.n	80090b0 <remove_chain+0x70>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e028      	b.n	8009102 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80090b0:	2200      	movs	r2, #0
 80090b2:	68b9      	ldr	r1, [r7, #8]
 80090b4:	69b8      	ldr	r0, [r7, #24]
 80090b6:	f7ff fed9 	bl	8008e6c <put_fat>
 80090ba:	4603      	mov	r3, r0
 80090bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80090be:	7ffb      	ldrb	r3, [r7, #31]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <remove_chain+0x88>
 80090c4:	7ffb      	ldrb	r3, [r7, #31]
 80090c6:	e01c      	b.n	8009102 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	691a      	ldr	r2, [r3, #16]
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	3b02      	subs	r3, #2
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d20b      	bcs.n	80090ee <remove_chain+0xae>
			fs->free_clst++;
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	791b      	ldrb	r3, [r3, #4]
 80090e4:	f043 0301 	orr.w	r3, r3, #1
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d3c6      	bcc.n	800908a <remove_chain+0x4a>
 80090fc:	e000      	b.n	8009100 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80090fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3720      	adds	r7, #32
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b088      	sub	sp, #32
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10d      	bne.n	800913c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <create_chain+0x2c>
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	429a      	cmp	r2, r3
 8009134:	d31b      	bcc.n	800916e <create_chain+0x64>
 8009136:	2301      	movs	r3, #1
 8009138:	61bb      	str	r3, [r7, #24]
 800913a:	e018      	b.n	800916e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff fded 	bl	8008d1e <get_fat>
 8009144:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d801      	bhi.n	8009150 <create_chain+0x46>
 800914c:	2301      	movs	r3, #1
 800914e:	e070      	b.n	8009232 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d101      	bne.n	800915c <create_chain+0x52>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	e06a      	b.n	8009232 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	429a      	cmp	r2, r3
 8009164:	d201      	bcs.n	800916a <create_chain+0x60>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	e063      	b.n	8009232 <create_chain+0x128>
		scl = clst;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	3301      	adds	r3, #1
 8009176:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	69fa      	ldr	r2, [r7, #28]
 800917e:	429a      	cmp	r2, r3
 8009180:	d307      	bcc.n	8009192 <create_chain+0x88>
				ncl = 2;
 8009182:	2302      	movs	r3, #2
 8009184:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	429a      	cmp	r2, r3
 800918c:	d901      	bls.n	8009192 <create_chain+0x88>
 800918e:	2300      	movs	r3, #0
 8009190:	e04f      	b.n	8009232 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009192:	69f9      	ldr	r1, [r7, #28]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff fdc2 	bl	8008d1e <get_fat>
 800919a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00e      	beq.n	80091c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d003      	beq.n	80091b0 <create_chain+0xa6>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ae:	d101      	bne.n	80091b4 <create_chain+0xaa>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	e03e      	b.n	8009232 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80091b4:	69fa      	ldr	r2, [r7, #28]
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d1da      	bne.n	8009172 <create_chain+0x68>
 80091bc:	2300      	movs	r3, #0
 80091be:	e038      	b.n	8009232 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80091c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295
 80091c6:	69f9      	ldr	r1, [r7, #28]
 80091c8:	6938      	ldr	r0, [r7, #16]
 80091ca:	f7ff fe4f 	bl	8008e6c <put_fat>
 80091ce:	4603      	mov	r3, r0
 80091d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d109      	bne.n	80091ec <create_chain+0xe2>
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d006      	beq.n	80091ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6938      	ldr	r0, [r7, #16]
 80091e4:	f7ff fe42 	bl	8008e6c <put_fat>
 80091e8:	4603      	mov	r3, r0
 80091ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d116      	bne.n	8009220 <create_chain+0x116>
		fs->last_clst = ncl;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	69fa      	ldr	r2, [r7, #28]
 80091f6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	691a      	ldr	r2, [r3, #16]
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	3b02      	subs	r3, #2
 8009202:	429a      	cmp	r2, r3
 8009204:	d804      	bhi.n	8009210 <create_chain+0x106>
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	1e5a      	subs	r2, r3, #1
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	791b      	ldrb	r3, [r3, #4]
 8009214:	f043 0301 	orr.w	r3, r3, #1
 8009218:	b2da      	uxtb	r2, r3
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	711a      	strb	r2, [r3, #4]
 800921e:	e007      	b.n	8009230 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d102      	bne.n	800922c <create_chain+0x122>
 8009226:	f04f 33ff 	mov.w	r3, #4294967295
 800922a:	e000      	b.n	800922e <create_chain+0x124>
 800922c:	2301      	movs	r3, #1
 800922e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009230:	69fb      	ldr	r3, [r7, #28]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3720      	adds	r7, #32
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800923a:	b480      	push	{r7}
 800923c:	b087      	sub	sp, #28
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924e:	3304      	adds	r3, #4
 8009250:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	0a5b      	lsrs	r3, r3, #9
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	8952      	ldrh	r2, [r2, #10]
 800925a:	fbb3 f3f2 	udiv	r3, r3, r2
 800925e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	1d1a      	adds	r2, r3, #4
 8009264:	613a      	str	r2, [r7, #16]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <clmt_clust+0x3a>
 8009270:	2300      	movs	r3, #0
 8009272:	e010      	b.n	8009296 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	429a      	cmp	r2, r3
 800927a:	d307      	bcc.n	800928c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	3304      	adds	r3, #4
 8009288:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800928a:	e7e9      	b.n	8009260 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800928c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	4413      	add	r3, r2
}
 8009296:	4618      	mov	r0, r3
 8009298:	371c      	adds	r7, #28
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b086      	sub	sp, #24
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092b8:	d204      	bcs.n	80092c4 <dir_sdi+0x22>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	f003 031f 	and.w	r3, r3, #31
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80092c4:	2302      	movs	r3, #2
 80092c6:	e063      	b.n	8009390 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d106      	bne.n	80092e8 <dir_sdi+0x46>
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d902      	bls.n	80092e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10c      	bne.n	8009308 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	095b      	lsrs	r3, r3, #5
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	8912      	ldrh	r2, [r2, #8]
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d301      	bcc.n	80092fe <dir_sdi+0x5c>
 80092fa:	2302      	movs	r3, #2
 80092fc:	e048      	b.n	8009390 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	61da      	str	r2, [r3, #28]
 8009306:	e029      	b.n	800935c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	895b      	ldrh	r3, [r3, #10]
 800930c:	025b      	lsls	r3, r3, #9
 800930e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009310:	e019      	b.n	8009346 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6979      	ldr	r1, [r7, #20]
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff fd01 	bl	8008d1e <get_fat>
 800931c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009324:	d101      	bne.n	800932a <dir_sdi+0x88>
 8009326:	2301      	movs	r3, #1
 8009328:	e032      	b.n	8009390 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d904      	bls.n	800933a <dir_sdi+0x98>
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	429a      	cmp	r2, r3
 8009338:	d301      	bcc.n	800933e <dir_sdi+0x9c>
 800933a:	2302      	movs	r3, #2
 800933c:	e028      	b.n	8009390 <dir_sdi+0xee>
			ofs -= csz;
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	429a      	cmp	r2, r3
 800934c:	d2e1      	bcs.n	8009312 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800934e:	6979      	ldr	r1, [r7, #20]
 8009350:	6938      	ldr	r0, [r7, #16]
 8009352:	f7ff fcc5 	bl	8008ce0 <clust2sect>
 8009356:	4602      	mov	r2, r0
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <dir_sdi+0xcc>
 800936a:	2302      	movs	r3, #2
 800936c:	e010      	b.n	8009390 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	69da      	ldr	r2, [r3, #28]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	0a5b      	lsrs	r3, r3, #9
 8009376:	441a      	add	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009388:	441a      	add	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	3320      	adds	r3, #32
 80093ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d003      	beq.n	80093c0 <dir_next+0x28>
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093be:	d301      	bcc.n	80093c4 <dir_next+0x2c>
 80093c0:	2304      	movs	r3, #4
 80093c2:	e0aa      	b.n	800951a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f040 8098 	bne.w	8009500 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10b      	bne.n	80093fa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	095b      	lsrs	r3, r3, #5
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	8912      	ldrh	r2, [r2, #8]
 80093ea:	4293      	cmp	r3, r2
 80093ec:	f0c0 8088 	bcc.w	8009500 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	61da      	str	r2, [r3, #28]
 80093f6:	2304      	movs	r3, #4
 80093f8:	e08f      	b.n	800951a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	0a5b      	lsrs	r3, r3, #9
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	8952      	ldrh	r2, [r2, #10]
 8009402:	3a01      	subs	r2, #1
 8009404:	4013      	ands	r3, r2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d17a      	bne.n	8009500 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	4619      	mov	r1, r3
 8009412:	4610      	mov	r0, r2
 8009414:	f7ff fc83 	bl	8008d1e <get_fat>
 8009418:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d801      	bhi.n	8009424 <dir_next+0x8c>
 8009420:	2302      	movs	r3, #2
 8009422:	e07a      	b.n	800951a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942a:	d101      	bne.n	8009430 <dir_next+0x98>
 800942c:	2301      	movs	r3, #1
 800942e:	e074      	b.n	800951a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	429a      	cmp	r2, r3
 8009438:	d358      	bcc.n	80094ec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	61da      	str	r2, [r3, #28]
 8009446:	2304      	movs	r3, #4
 8009448:	e067      	b.n	800951a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f7ff fe59 	bl	800910a <create_chain>
 8009458:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <dir_next+0xcc>
 8009460:	2307      	movs	r3, #7
 8009462:	e05a      	b.n	800951a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d101      	bne.n	800946e <dir_next+0xd6>
 800946a:	2302      	movs	r3, #2
 800946c:	e055      	b.n	800951a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009474:	d101      	bne.n	800947a <dir_next+0xe2>
 8009476:	2301      	movs	r3, #1
 8009478:	e04f      	b.n	800951a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff fb50 	bl	8008b20 <sync_window>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <dir_next+0xf2>
 8009486:	2301      	movs	r3, #1
 8009488:	e047      	b.n	800951a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3330      	adds	r3, #48	@ 0x30
 800948e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009492:	2100      	movs	r1, #0
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff f97a 	bl	800878e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	6979      	ldr	r1, [r7, #20]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7ff fc1d 	bl	8008ce0 <clust2sect>
 80094a6:	4602      	mov	r2, r0
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80094ac:	e012      	b.n	80094d4 <dir_next+0x13c>
						fs->wflag = 1;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f7ff fb33 	bl	8008b20 <sync_window>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <dir_next+0x12c>
 80094c0:	2301      	movs	r3, #1
 80094c2:	e02a      	b.n	800951a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	3301      	adds	r3, #1
 80094c8:	613b      	str	r3, [r7, #16]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	895b      	ldrh	r3, [r3, #10]
 80094d8:	461a      	mov	r2, r3
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	4293      	cmp	r3, r2
 80094de:	d3e6      	bcc.n	80094ae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	1ad2      	subs	r2, r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80094f2:	6979      	ldr	r1, [r7, #20]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f7ff fbf3 	bl	8008ce0 <clust2sect>
 80094fa:	4602      	mov	r2, r0
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009512:	441a      	add	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b086      	sub	sp, #24
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009532:	2100      	movs	r1, #0
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff feb4 	bl	80092a2 <dir_sdi>
 800953a:	4603      	mov	r3, r0
 800953c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d12b      	bne.n	800959c <dir_alloc+0x7a>
		n = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	4619      	mov	r1, r3
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f7ff fb2a 	bl	8008ba8 <move_window>
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d11d      	bne.n	800959a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2be5      	cmp	r3, #229	@ 0xe5
 8009566:	d004      	beq.n	8009572 <dir_alloc+0x50>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d107      	bne.n	8009582 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	3301      	adds	r3, #1
 8009576:	613b      	str	r3, [r7, #16]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d102      	bne.n	8009586 <dir_alloc+0x64>
 8009580:	e00c      	b.n	800959c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009582:	2300      	movs	r3, #0
 8009584:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009586:	2101      	movs	r1, #1
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff ff05 	bl	8009398 <dir_next>
 800958e:	4603      	mov	r3, r0
 8009590:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0d7      	beq.n	8009548 <dir_alloc+0x26>
 8009598:	e000      	b.n	800959c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800959a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d101      	bne.n	80095a6 <dir_alloc+0x84>
 80095a2:	2307      	movs	r3, #7
 80095a4:	75fb      	strb	r3, [r7, #23]
	return res;
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	331a      	adds	r3, #26
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff f842 	bl	8008648 <ld_word>
 80095c4:	4603      	mov	r3, r0
 80095c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	d109      	bne.n	80095e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	3314      	adds	r3, #20
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff f837 	bl	8008648 <ld_word>
 80095da:	4603      	mov	r3, r0
 80095dc:	041b      	lsls	r3, r3, #16
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80095e4:	68fb      	ldr	r3, [r7, #12]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	331a      	adds	r3, #26
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	b292      	uxth	r2, r2
 8009602:	4611      	mov	r1, r2
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff f85a 	bl	80086be <st_word>
	if (fs->fs_type == FS_FAT32) {
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b03      	cmp	r3, #3
 8009610:	d109      	bne.n	8009626 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f103 0214 	add.w	r2, r3, #20
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	0c1b      	lsrs	r3, r3, #16
 800961c:	b29b      	uxth	r3, r3
 800961e:	4619      	mov	r1, r3
 8009620:	4610      	mov	r0, r2
 8009622:	f7ff f84c 	bl	80086be <st_word>
	}
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b086      	sub	sp, #24
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800963c:	2100      	movs	r1, #0
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff fe2f 	bl	80092a2 <dir_sdi>
 8009644:	4603      	mov	r3, r0
 8009646:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <dir_find+0x24>
 800964e:	7dfb      	ldrb	r3, [r7, #23]
 8009650:	e03e      	b.n	80096d0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	4619      	mov	r1, r3
 8009658:	6938      	ldr	r0, [r7, #16]
 800965a:	f7ff faa5 	bl	8008ba8 <move_window>
 800965e:	4603      	mov	r3, r0
 8009660:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d12f      	bne.n	80096c8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a1b      	ldr	r3, [r3, #32]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d102      	bne.n	800967c <dir_find+0x4e>
 8009676:	2304      	movs	r3, #4
 8009678:	75fb      	strb	r3, [r7, #23]
 800967a:	e028      	b.n	80096ce <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	330b      	adds	r3, #11
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009688:	b2da      	uxtb	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	330b      	adds	r3, #11
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	f003 0308 	and.w	r3, r3, #8
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10a      	bne.n	80096b4 <dir_find+0x86>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a18      	ldr	r0, [r3, #32]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3324      	adds	r3, #36	@ 0x24
 80096a6:	220b      	movs	r2, #11
 80096a8:	4619      	mov	r1, r3
 80096aa:	f7ff f88b 	bl	80087c4 <mem_cmp>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00b      	beq.n	80096cc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80096b4:	2100      	movs	r1, #0
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff fe6e 	bl	8009398 <dir_next>
 80096bc:	4603      	mov	r3, r0
 80096be:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0c5      	beq.n	8009652 <dir_find+0x24>
 80096c6:	e002      	b.n	80096ce <dir_find+0xa0>
		if (res != FR_OK) break;
 80096c8:	bf00      	nop
 80096ca:	e000      	b.n	80096ce <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80096cc:	bf00      	nop

	return res;
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3718      	adds	r7, #24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80096e6:	2101      	movs	r1, #1
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7ff ff1a 	bl	8009522 <dir_alloc>
 80096ee:	4603      	mov	r3, r0
 80096f0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d11c      	bne.n	8009732 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	4619      	mov	r1, r3
 80096fe:	68b8      	ldr	r0, [r7, #8]
 8009700:	f7ff fa52 	bl	8008ba8 <move_window>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d111      	bne.n	8009732 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	2220      	movs	r2, #32
 8009714:	2100      	movs	r1, #0
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff f839 	bl	800878e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a18      	ldr	r0, [r3, #32]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3324      	adds	r3, #36	@ 0x24
 8009724:	220b      	movs	r2, #11
 8009726:	4619      	mov	r1, r3
 8009728:	f7ff f810 	bl	800874c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2201      	movs	r2, #1
 8009730:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b088      	sub	sp, #32
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3324      	adds	r3, #36	@ 0x24
 8009750:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009752:	220b      	movs	r2, #11
 8009754:	2120      	movs	r1, #32
 8009756:	68b8      	ldr	r0, [r7, #8]
 8009758:	f7ff f819 	bl	800878e <mem_set>
	si = i = 0; ni = 8;
 800975c:	2300      	movs	r3, #0
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	61fb      	str	r3, [r7, #28]
 8009764:	2308      	movs	r3, #8
 8009766:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	61fa      	str	r2, [r7, #28]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	4413      	add	r3, r2
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009776:	7efb      	ldrb	r3, [r7, #27]
 8009778:	2b20      	cmp	r3, #32
 800977a:	d94e      	bls.n	800981a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800977c:	7efb      	ldrb	r3, [r7, #27]
 800977e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009780:	d006      	beq.n	8009790 <create_name+0x54>
 8009782:	7efb      	ldrb	r3, [r7, #27]
 8009784:	2b5c      	cmp	r3, #92	@ 0x5c
 8009786:	d110      	bne.n	80097aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009788:	e002      	b.n	8009790 <create_name+0x54>
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	3301      	adds	r3, #1
 800978e:	61fb      	str	r3, [r7, #28]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	4413      	add	r3, r2
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b2f      	cmp	r3, #47	@ 0x2f
 800979a:	d0f6      	beq.n	800978a <create_name+0x4e>
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	4413      	add	r3, r2
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80097a6:	d0f0      	beq.n	800978a <create_name+0x4e>
			break;
 80097a8:	e038      	b.n	800981c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80097aa:	7efb      	ldrb	r3, [r7, #27]
 80097ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80097ae:	d003      	beq.n	80097b8 <create_name+0x7c>
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d30c      	bcc.n	80097d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b0b      	cmp	r3, #11
 80097bc:	d002      	beq.n	80097c4 <create_name+0x88>
 80097be:	7efb      	ldrb	r3, [r7, #27]
 80097c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80097c2:	d001      	beq.n	80097c8 <create_name+0x8c>
 80097c4:	2306      	movs	r3, #6
 80097c6:	e044      	b.n	8009852 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80097c8:	2308      	movs	r3, #8
 80097ca:	613b      	str	r3, [r7, #16]
 80097cc:	230b      	movs	r3, #11
 80097ce:	617b      	str	r3, [r7, #20]
			continue;
 80097d0:	e022      	b.n	8009818 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80097d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	da04      	bge.n	80097e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80097da:	7efb      	ldrb	r3, [r7, #27]
 80097dc:	3b80      	subs	r3, #128	@ 0x80
 80097de:	4a1f      	ldr	r2, [pc, #124]	@ (800985c <create_name+0x120>)
 80097e0:	5cd3      	ldrb	r3, [r2, r3]
 80097e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80097e4:	7efb      	ldrb	r3, [r7, #27]
 80097e6:	4619      	mov	r1, r3
 80097e8:	481d      	ldr	r0, [pc, #116]	@ (8009860 <create_name+0x124>)
 80097ea:	f7ff f812 	bl	8008812 <chk_chr>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <create_name+0xbc>
 80097f4:	2306      	movs	r3, #6
 80097f6:	e02c      	b.n	8009852 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80097f8:	7efb      	ldrb	r3, [r7, #27]
 80097fa:	2b60      	cmp	r3, #96	@ 0x60
 80097fc:	d905      	bls.n	800980a <create_name+0xce>
 80097fe:	7efb      	ldrb	r3, [r7, #27]
 8009800:	2b7a      	cmp	r3, #122	@ 0x7a
 8009802:	d802      	bhi.n	800980a <create_name+0xce>
 8009804:	7efb      	ldrb	r3, [r7, #27]
 8009806:	3b20      	subs	r3, #32
 8009808:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	613a      	str	r2, [r7, #16]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	4413      	add	r3, r2
 8009814:	7efa      	ldrb	r2, [r7, #27]
 8009816:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009818:	e7a6      	b.n	8009768 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800981a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	441a      	add	r2, r3
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <create_name+0xf4>
 800982c:	2306      	movs	r3, #6
 800982e:	e010      	b.n	8009852 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2be5      	cmp	r3, #229	@ 0xe5
 8009836:	d102      	bne.n	800983e <create_name+0x102>
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2205      	movs	r2, #5
 800983c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800983e:	7efb      	ldrb	r3, [r7, #27]
 8009840:	2b20      	cmp	r3, #32
 8009842:	d801      	bhi.n	8009848 <create_name+0x10c>
 8009844:	2204      	movs	r2, #4
 8009846:	e000      	b.n	800984a <create_name+0x10e>
 8009848:	2200      	movs	r2, #0
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	330b      	adds	r3, #11
 800984e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009850:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009852:	4618      	mov	r0, r3
 8009854:	3720      	adds	r7, #32
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	0800d984 	.word	0x0800d984
 8009860:	0800d900 	.word	0x0800d900

08009864 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009878:	e002      	b.n	8009880 <follow_path+0x1c>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	3301      	adds	r3, #1
 800987e:	603b      	str	r3, [r7, #0]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b2f      	cmp	r3, #47	@ 0x2f
 8009886:	d0f8      	beq.n	800987a <follow_path+0x16>
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b5c      	cmp	r3, #92	@ 0x5c
 800988e:	d0f4      	beq.n	800987a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	2200      	movs	r2, #0
 8009894:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b1f      	cmp	r3, #31
 800989c:	d80a      	bhi.n	80098b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2280      	movs	r2, #128	@ 0x80
 80098a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80098a6:	2100      	movs	r1, #0
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7ff fcfa 	bl	80092a2 <dir_sdi>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]
 80098b2:	e043      	b.n	800993c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80098b4:	463b      	mov	r3, r7
 80098b6:	4619      	mov	r1, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7ff ff3f 	bl	800973c <create_name>
 80098be:	4603      	mov	r3, r0
 80098c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d134      	bne.n	8009932 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff feb0 	bl	800962e <dir_find>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80098d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00a      	beq.n	80098f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d127      	bne.n	8009936 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80098e6:	7afb      	ldrb	r3, [r7, #11]
 80098e8:	f003 0304 	and.w	r3, r3, #4
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d122      	bne.n	8009936 <follow_path+0xd2>
 80098f0:	2305      	movs	r3, #5
 80098f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80098f4:	e01f      	b.n	8009936 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80098f6:	7afb      	ldrb	r3, [r7, #11]
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d11c      	bne.n	800993a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	799b      	ldrb	r3, [r3, #6]
 8009904:	f003 0310 	and.w	r3, r3, #16
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800990c:	2305      	movs	r3, #5
 800990e:	75fb      	strb	r3, [r7, #23]
 8009910:	e014      	b.n	800993c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	695b      	ldr	r3, [r3, #20]
 800991c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009920:	4413      	add	r3, r2
 8009922:	4619      	mov	r1, r3
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f7ff fe43 	bl	80095b0 <ld_clust>
 800992a:	4602      	mov	r2, r0
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009930:	e7c0      	b.n	80098b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009932:	bf00      	nop
 8009934:	e002      	b.n	800993c <follow_path+0xd8>
				break;
 8009936:	bf00      	nop
 8009938:	e000      	b.n	800993c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800993a:	bf00      	nop
			}
		}
	}

	return res;
 800993c:	7dfb      	ldrb	r3, [r7, #23]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009946:	b480      	push	{r7}
 8009948:	b087      	sub	sp, #28
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800994e:	f04f 33ff 	mov.w	r3, #4294967295
 8009952:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d031      	beq.n	80099c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	e002      	b.n	800996a <get_ldnumber+0x24>
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	3301      	adds	r3, #1
 8009968:	617b      	str	r3, [r7, #20]
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	2b20      	cmp	r3, #32
 8009970:	d903      	bls.n	800997a <get_ldnumber+0x34>
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	2b3a      	cmp	r3, #58	@ 0x3a
 8009978:	d1f4      	bne.n	8009964 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b3a      	cmp	r3, #58	@ 0x3a
 8009980:	d11c      	bne.n	80099bc <get_ldnumber+0x76>
			tp = *path;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	60fa      	str	r2, [r7, #12]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	3b30      	subs	r3, #48	@ 0x30
 8009992:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b09      	cmp	r3, #9
 8009998:	d80e      	bhi.n	80099b8 <get_ldnumber+0x72>
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d10a      	bne.n	80099b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d107      	bne.n	80099b8 <get_ldnumber+0x72>
					vol = (int)i;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	3301      	adds	r3, #1
 80099b0:	617b      	str	r3, [r7, #20]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	e002      	b.n	80099c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80099bc:	2300      	movs	r3, #0
 80099be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80099c0:	693b      	ldr	r3, [r7, #16]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
	...

080099d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	70da      	strb	r2, [r3, #3]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f04f 32ff 	mov.w	r2, #4294967295
 80099e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff f8dc 	bl	8008ba8 <move_window>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <check_fs+0x2a>
 80099f6:	2304      	movs	r3, #4
 80099f8:	e038      	b.n	8009a6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3330      	adds	r3, #48	@ 0x30
 80099fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fe20 	bl	8008648 <ld_word>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d001      	beq.n	8009a18 <check_fs+0x48>
 8009a14:	2303      	movs	r3, #3
 8009a16:	e029      	b.n	8009a6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009a1e:	2be9      	cmp	r3, #233	@ 0xe9
 8009a20:	d009      	beq.n	8009a36 <check_fs+0x66>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009a28:	2beb      	cmp	r3, #235	@ 0xeb
 8009a2a:	d11e      	bne.n	8009a6a <check_fs+0x9a>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009a32:	2b90      	cmp	r3, #144	@ 0x90
 8009a34:	d119      	bne.n	8009a6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3330      	adds	r3, #48	@ 0x30
 8009a3a:	3336      	adds	r3, #54	@ 0x36
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fe fe1b 	bl	8008678 <ld_dword>
 8009a42:	4603      	mov	r3, r0
 8009a44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009a48:	4a0a      	ldr	r2, [pc, #40]	@ (8009a74 <check_fs+0xa4>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d101      	bne.n	8009a52 <check_fs+0x82>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e00c      	b.n	8009a6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3330      	adds	r3, #48	@ 0x30
 8009a56:	3352      	adds	r3, #82	@ 0x52
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fe0d 	bl	8008678 <ld_dword>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	4a05      	ldr	r2, [pc, #20]	@ (8009a78 <check_fs+0xa8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d101      	bne.n	8009a6a <check_fs+0x9a>
 8009a66:	2300      	movs	r3, #0
 8009a68:	e000      	b.n	8009a6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009a6a:	2302      	movs	r3, #2
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	00544146 	.word	0x00544146
 8009a78:	33544146 	.word	0x33544146

08009a7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b096      	sub	sp, #88	@ 0x58
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	4613      	mov	r3, r2
 8009a88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f7ff ff58 	bl	8009946 <get_ldnumber>
 8009a96:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	da01      	bge.n	8009aa2 <find_volume+0x26>
 8009a9e:	230b      	movs	r3, #11
 8009aa0:	e22d      	b.n	8009efe <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009aa2:	4aa1      	ldr	r2, [pc, #644]	@ (8009d28 <find_volume+0x2ac>)
 8009aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <find_volume+0x3a>
 8009ab2:	230c      	movs	r3, #12
 8009ab4:	e223      	b.n	8009efe <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009aba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	f023 0301 	bic.w	r3, r3, #1
 8009ac2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01a      	beq.n	8009b02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ace:	785b      	ldrb	r3, [r3, #1]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe fd1b 	bl	800850c <disk_status>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009adc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10c      	bne.n	8009b02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009ae8:	79fb      	ldrb	r3, [r7, #7]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d007      	beq.n	8009afe <find_volume+0x82>
 8009aee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009af2:	f003 0304 	and.w	r3, r3, #4
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009afa:	230a      	movs	r3, #10
 8009afc:	e1ff      	b.n	8009efe <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009afe:	2300      	movs	r3, #0
 8009b00:	e1fd      	b.n	8009efe <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b04:	2200      	movs	r2, #0
 8009b06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b12:	785b      	ldrb	r3, [r3, #1]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fd13 	bl	8008540 <disk_initialize>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009b20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e1e6      	b.n	8009efe <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <find_volume+0xca>
 8009b36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b3a:	f003 0304 	and.w	r3, r3, #4
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009b42:	230a      	movs	r3, #10
 8009b44:	e1db      	b.n	8009efe <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009b4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b4e:	f7ff ff3f 	bl	80099d0 <check_fs>
 8009b52:	4603      	mov	r3, r0
 8009b54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009b58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d149      	bne.n	8009bf4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009b60:	2300      	movs	r3, #0
 8009b62:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b64:	e01e      	b.n	8009ba4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b6e:	011b      	lsls	r3, r3, #4
 8009b70:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009b74:	4413      	add	r3, r2
 8009b76:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d006      	beq.n	8009b90 <find_volume+0x114>
 8009b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b84:	3308      	adds	r3, #8
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fd76 	bl	8008678 <ld_dword>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	e000      	b.n	8009b92 <find_volume+0x116>
 8009b90:	2200      	movs	r2, #0
 8009b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	3358      	adds	r3, #88	@ 0x58
 8009b98:	443b      	add	r3, r7
 8009b9a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d9dd      	bls.n	8009b66 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009baa:	2300      	movs	r3, #0
 8009bac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <find_volume+0x13e>
 8009bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	3358      	adds	r3, #88	@ 0x58
 8009bc0:	443b      	add	r3, r7
 8009bc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009bc6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d005      	beq.n	8009bda <find_volume+0x15e>
 8009bce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009bd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009bd2:	f7ff fefd 	bl	80099d0 <check_fs>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	e000      	b.n	8009bdc <find_volume+0x160>
 8009bda:	2303      	movs	r3, #3
 8009bdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009be0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d905      	bls.n	8009bf4 <find_volume+0x178>
 8009be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bea:	3301      	adds	r3, #1
 8009bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d9e2      	bls.n	8009bba <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	d101      	bne.n	8009c00 <find_volume+0x184>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e17e      	b.n	8009efe <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009c00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d901      	bls.n	8009c0c <find_volume+0x190>
 8009c08:	230d      	movs	r3, #13
 8009c0a:	e178      	b.n	8009efe <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0e:	3330      	adds	r3, #48	@ 0x30
 8009c10:	330b      	adds	r3, #11
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe fd18 	bl	8008648 <ld_word>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c1e:	d001      	beq.n	8009c24 <find_volume+0x1a8>
 8009c20:	230d      	movs	r3, #13
 8009c22:	e16c      	b.n	8009efe <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c26:	3330      	adds	r3, #48	@ 0x30
 8009c28:	3316      	adds	r3, #22
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fe fd0c 	bl	8008648 <ld_word>
 8009c30:	4603      	mov	r3, r0
 8009c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d106      	bne.n	8009c48 <find_volume+0x1cc>
 8009c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3c:	3330      	adds	r3, #48	@ 0x30
 8009c3e:	3324      	adds	r3, #36	@ 0x24
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fe fd19 	bl	8008678 <ld_dword>
 8009c46:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c4c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c50:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5a:	789b      	ldrb	r3, [r3, #2]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d005      	beq.n	8009c6c <find_volume+0x1f0>
 8009c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c62:	789b      	ldrb	r3, [r3, #2]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d001      	beq.n	8009c6c <find_volume+0x1f0>
 8009c68:	230d      	movs	r3, #13
 8009c6a:	e148      	b.n	8009efe <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6e:	789b      	ldrb	r3, [r3, #2]
 8009c70:	461a      	mov	r2, r3
 8009c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c74:	fb02 f303 	mul.w	r3, r2, r3
 8009c78:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c80:	461a      	mov	r2, r3
 8009c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c88:	895b      	ldrh	r3, [r3, #10]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d008      	beq.n	8009ca0 <find_volume+0x224>
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c90:	895b      	ldrh	r3, [r3, #10]
 8009c92:	461a      	mov	r2, r3
 8009c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c96:	895b      	ldrh	r3, [r3, #10]
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <find_volume+0x228>
 8009ca0:	230d      	movs	r3, #13
 8009ca2:	e12c      	b.n	8009efe <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca6:	3330      	adds	r3, #48	@ 0x30
 8009ca8:	3311      	adds	r3, #17
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fccc 	bl	8008648 <ld_word>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cba:	891b      	ldrh	r3, [r3, #8]
 8009cbc:	f003 030f 	and.w	r3, r3, #15
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <find_volume+0x24e>
 8009cc6:	230d      	movs	r3, #13
 8009cc8:	e119      	b.n	8009efe <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ccc:	3330      	adds	r3, #48	@ 0x30
 8009cce:	3313      	adds	r3, #19
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fe fcb9 	bl	8008648 <ld_word>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d106      	bne.n	8009cee <find_volume+0x272>
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce2:	3330      	adds	r3, #48	@ 0x30
 8009ce4:	3320      	adds	r3, #32
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fcc6 	bl	8008678 <ld_dword>
 8009cec:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf0:	3330      	adds	r3, #48	@ 0x30
 8009cf2:	330e      	adds	r3, #14
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fe fca7 	bl	8008648 <ld_word>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009cfe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <find_volume+0x28c>
 8009d04:	230d      	movs	r3, #13
 8009d06:	e0fa      	b.n	8009efe <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009d08:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d0c:	4413      	add	r3, r2
 8009d0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d10:	8912      	ldrh	r2, [r2, #8]
 8009d12:	0912      	lsrs	r2, r2, #4
 8009d14:	b292      	uxth	r2, r2
 8009d16:	4413      	add	r3, r2
 8009d18:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d204      	bcs.n	8009d2c <find_volume+0x2b0>
 8009d22:	230d      	movs	r3, #13
 8009d24:	e0eb      	b.n	8009efe <find_volume+0x482>
 8009d26:	bf00      	nop
 8009d28:	200009a0 	.word	0x200009a0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009d2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d34:	8952      	ldrh	r2, [r2, #10]
 8009d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d3a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <find_volume+0x2ca>
 8009d42:	230d      	movs	r3, #13
 8009d44:	e0db      	b.n	8009efe <find_volume+0x482>
		fmt = FS_FAT32;
 8009d46:	2303      	movs	r3, #3
 8009d48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d802      	bhi.n	8009d5c <find_volume+0x2e0>
 8009d56:	2302      	movs	r3, #2
 8009d58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d802      	bhi.n	8009d6c <find_volume+0x2f0>
 8009d66:	2301      	movs	r3, #1
 8009d68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6e:	1c9a      	adds	r2, r3, #2
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d78:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009d7a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d7e:	441a      	add	r2, r3
 8009d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d82:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009d84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d88:	441a      	add	r2, r3
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d11e      	bne.n	8009dd4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d98:	3330      	adds	r3, #48	@ 0x30
 8009d9a:	332a      	adds	r3, #42	@ 0x2a
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fe fc53 	bl	8008648 <ld_word>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <find_volume+0x330>
 8009da8:	230d      	movs	r3, #13
 8009daa:	e0a8      	b.n	8009efe <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dae:	891b      	ldrh	r3, [r3, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <find_volume+0x33c>
 8009db4:	230d      	movs	r3, #13
 8009db6:	e0a2      	b.n	8009efe <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dba:	3330      	adds	r3, #48	@ 0x30
 8009dbc:	332c      	adds	r3, #44	@ 0x2c
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fe fc5a 	bl	8008678 <ld_dword>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dd2:	e01f      	b.n	8009e14 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd6:	891b      	ldrh	r3, [r3, #8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <find_volume+0x364>
 8009ddc:	230d      	movs	r3, #13
 8009dde:	e08e      	b.n	8009efe <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de2:	6a1a      	ldr	r2, [r3, #32]
 8009de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009de6:	441a      	add	r2, r3
 8009de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dea:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009dec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d103      	bne.n	8009dfc <find_volume+0x380>
 8009df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	e00a      	b.n	8009e12 <find_volume+0x396>
 8009dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfe:	695a      	ldr	r2, [r3, #20]
 8009e00:	4613      	mov	r3, r2
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	4413      	add	r3, r2
 8009e06:	085a      	lsrs	r2, r3, #1
 8009e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009e12:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e16:	699a      	ldr	r2, [r3, #24]
 8009e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e1a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009e1e:	0a5b      	lsrs	r3, r3, #9
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d201      	bcs.n	8009e28 <find_volume+0x3ac>
 8009e24:	230d      	movs	r3, #13
 8009e26:	e06a      	b.n	8009efe <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2e:	611a      	str	r2, [r3, #16]
 8009e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e32:	691a      	ldr	r2, [r3, #16]
 8009e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e36:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3a:	2280      	movs	r2, #128	@ 0x80
 8009e3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009e3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d149      	bne.n	8009eda <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e48:	3330      	adds	r3, #48	@ 0x30
 8009e4a:	3330      	adds	r3, #48	@ 0x30
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe fbfb 	bl	8008648 <ld_word>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d140      	bne.n	8009eda <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e60:	f7fe fea2 	bl	8008ba8 <move_window>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d137      	bne.n	8009eda <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e72:	3330      	adds	r3, #48	@ 0x30
 8009e74:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fe fbe5 	bl	8008648 <ld_word>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	461a      	mov	r2, r3
 8009e82:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d127      	bne.n	8009eda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8c:	3330      	adds	r3, #48	@ 0x30
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fbf2 	bl	8008678 <ld_dword>
 8009e94:	4603      	mov	r3, r0
 8009e96:	4a1c      	ldr	r2, [pc, #112]	@ (8009f08 <find_volume+0x48c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d11e      	bne.n	8009eda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9e:	3330      	adds	r3, #48	@ 0x30
 8009ea0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fe fbe7 	bl	8008678 <ld_dword>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	4a17      	ldr	r2, [pc, #92]	@ (8009f0c <find_volume+0x490>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d113      	bne.n	8009eda <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb4:	3330      	adds	r3, #48	@ 0x30
 8009eb6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe fbdc 	bl	8008678 <ld_dword>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	3330      	adds	r3, #48	@ 0x30
 8009eca:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe fbd2 	bl	8008678 <ld_dword>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009edc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009ee0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8009f10 <find_volume+0x494>)
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	4b09      	ldr	r3, [pc, #36]	@ (8009f10 <find_volume+0x494>)
 8009eec:	801a      	strh	r2, [r3, #0]
 8009eee:	4b08      	ldr	r3, [pc, #32]	@ (8009f10 <find_volume+0x494>)
 8009ef0:	881a      	ldrh	r2, [r3, #0]
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009ef6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ef8:	f7fe fdee 	bl	8008ad8 <clear_lock>
#endif
	return FR_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3758      	adds	r7, #88	@ 0x58
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	41615252 	.word	0x41615252
 8009f0c:	61417272 	.word	0x61417272
 8009f10:	200009a4 	.word	0x200009a4

08009f14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009f1e:	2309      	movs	r3, #9
 8009f20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d01c      	beq.n	8009f62 <validate+0x4e>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d018      	beq.n	8009f62 <validate+0x4e>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d013      	beq.n	8009f62 <validate+0x4e>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	889a      	ldrh	r2, [r3, #4]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	88db      	ldrh	r3, [r3, #6]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d10c      	bne.n	8009f62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	785b      	ldrb	r3, [r3, #1]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fadc 	bl	800850c <disk_status>
 8009f54:	4603      	mov	r3, r0
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <validate+0x4e>
			res = FR_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d102      	bne.n	8009f6e <validate+0x5a>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	e000      	b.n	8009f70 <validate+0x5c>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	6013      	str	r3, [r2, #0]
	return res;
 8009f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009f92:	f107 0310 	add.w	r3, r7, #16
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7ff fcd5 	bl	8009946 <get_ldnumber>
 8009f9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	da01      	bge.n	8009fa8 <f_mount+0x28>
 8009fa4:	230b      	movs	r3, #11
 8009fa6:	e02b      	b.n	800a000 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009fa8:	4a17      	ldr	r2, [pc, #92]	@ (800a008 <f_mount+0x88>)
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009fb8:	69b8      	ldr	r0, [r7, #24]
 8009fba:	f7fe fd8d 	bl	8008ad8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d002      	beq.n	8009fd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	490d      	ldr	r1, [pc, #52]	@ (800a008 <f_mount+0x88>)
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <f_mount+0x66>
 8009fe0:	79fb      	ldrb	r3, [r7, #7]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d001      	beq.n	8009fea <f_mount+0x6a>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	e00a      	b.n	800a000 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009fea:	f107 010c 	add.w	r1, r7, #12
 8009fee:	f107 0308 	add.w	r3, r7, #8
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7ff fd41 	bl	8009a7c <find_volume>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3720      	adds	r7, #32
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	200009a0 	.word	0x200009a0

0800a00c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b098      	sub	sp, #96	@ 0x60
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	4613      	mov	r3, r2
 800a018:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <f_open+0x18>
 800a020:	2309      	movs	r3, #9
 800a022:	e1a9      	b.n	800a378 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a024:	79fb      	ldrb	r3, [r7, #7]
 800a026:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a02a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a02c:	79fa      	ldrb	r2, [r7, #7]
 800a02e:	f107 0110 	add.w	r1, r7, #16
 800a032:	f107 0308 	add.w	r3, r7, #8
 800a036:	4618      	mov	r0, r3
 800a038:	f7ff fd20 	bl	8009a7c <find_volume>
 800a03c:	4603      	mov	r3, r0
 800a03e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a042:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a046:	2b00      	cmp	r3, #0
 800a048:	f040 818d 	bne.w	800a366 <f_open+0x35a>
		dj.obj.fs = fs;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	f107 0314 	add.w	r3, r7, #20
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff fc03 	bl	8009864 <follow_path>
 800a05e:	4603      	mov	r3, r0
 800a060:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a064:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d118      	bne.n	800a09e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a06c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a070:	b25b      	sxtb	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	da03      	bge.n	800a07e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a076:	2306      	movs	r3, #6
 800a078:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a07c:	e00f      	b.n	800a09e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a07e:	79fb      	ldrb	r3, [r7, #7]
 800a080:	2b01      	cmp	r3, #1
 800a082:	bf8c      	ite	hi
 800a084:	2301      	movhi	r3, #1
 800a086:	2300      	movls	r3, #0
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	461a      	mov	r2, r3
 800a08c:	f107 0314 	add.w	r3, r7, #20
 800a090:	4611      	mov	r1, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fbd8 	bl	8008848 <chk_lock>
 800a098:	4603      	mov	r3, r0
 800a09a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a09e:	79fb      	ldrb	r3, [r7, #7]
 800a0a0:	f003 031c 	and.w	r3, r3, #28
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d07f      	beq.n	800a1a8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a0a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d017      	beq.n	800a0e0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a0b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0b4:	2b04      	cmp	r3, #4
 800a0b6:	d10e      	bne.n	800a0d6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a0b8:	f7fe fc22 	bl	8008900 <enq_lock>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d006      	beq.n	800a0d0 <f_open+0xc4>
 800a0c2:	f107 0314 	add.w	r3, r7, #20
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff fb06 	bl	80096d8 <dir_register>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	e000      	b.n	800a0d2 <f_open+0xc6>
 800a0d0:	2312      	movs	r3, #18
 800a0d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	f043 0308 	orr.w	r3, r3, #8
 800a0dc:	71fb      	strb	r3, [r7, #7]
 800a0de:	e010      	b.n	800a102 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a0e0:	7ebb      	ldrb	r3, [r7, #26]
 800a0e2:	f003 0311 	and.w	r3, r3, #17
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d003      	beq.n	800a0f2 <f_open+0xe6>
					res = FR_DENIED;
 800a0ea:	2307      	movs	r3, #7
 800a0ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a0f0:	e007      	b.n	800a102 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a0f2:	79fb      	ldrb	r3, [r7, #7]
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <f_open+0xf6>
 800a0fc:	2308      	movs	r3, #8
 800a0fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a102:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a106:	2b00      	cmp	r3, #0
 800a108:	d168      	bne.n	800a1dc <f_open+0x1d0>
 800a10a:	79fb      	ldrb	r3, [r7, #7]
 800a10c:	f003 0308 	and.w	r3, r3, #8
 800a110:	2b00      	cmp	r3, #0
 800a112:	d063      	beq.n	800a1dc <f_open+0x1d0>
				dw = GET_FATTIME();
 800a114:	f7fd fcc0 	bl	8007a98 <get_fattime>
 800a118:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a11a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a11c:	330e      	adds	r3, #14
 800a11e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe fae7 	bl	80086f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a128:	3316      	adds	r3, #22
 800a12a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fae1 	bl	80086f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a134:	330b      	adds	r3, #11
 800a136:	2220      	movs	r2, #32
 800a138:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a13e:	4611      	mov	r1, r2
 800a140:	4618      	mov	r0, r3
 800a142:	f7ff fa35 	bl	80095b0 <ld_clust>
 800a146:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a14c:	2200      	movs	r2, #0
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff fa4d 	bl	80095ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a156:	331c      	adds	r3, #28
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe faca 	bl	80086f4 <st_dword>
					fs->wflag = 1;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2201      	movs	r2, #1
 800a164:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d037      	beq.n	800a1dc <f_open+0x1d0>
						dw = fs->winsect;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a170:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a172:	f107 0314 	add.w	r3, r7, #20
 800a176:	2200      	movs	r2, #0
 800a178:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe ff60 	bl	8009040 <remove_chain>
 800a180:	4603      	mov	r3, r0
 800a182:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a186:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d126      	bne.n	800a1dc <f_open+0x1d0>
							res = move_window(fs, dw);
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a192:	4618      	mov	r0, r3
 800a194:	f7fe fd08 	bl	8008ba8 <move_window>
 800a198:	4603      	mov	r3, r0
 800a19a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1a2:	3a01      	subs	r2, #1
 800a1a4:	60da      	str	r2, [r3, #12]
 800a1a6:	e019      	b.n	800a1dc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a1a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d115      	bne.n	800a1dc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a1b0:	7ebb      	ldrb	r3, [r7, #26]
 800a1b2:	f003 0310 	and.w	r3, r3, #16
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a1ba:	2304      	movs	r3, #4
 800a1bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a1c0:	e00c      	b.n	800a1dc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a1c2:	79fb      	ldrb	r3, [r7, #7]
 800a1c4:	f003 0302 	and.w	r3, r3, #2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d007      	beq.n	800a1dc <f_open+0x1d0>
 800a1cc:	7ebb      	ldrb	r3, [r7, #26]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <f_open+0x1d0>
						res = FR_DENIED;
 800a1d6:	2307      	movs	r3, #7
 800a1d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a1dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d126      	bne.n	800a232 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	f003 0308 	and.w	r3, r3, #8
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a1fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	2b01      	cmp	r3, #1
 800a208:	bf8c      	ite	hi
 800a20a:	2301      	movhi	r3, #1
 800a20c:	2300      	movls	r3, #0
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	461a      	mov	r2, r3
 800a212:	f107 0314 	add.w	r3, r7, #20
 800a216:	4611      	mov	r1, r2
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fe fb93 	bl	8008944 <inc_lock>
 800a21e:	4602      	mov	r2, r0
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <f_open+0x226>
 800a22c:	2302      	movs	r3, #2
 800a22e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a232:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a236:	2b00      	cmp	r3, #0
 800a238:	f040 8095 	bne.w	800a366 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a240:	4611      	mov	r1, r2
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff f9b4 	bl	80095b0 <ld_clust>
 800a248:	4602      	mov	r2, r0
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a24e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a250:	331c      	adds	r3, #28
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe fa10 	bl	8008678 <ld_dword>
 800a258:	4602      	mov	r2, r0
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	88da      	ldrh	r2, [r3, #6]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	79fa      	ldrb	r2, [r7, #7]
 800a276:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3330      	adds	r3, #48	@ 0x30
 800a28e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a292:	2100      	movs	r1, #0
 800a294:	4618      	mov	r0, r3
 800a296:	f7fe fa7a 	bl	800878e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a29a:	79fb      	ldrb	r3, [r7, #7]
 800a29c:	f003 0320 	and.w	r3, r3, #32
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d060      	beq.n	800a366 <f_open+0x35a>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d05c      	beq.n	800a366 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	68da      	ldr	r2, [r3, #12]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	895b      	ldrh	r3, [r3, #10]
 800a2b8:	025b      	lsls	r3, r3, #9
 800a2ba:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2c8:	e016      	b.n	800a2f8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fd25 	bl	8008d1e <get_fat>
 800a2d4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a2d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d802      	bhi.n	800a2e2 <f_open+0x2d6>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a2e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e8:	d102      	bne.n	800a2f0 <f_open+0x2e4>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a2f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d103      	bne.n	800a308 <f_open+0x2fc>
 800a300:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a304:	429a      	cmp	r2, r3
 800a306:	d8e0      	bhi.n	800a2ca <f_open+0x2be>
				}
				fp->clust = clst;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a30c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a30e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a312:	2b00      	cmp	r3, #0
 800a314:	d127      	bne.n	800a366 <f_open+0x35a>
 800a316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d022      	beq.n	800a366 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a324:	4618      	mov	r0, r3
 800a326:	f7fe fcdb 	bl	8008ce0 <clust2sect>
 800a32a:	6478      	str	r0, [r7, #68]	@ 0x44
 800a32c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <f_open+0x32e>
						res = FR_INT_ERR;
 800a332:	2302      	movs	r3, #2
 800a334:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a338:	e015      	b.n	800a366 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a33a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a33c:	0a5a      	lsrs	r2, r3, #9
 800a33e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a340:	441a      	add	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	7858      	ldrb	r0, [r3, #1]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a1a      	ldr	r2, [r3, #32]
 800a354:	2301      	movs	r3, #1
 800a356:	f7fe f919 	bl	800858c <disk_read>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <f_open+0x35a>
 800a360:	2301      	movs	r3, #1
 800a362:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a366:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d002      	beq.n	800a374 <f_open+0x368>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a374:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3760      	adds	r7, #96	@ 0x60
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08c      	sub	sp, #48	@ 0x30
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2200      	movs	r2, #0
 800a396:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f107 0210 	add.w	r2, r7, #16
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff fdb7 	bl	8009f14 <validate>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a3ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d107      	bne.n	800a3c4 <f_write+0x44>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	7d5b      	ldrb	r3, [r3, #21]
 800a3b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a3bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <f_write+0x4a>
 800a3c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3c8:	e14b      	b.n	800a662 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	7d1b      	ldrb	r3, [r3, #20]
 800a3ce:	f003 0302 	and.w	r3, r3, #2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <f_write+0x5a>
 800a3d6:	2307      	movs	r3, #7
 800a3d8:	e143      	b.n	800a662 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	699a      	ldr	r2, [r3, #24]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	441a      	add	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	f080 812d 	bcs.w	800a646 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	43db      	mvns	r3, r3
 800a3f2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a3f4:	e127      	b.n	800a646 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f040 80e3 	bne.w	800a5ca <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	0a5b      	lsrs	r3, r3, #9
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	8952      	ldrh	r2, [r2, #10]
 800a40e:	3a01      	subs	r2, #1
 800a410:	4013      	ands	r3, r2
 800a412:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d143      	bne.n	800a4a2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10c      	bne.n	800a43c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d11a      	bne.n	800a464 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2100      	movs	r1, #0
 800a432:	4618      	mov	r0, r3
 800a434:	f7fe fe69 	bl	800910a <create_chain>
 800a438:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a43a:	e013      	b.n	800a464 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a440:	2b00      	cmp	r3, #0
 800a442:	d007      	beq.n	800a454 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	4619      	mov	r1, r3
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7fe fef5 	bl	800923a <clmt_clust>
 800a450:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a452:	e007      	b.n	800a464 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	4619      	mov	r1, r3
 800a45c:	4610      	mov	r0, r2
 800a45e:	f7fe fe54 	bl	800910a <create_chain>
 800a462:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 80f2 	beq.w	800a650 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d104      	bne.n	800a47c <f_write+0xfc>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2202      	movs	r2, #2
 800a476:	755a      	strb	r2, [r3, #21]
 800a478:	2302      	movs	r3, #2
 800a47a:	e0f2      	b.n	800a662 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	d104      	bne.n	800a48e <f_write+0x10e>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2201      	movs	r2, #1
 800a488:	755a      	strb	r2, [r3, #21]
 800a48a:	2301      	movs	r3, #1
 800a48c:	e0e9      	b.n	800a662 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a492:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d102      	bne.n	800a4a2 <f_write+0x122>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4a0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	7d1b      	ldrb	r3, [r3, #20]
 800a4a6:	b25b      	sxtb	r3, r3
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	da18      	bge.n	800a4de <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	7858      	ldrb	r0, [r3, #1]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a1a      	ldr	r2, [r3, #32]
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	f7fe f886 	bl	80085cc <disk_write>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d004      	beq.n	800a4d0 <f_write+0x150>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	755a      	strb	r2, [r3, #21]
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e0c8      	b.n	800a662 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	7d1b      	ldrb	r3, [r3, #20]
 800a4d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	f7fe fbfa 	bl	8008ce0 <clust2sect>
 800a4ec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d104      	bne.n	800a4fe <f_write+0x17e>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	755a      	strb	r2, [r3, #21]
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e0b1      	b.n	800a662 <f_write+0x2e2>
			sect += csect;
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	4413      	add	r3, r2
 800a504:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	0a5b      	lsrs	r3, r3, #9
 800a50a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d03c      	beq.n	800a58c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a512:	69ba      	ldr	r2, [r7, #24]
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	4413      	add	r3, r2
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	8952      	ldrh	r2, [r2, #10]
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d905      	bls.n	800a52c <f_write+0x1ac>
					cc = fs->csize - csect;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	895b      	ldrh	r3, [r3, #10]
 800a524:	461a      	mov	r2, r3
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	7858      	ldrb	r0, [r3, #1]
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	69f9      	ldr	r1, [r7, #28]
 800a536:	f7fe f849 	bl	80085cc <disk_write>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d004      	beq.n	800a54a <f_write+0x1ca>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2201      	movs	r2, #1
 800a544:	755a      	strb	r2, [r3, #21]
 800a546:	2301      	movs	r3, #1
 800a548:	e08b      	b.n	800a662 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a1a      	ldr	r2, [r3, #32]
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	6a3a      	ldr	r2, [r7, #32]
 800a554:	429a      	cmp	r2, r3
 800a556:	d915      	bls.n	800a584 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6a1a      	ldr	r2, [r3, #32]
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	025b      	lsls	r3, r3, #9
 800a568:	69fa      	ldr	r2, [r7, #28]
 800a56a:	4413      	add	r3, r2
 800a56c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a570:	4619      	mov	r1, r3
 800a572:	f7fe f8eb 	bl	800874c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	7d1b      	ldrb	r3, [r3, #20]
 800a57a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	025b      	lsls	r3, r3, #9
 800a588:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a58a:	e03f      	b.n	800a60c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	429a      	cmp	r2, r3
 800a594:	d016      	beq.n	800a5c4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	699a      	ldr	r2, [r3, #24]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d210      	bcs.n	800a5c4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	7858      	ldrb	r0, [r3, #1]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	f7fd ffec 	bl	800858c <disk_read>
 800a5b4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d004      	beq.n	800a5c4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	755a      	strb	r2, [r3, #21]
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e04e      	b.n	800a662 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a5d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a5d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d901      	bls.n	800a5e4 <f_write+0x264>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f2:	4413      	add	r3, r2
 800a5f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5f6:	69f9      	ldr	r1, [r7, #28]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe f8a7 	bl	800874c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	7d1b      	ldrb	r3, [r3, #20]
 800a602:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a606:	b2da      	uxtb	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a60c:	69fa      	ldr	r2, [r7, #28]
 800a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a610:	4413      	add	r3, r2
 800a612:	61fb      	str	r3, [r7, #28]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	699a      	ldr	r2, [r3, #24]
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	441a      	add	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	619a      	str	r2, [r3, #24]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	68da      	ldr	r2, [r3, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	429a      	cmp	r2, r3
 800a62a:	bf38      	it	cc
 800a62c:	461a      	movcc	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	60da      	str	r2, [r3, #12]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a638:	441a      	add	r2, r3
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	601a      	str	r2, [r3, #0]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f47f aed4 	bne.w	800a3f6 <f_write+0x76>
 800a64e:	e000      	b.n	800a652 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a650:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	7d1b      	ldrb	r3, [r3, #20]
 800a656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a65a:	b2da      	uxtb	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3730      	adds	r7, #48	@ 0x30
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b086      	sub	sp, #24
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f107 0208 	add.w	r2, r7, #8
 800a678:	4611      	mov	r1, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff fc4a 	bl	8009f14 <validate>
 800a680:	4603      	mov	r3, r0
 800a682:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d168      	bne.n	800a75c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	7d1b      	ldrb	r3, [r3, #20]
 800a68e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a692:	2b00      	cmp	r3, #0
 800a694:	d062      	beq.n	800a75c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	7d1b      	ldrb	r3, [r3, #20]
 800a69a:	b25b      	sxtb	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da15      	bge.n	800a6cc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	7858      	ldrb	r0, [r3, #1]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a1a      	ldr	r2, [r3, #32]
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	f7fd ff8c 	bl	80085cc <disk_write>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <f_sync+0x54>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e04f      	b.n	800a75e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	7d1b      	ldrb	r3, [r3, #20]
 800a6c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a6cc:	f7fd f9e4 	bl	8007a98 <get_fattime>
 800a6d0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4610      	mov	r0, r2
 800a6dc:	f7fe fa64 	bl	8008ba8 <move_window>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a6e4:	7dfb      	ldrb	r3, [r7, #23]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d138      	bne.n	800a75c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	330b      	adds	r3, #11
 800a6f4:	781a      	ldrb	r2, [r3, #0]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	330b      	adds	r3, #11
 800a6fa:	f042 0220 	orr.w	r2, r2, #32
 800a6fe:	b2d2      	uxtb	r2, r2
 800a700:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6818      	ldr	r0, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	461a      	mov	r2, r3
 800a70c:	68f9      	ldr	r1, [r7, #12]
 800a70e:	f7fe ff6e 	bl	80095ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f103 021c 	add.w	r2, r3, #28
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f7fd ffe8 	bl	80086f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3316      	adds	r3, #22
 800a728:	6939      	ldr	r1, [r7, #16]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fd ffe2 	bl	80086f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3312      	adds	r3, #18
 800a734:	2100      	movs	r1, #0
 800a736:	4618      	mov	r0, r3
 800a738:	f7fd ffc1 	bl	80086be <st_word>
					fs->wflag = 1;
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2201      	movs	r2, #1
 800a740:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	4618      	mov	r0, r3
 800a746:	f7fe fa5d 	bl	8008c04 <sync_fs>
 800a74a:	4603      	mov	r3, r0
 800a74c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	7d1b      	ldrb	r3, [r3, #20]
 800a752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a756:	b2da      	uxtb	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff ff7b 	bl	800a66a <f_sync>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a778:	7bfb      	ldrb	r3, [r7, #15]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d118      	bne.n	800a7b0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f107 0208 	add.w	r2, r7, #8
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff fbc4 	bl	8009f14 <validate>
 800a78c:	4603      	mov	r3, r0
 800a78e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10c      	bne.n	800a7b0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe f960 	bl	8008a60 <dec_lock>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d102      	bne.n	800a7b0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a7d2:	4b1f      	ldr	r3, [pc, #124]	@ (800a850 <FATFS_LinkDriverEx+0x94>)
 800a7d4:	7a5b      	ldrb	r3, [r3, #9]
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d131      	bne.n	800a840 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a7dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a850 <FATFS_LinkDriverEx+0x94>)
 800a7de:	7a5b      	ldrb	r3, [r3, #9]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a850 <FATFS_LinkDriverEx+0x94>)
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a7ea:	4b19      	ldr	r3, [pc, #100]	@ (800a850 <FATFS_LinkDriverEx+0x94>)
 800a7ec:	7a5b      	ldrb	r3, [r3, #9]
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	4a17      	ldr	r2, [pc, #92]	@ (800a850 <FATFS_LinkDriverEx+0x94>)
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a7fa:	4b15      	ldr	r3, [pc, #84]	@ (800a850 <FATFS_LinkDriverEx+0x94>)
 800a7fc:	7a5b      	ldrb	r3, [r3, #9]
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	461a      	mov	r2, r3
 800a802:	4b13      	ldr	r3, [pc, #76]	@ (800a850 <FATFS_LinkDriverEx+0x94>)
 800a804:	4413      	add	r3, r2
 800a806:	79fa      	ldrb	r2, [r7, #7]
 800a808:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a80a:	4b11      	ldr	r3, [pc, #68]	@ (800a850 <FATFS_LinkDriverEx+0x94>)
 800a80c:	7a5b      	ldrb	r3, [r3, #9]
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	1c5a      	adds	r2, r3, #1
 800a812:	b2d1      	uxtb	r1, r2
 800a814:	4a0e      	ldr	r2, [pc, #56]	@ (800a850 <FATFS_LinkDriverEx+0x94>)
 800a816:	7251      	strb	r1, [r2, #9]
 800a818:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a81a:	7dbb      	ldrb	r3, [r7, #22]
 800a81c:	3330      	adds	r3, #48	@ 0x30
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	3301      	adds	r3, #1
 800a828:	223a      	movs	r2, #58	@ 0x3a
 800a82a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	3302      	adds	r3, #2
 800a830:	222f      	movs	r2, #47	@ 0x2f
 800a832:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	3303      	adds	r3, #3
 800a838:	2200      	movs	r2, #0
 800a83a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a840:	7dfb      	ldrb	r3, [r7, #23]
}
 800a842:	4618      	mov	r0, r3
 800a844:	371c      	adds	r7, #28
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	200009c8 	.word	0x200009c8

0800a854 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a85e:	2200      	movs	r2, #0
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7ff ffaa 	bl	800a7bc <FATFS_LinkDriverEx>
 800a868:	4603      	mov	r3, r0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <malloc>:
 800a874:	4b02      	ldr	r3, [pc, #8]	@ (800a880 <malloc+0xc>)
 800a876:	4601      	mov	r1, r0
 800a878:	6818      	ldr	r0, [r3, #0]
 800a87a:	f000 b82d 	b.w	800a8d8 <_malloc_r>
 800a87e:	bf00      	nop
 800a880:	20000050 	.word	0x20000050

0800a884 <free>:
 800a884:	4b02      	ldr	r3, [pc, #8]	@ (800a890 <free+0xc>)
 800a886:	4601      	mov	r1, r0
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	f001 be1d 	b.w	800c4c8 <_free_r>
 800a88e:	bf00      	nop
 800a890:	20000050 	.word	0x20000050

0800a894 <sbrk_aligned>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	4e0f      	ldr	r6, [pc, #60]	@ (800a8d4 <sbrk_aligned+0x40>)
 800a898:	460c      	mov	r4, r1
 800a89a:	6831      	ldr	r1, [r6, #0]
 800a89c:	4605      	mov	r5, r0
 800a89e:	b911      	cbnz	r1, 800a8a6 <sbrk_aligned+0x12>
 800a8a0:	f000 ff68 	bl	800b774 <_sbrk_r>
 800a8a4:	6030      	str	r0, [r6, #0]
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	f000 ff63 	bl	800b774 <_sbrk_r>
 800a8ae:	1c43      	adds	r3, r0, #1
 800a8b0:	d103      	bne.n	800a8ba <sbrk_aligned+0x26>
 800a8b2:	f04f 34ff 	mov.w	r4, #4294967295
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	bd70      	pop	{r4, r5, r6, pc}
 800a8ba:	1cc4      	adds	r4, r0, #3
 800a8bc:	f024 0403 	bic.w	r4, r4, #3
 800a8c0:	42a0      	cmp	r0, r4
 800a8c2:	d0f8      	beq.n	800a8b6 <sbrk_aligned+0x22>
 800a8c4:	1a21      	subs	r1, r4, r0
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f000 ff54 	bl	800b774 <_sbrk_r>
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	d1f2      	bne.n	800a8b6 <sbrk_aligned+0x22>
 800a8d0:	e7ef      	b.n	800a8b2 <sbrk_aligned+0x1e>
 800a8d2:	bf00      	nop
 800a8d4:	200009d4 	.word	0x200009d4

0800a8d8 <_malloc_r>:
 800a8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8dc:	1ccd      	adds	r5, r1, #3
 800a8de:	f025 0503 	bic.w	r5, r5, #3
 800a8e2:	3508      	adds	r5, #8
 800a8e4:	2d0c      	cmp	r5, #12
 800a8e6:	bf38      	it	cc
 800a8e8:	250c      	movcc	r5, #12
 800a8ea:	2d00      	cmp	r5, #0
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	db01      	blt.n	800a8f4 <_malloc_r+0x1c>
 800a8f0:	42a9      	cmp	r1, r5
 800a8f2:	d904      	bls.n	800a8fe <_malloc_r+0x26>
 800a8f4:	230c      	movs	r3, #12
 800a8f6:	6033      	str	r3, [r6, #0]
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9d4 <_malloc_r+0xfc>
 800a902:	f000 f869 	bl	800a9d8 <__malloc_lock>
 800a906:	f8d8 3000 	ldr.w	r3, [r8]
 800a90a:	461c      	mov	r4, r3
 800a90c:	bb44      	cbnz	r4, 800a960 <_malloc_r+0x88>
 800a90e:	4629      	mov	r1, r5
 800a910:	4630      	mov	r0, r6
 800a912:	f7ff ffbf 	bl	800a894 <sbrk_aligned>
 800a916:	1c43      	adds	r3, r0, #1
 800a918:	4604      	mov	r4, r0
 800a91a:	d158      	bne.n	800a9ce <_malloc_r+0xf6>
 800a91c:	f8d8 4000 	ldr.w	r4, [r8]
 800a920:	4627      	mov	r7, r4
 800a922:	2f00      	cmp	r7, #0
 800a924:	d143      	bne.n	800a9ae <_malloc_r+0xd6>
 800a926:	2c00      	cmp	r4, #0
 800a928:	d04b      	beq.n	800a9c2 <_malloc_r+0xea>
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	4639      	mov	r1, r7
 800a92e:	4630      	mov	r0, r6
 800a930:	eb04 0903 	add.w	r9, r4, r3
 800a934:	f000 ff1e 	bl	800b774 <_sbrk_r>
 800a938:	4581      	cmp	r9, r0
 800a93a:	d142      	bne.n	800a9c2 <_malloc_r+0xea>
 800a93c:	6821      	ldr	r1, [r4, #0]
 800a93e:	1a6d      	subs	r5, r5, r1
 800a940:	4629      	mov	r1, r5
 800a942:	4630      	mov	r0, r6
 800a944:	f7ff ffa6 	bl	800a894 <sbrk_aligned>
 800a948:	3001      	adds	r0, #1
 800a94a:	d03a      	beq.n	800a9c2 <_malloc_r+0xea>
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	442b      	add	r3, r5
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	f8d8 3000 	ldr.w	r3, [r8]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	bb62      	cbnz	r2, 800a9b4 <_malloc_r+0xdc>
 800a95a:	f8c8 7000 	str.w	r7, [r8]
 800a95e:	e00f      	b.n	800a980 <_malloc_r+0xa8>
 800a960:	6822      	ldr	r2, [r4, #0]
 800a962:	1b52      	subs	r2, r2, r5
 800a964:	d420      	bmi.n	800a9a8 <_malloc_r+0xd0>
 800a966:	2a0b      	cmp	r2, #11
 800a968:	d917      	bls.n	800a99a <_malloc_r+0xc2>
 800a96a:	1961      	adds	r1, r4, r5
 800a96c:	42a3      	cmp	r3, r4
 800a96e:	6025      	str	r5, [r4, #0]
 800a970:	bf18      	it	ne
 800a972:	6059      	strne	r1, [r3, #4]
 800a974:	6863      	ldr	r3, [r4, #4]
 800a976:	bf08      	it	eq
 800a978:	f8c8 1000 	streq.w	r1, [r8]
 800a97c:	5162      	str	r2, [r4, r5]
 800a97e:	604b      	str	r3, [r1, #4]
 800a980:	4630      	mov	r0, r6
 800a982:	f000 f82f 	bl	800a9e4 <__malloc_unlock>
 800a986:	f104 000b 	add.w	r0, r4, #11
 800a98a:	1d23      	adds	r3, r4, #4
 800a98c:	f020 0007 	bic.w	r0, r0, #7
 800a990:	1ac2      	subs	r2, r0, r3
 800a992:	bf1c      	itt	ne
 800a994:	1a1b      	subne	r3, r3, r0
 800a996:	50a3      	strne	r3, [r4, r2]
 800a998:	e7af      	b.n	800a8fa <_malloc_r+0x22>
 800a99a:	6862      	ldr	r2, [r4, #4]
 800a99c:	42a3      	cmp	r3, r4
 800a99e:	bf0c      	ite	eq
 800a9a0:	f8c8 2000 	streq.w	r2, [r8]
 800a9a4:	605a      	strne	r2, [r3, #4]
 800a9a6:	e7eb      	b.n	800a980 <_malloc_r+0xa8>
 800a9a8:	4623      	mov	r3, r4
 800a9aa:	6864      	ldr	r4, [r4, #4]
 800a9ac:	e7ae      	b.n	800a90c <_malloc_r+0x34>
 800a9ae:	463c      	mov	r4, r7
 800a9b0:	687f      	ldr	r7, [r7, #4]
 800a9b2:	e7b6      	b.n	800a922 <_malloc_r+0x4a>
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	42a3      	cmp	r3, r4
 800a9ba:	d1fb      	bne.n	800a9b4 <_malloc_r+0xdc>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	6053      	str	r3, [r2, #4]
 800a9c0:	e7de      	b.n	800a980 <_malloc_r+0xa8>
 800a9c2:	230c      	movs	r3, #12
 800a9c4:	6033      	str	r3, [r6, #0]
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f000 f80c 	bl	800a9e4 <__malloc_unlock>
 800a9cc:	e794      	b.n	800a8f8 <_malloc_r+0x20>
 800a9ce:	6005      	str	r5, [r0, #0]
 800a9d0:	e7d6      	b.n	800a980 <_malloc_r+0xa8>
 800a9d2:	bf00      	nop
 800a9d4:	200009d8 	.word	0x200009d8

0800a9d8 <__malloc_lock>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	@ (800a9e0 <__malloc_lock+0x8>)
 800a9da:	f000 bf18 	b.w	800b80e <__retarget_lock_acquire_recursive>
 800a9de:	bf00      	nop
 800a9e0:	20000b1c 	.word	0x20000b1c

0800a9e4 <__malloc_unlock>:
 800a9e4:	4801      	ldr	r0, [pc, #4]	@ (800a9ec <__malloc_unlock+0x8>)
 800a9e6:	f000 bf13 	b.w	800b810 <__retarget_lock_release_recursive>
 800a9ea:	bf00      	nop
 800a9ec:	20000b1c 	.word	0x20000b1c

0800a9f0 <__cvt>:
 800a9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f4:	ec57 6b10 	vmov	r6, r7, d0
 800a9f8:	2f00      	cmp	r7, #0
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	463b      	mov	r3, r7
 800aa00:	bfbb      	ittet	lt
 800aa02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aa06:	461f      	movlt	r7, r3
 800aa08:	2300      	movge	r3, #0
 800aa0a:	232d      	movlt	r3, #45	@ 0x2d
 800aa0c:	700b      	strb	r3, [r1, #0]
 800aa0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aa14:	4691      	mov	r9, r2
 800aa16:	f023 0820 	bic.w	r8, r3, #32
 800aa1a:	bfbc      	itt	lt
 800aa1c:	4632      	movlt	r2, r6
 800aa1e:	4616      	movlt	r6, r2
 800aa20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa24:	d005      	beq.n	800aa32 <__cvt+0x42>
 800aa26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aa2a:	d100      	bne.n	800aa2e <__cvt+0x3e>
 800aa2c:	3401      	adds	r4, #1
 800aa2e:	2102      	movs	r1, #2
 800aa30:	e000      	b.n	800aa34 <__cvt+0x44>
 800aa32:	2103      	movs	r1, #3
 800aa34:	ab03      	add	r3, sp, #12
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	ab02      	add	r3, sp, #8
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	ec47 6b10 	vmov	d0, r6, r7
 800aa40:	4653      	mov	r3, sl
 800aa42:	4622      	mov	r2, r4
 800aa44:	f000 ff7c 	bl	800b940 <_dtoa_r>
 800aa48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	d119      	bne.n	800aa84 <__cvt+0x94>
 800aa50:	f019 0f01 	tst.w	r9, #1
 800aa54:	d00e      	beq.n	800aa74 <__cvt+0x84>
 800aa56:	eb00 0904 	add.w	r9, r0, r4
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4630      	mov	r0, r6
 800aa60:	4639      	mov	r1, r7
 800aa62:	f7f6 f859 	bl	8000b18 <__aeabi_dcmpeq>
 800aa66:	b108      	cbz	r0, 800aa6c <__cvt+0x7c>
 800aa68:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa6c:	2230      	movs	r2, #48	@ 0x30
 800aa6e:	9b03      	ldr	r3, [sp, #12]
 800aa70:	454b      	cmp	r3, r9
 800aa72:	d31e      	bcc.n	800aab2 <__cvt+0xc2>
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa78:	1b5b      	subs	r3, r3, r5
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	b004      	add	sp, #16
 800aa80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa88:	eb00 0904 	add.w	r9, r0, r4
 800aa8c:	d1e5      	bne.n	800aa5a <__cvt+0x6a>
 800aa8e:	7803      	ldrb	r3, [r0, #0]
 800aa90:	2b30      	cmp	r3, #48	@ 0x30
 800aa92:	d10a      	bne.n	800aaaa <__cvt+0xba>
 800aa94:	2200      	movs	r2, #0
 800aa96:	2300      	movs	r3, #0
 800aa98:	4630      	mov	r0, r6
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	f7f6 f83c 	bl	8000b18 <__aeabi_dcmpeq>
 800aaa0:	b918      	cbnz	r0, 800aaaa <__cvt+0xba>
 800aaa2:	f1c4 0401 	rsb	r4, r4, #1
 800aaa6:	f8ca 4000 	str.w	r4, [sl]
 800aaaa:	f8da 3000 	ldr.w	r3, [sl]
 800aaae:	4499      	add	r9, r3
 800aab0:	e7d3      	b.n	800aa5a <__cvt+0x6a>
 800aab2:	1c59      	adds	r1, r3, #1
 800aab4:	9103      	str	r1, [sp, #12]
 800aab6:	701a      	strb	r2, [r3, #0]
 800aab8:	e7d9      	b.n	800aa6e <__cvt+0x7e>

0800aaba <__exponent>:
 800aaba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aabc:	2900      	cmp	r1, #0
 800aabe:	bfba      	itte	lt
 800aac0:	4249      	neglt	r1, r1
 800aac2:	232d      	movlt	r3, #45	@ 0x2d
 800aac4:	232b      	movge	r3, #43	@ 0x2b
 800aac6:	2909      	cmp	r1, #9
 800aac8:	7002      	strb	r2, [r0, #0]
 800aaca:	7043      	strb	r3, [r0, #1]
 800aacc:	dd29      	ble.n	800ab22 <__exponent+0x68>
 800aace:	f10d 0307 	add.w	r3, sp, #7
 800aad2:	461d      	mov	r5, r3
 800aad4:	270a      	movs	r7, #10
 800aad6:	461a      	mov	r2, r3
 800aad8:	fbb1 f6f7 	udiv	r6, r1, r7
 800aadc:	fb07 1416 	mls	r4, r7, r6, r1
 800aae0:	3430      	adds	r4, #48	@ 0x30
 800aae2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aae6:	460c      	mov	r4, r1
 800aae8:	2c63      	cmp	r4, #99	@ 0x63
 800aaea:	f103 33ff 	add.w	r3, r3, #4294967295
 800aaee:	4631      	mov	r1, r6
 800aaf0:	dcf1      	bgt.n	800aad6 <__exponent+0x1c>
 800aaf2:	3130      	adds	r1, #48	@ 0x30
 800aaf4:	1e94      	subs	r4, r2, #2
 800aaf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aafa:	1c41      	adds	r1, r0, #1
 800aafc:	4623      	mov	r3, r4
 800aafe:	42ab      	cmp	r3, r5
 800ab00:	d30a      	bcc.n	800ab18 <__exponent+0x5e>
 800ab02:	f10d 0309 	add.w	r3, sp, #9
 800ab06:	1a9b      	subs	r3, r3, r2
 800ab08:	42ac      	cmp	r4, r5
 800ab0a:	bf88      	it	hi
 800ab0c:	2300      	movhi	r3, #0
 800ab0e:	3302      	adds	r3, #2
 800ab10:	4403      	add	r3, r0
 800ab12:	1a18      	subs	r0, r3, r0
 800ab14:	b003      	add	sp, #12
 800ab16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab18:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab20:	e7ed      	b.n	800aafe <__exponent+0x44>
 800ab22:	2330      	movs	r3, #48	@ 0x30
 800ab24:	3130      	adds	r1, #48	@ 0x30
 800ab26:	7083      	strb	r3, [r0, #2]
 800ab28:	70c1      	strb	r1, [r0, #3]
 800ab2a:	1d03      	adds	r3, r0, #4
 800ab2c:	e7f1      	b.n	800ab12 <__exponent+0x58>
	...

0800ab30 <_printf_float>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	b08d      	sub	sp, #52	@ 0x34
 800ab36:	460c      	mov	r4, r1
 800ab38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab3c:	4616      	mov	r6, r2
 800ab3e:	461f      	mov	r7, r3
 800ab40:	4605      	mov	r5, r0
 800ab42:	f000 fddf 	bl	800b704 <_localeconv_r>
 800ab46:	6803      	ldr	r3, [r0, #0]
 800ab48:	9304      	str	r3, [sp, #16]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7f5 fbb8 	bl	80002c0 <strlen>
 800ab50:	2300      	movs	r3, #0
 800ab52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab54:	f8d8 3000 	ldr.w	r3, [r8]
 800ab58:	9005      	str	r0, [sp, #20]
 800ab5a:	3307      	adds	r3, #7
 800ab5c:	f023 0307 	bic.w	r3, r3, #7
 800ab60:	f103 0208 	add.w	r2, r3, #8
 800ab64:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab68:	f8d4 b000 	ldr.w	fp, [r4]
 800ab6c:	f8c8 2000 	str.w	r2, [r8]
 800ab70:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ab78:	9307      	str	r3, [sp, #28]
 800ab7a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ab82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab86:	4b9c      	ldr	r3, [pc, #624]	@ (800adf8 <_printf_float+0x2c8>)
 800ab88:	f04f 32ff 	mov.w	r2, #4294967295
 800ab8c:	f7f5 fff6 	bl	8000b7c <__aeabi_dcmpun>
 800ab90:	bb70      	cbnz	r0, 800abf0 <_printf_float+0xc0>
 800ab92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab96:	4b98      	ldr	r3, [pc, #608]	@ (800adf8 <_printf_float+0x2c8>)
 800ab98:	f04f 32ff 	mov.w	r2, #4294967295
 800ab9c:	f7f5 ffd0 	bl	8000b40 <__aeabi_dcmple>
 800aba0:	bb30      	cbnz	r0, 800abf0 <_printf_float+0xc0>
 800aba2:	2200      	movs	r2, #0
 800aba4:	2300      	movs	r3, #0
 800aba6:	4640      	mov	r0, r8
 800aba8:	4649      	mov	r1, r9
 800abaa:	f7f5 ffbf 	bl	8000b2c <__aeabi_dcmplt>
 800abae:	b110      	cbz	r0, 800abb6 <_printf_float+0x86>
 800abb0:	232d      	movs	r3, #45	@ 0x2d
 800abb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abb6:	4a91      	ldr	r2, [pc, #580]	@ (800adfc <_printf_float+0x2cc>)
 800abb8:	4b91      	ldr	r3, [pc, #580]	@ (800ae00 <_printf_float+0x2d0>)
 800abba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800abbe:	bf94      	ite	ls
 800abc0:	4690      	movls	r8, r2
 800abc2:	4698      	movhi	r8, r3
 800abc4:	2303      	movs	r3, #3
 800abc6:	6123      	str	r3, [r4, #16]
 800abc8:	f02b 0304 	bic.w	r3, fp, #4
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	f04f 0900 	mov.w	r9, #0
 800abd2:	9700      	str	r7, [sp, #0]
 800abd4:	4633      	mov	r3, r6
 800abd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800abd8:	4621      	mov	r1, r4
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 f9d2 	bl	800af84 <_printf_common>
 800abe0:	3001      	adds	r0, #1
 800abe2:	f040 808d 	bne.w	800ad00 <_printf_float+0x1d0>
 800abe6:	f04f 30ff 	mov.w	r0, #4294967295
 800abea:	b00d      	add	sp, #52	@ 0x34
 800abec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf0:	4642      	mov	r2, r8
 800abf2:	464b      	mov	r3, r9
 800abf4:	4640      	mov	r0, r8
 800abf6:	4649      	mov	r1, r9
 800abf8:	f7f5 ffc0 	bl	8000b7c <__aeabi_dcmpun>
 800abfc:	b140      	cbz	r0, 800ac10 <_printf_float+0xe0>
 800abfe:	464b      	mov	r3, r9
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	bfbc      	itt	lt
 800ac04:	232d      	movlt	r3, #45	@ 0x2d
 800ac06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ac0a:	4a7e      	ldr	r2, [pc, #504]	@ (800ae04 <_printf_float+0x2d4>)
 800ac0c:	4b7e      	ldr	r3, [pc, #504]	@ (800ae08 <_printf_float+0x2d8>)
 800ac0e:	e7d4      	b.n	800abba <_printf_float+0x8a>
 800ac10:	6863      	ldr	r3, [r4, #4]
 800ac12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ac16:	9206      	str	r2, [sp, #24]
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	d13b      	bne.n	800ac94 <_printf_float+0x164>
 800ac1c:	2306      	movs	r3, #6
 800ac1e:	6063      	str	r3, [r4, #4]
 800ac20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ac24:	2300      	movs	r3, #0
 800ac26:	6022      	str	r2, [r4, #0]
 800ac28:	9303      	str	r3, [sp, #12]
 800ac2a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ac30:	ab09      	add	r3, sp, #36	@ 0x24
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	6861      	ldr	r1, [r4, #4]
 800ac36:	ec49 8b10 	vmov	d0, r8, r9
 800ac3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f7ff fed6 	bl	800a9f0 <__cvt>
 800ac44:	9b06      	ldr	r3, [sp, #24]
 800ac46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac48:	2b47      	cmp	r3, #71	@ 0x47
 800ac4a:	4680      	mov	r8, r0
 800ac4c:	d129      	bne.n	800aca2 <_printf_float+0x172>
 800ac4e:	1cc8      	adds	r0, r1, #3
 800ac50:	db02      	blt.n	800ac58 <_printf_float+0x128>
 800ac52:	6863      	ldr	r3, [r4, #4]
 800ac54:	4299      	cmp	r1, r3
 800ac56:	dd41      	ble.n	800acdc <_printf_float+0x1ac>
 800ac58:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac5c:	fa5f fa8a 	uxtb.w	sl, sl
 800ac60:	3901      	subs	r1, #1
 800ac62:	4652      	mov	r2, sl
 800ac64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac68:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac6a:	f7ff ff26 	bl	800aaba <__exponent>
 800ac6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac70:	1813      	adds	r3, r2, r0
 800ac72:	2a01      	cmp	r2, #1
 800ac74:	4681      	mov	r9, r0
 800ac76:	6123      	str	r3, [r4, #16]
 800ac78:	dc02      	bgt.n	800ac80 <_printf_float+0x150>
 800ac7a:	6822      	ldr	r2, [r4, #0]
 800ac7c:	07d2      	lsls	r2, r2, #31
 800ac7e:	d501      	bpl.n	800ac84 <_printf_float+0x154>
 800ac80:	3301      	adds	r3, #1
 800ac82:	6123      	str	r3, [r4, #16]
 800ac84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0a2      	beq.n	800abd2 <_printf_float+0xa2>
 800ac8c:	232d      	movs	r3, #45	@ 0x2d
 800ac8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac92:	e79e      	b.n	800abd2 <_printf_float+0xa2>
 800ac94:	9a06      	ldr	r2, [sp, #24]
 800ac96:	2a47      	cmp	r2, #71	@ 0x47
 800ac98:	d1c2      	bne.n	800ac20 <_printf_float+0xf0>
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1c0      	bne.n	800ac20 <_printf_float+0xf0>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e7bd      	b.n	800ac1e <_printf_float+0xee>
 800aca2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aca6:	d9db      	bls.n	800ac60 <_printf_float+0x130>
 800aca8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800acac:	d118      	bne.n	800ace0 <_printf_float+0x1b0>
 800acae:	2900      	cmp	r1, #0
 800acb0:	6863      	ldr	r3, [r4, #4]
 800acb2:	dd0b      	ble.n	800accc <_printf_float+0x19c>
 800acb4:	6121      	str	r1, [r4, #16]
 800acb6:	b913      	cbnz	r3, 800acbe <_printf_float+0x18e>
 800acb8:	6822      	ldr	r2, [r4, #0]
 800acba:	07d0      	lsls	r0, r2, #31
 800acbc:	d502      	bpl.n	800acc4 <_printf_float+0x194>
 800acbe:	3301      	adds	r3, #1
 800acc0:	440b      	add	r3, r1
 800acc2:	6123      	str	r3, [r4, #16]
 800acc4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800acc6:	f04f 0900 	mov.w	r9, #0
 800acca:	e7db      	b.n	800ac84 <_printf_float+0x154>
 800accc:	b913      	cbnz	r3, 800acd4 <_printf_float+0x1a4>
 800acce:	6822      	ldr	r2, [r4, #0]
 800acd0:	07d2      	lsls	r2, r2, #31
 800acd2:	d501      	bpl.n	800acd8 <_printf_float+0x1a8>
 800acd4:	3302      	adds	r3, #2
 800acd6:	e7f4      	b.n	800acc2 <_printf_float+0x192>
 800acd8:	2301      	movs	r3, #1
 800acda:	e7f2      	b.n	800acc2 <_printf_float+0x192>
 800acdc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ace0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ace2:	4299      	cmp	r1, r3
 800ace4:	db05      	blt.n	800acf2 <_printf_float+0x1c2>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	6121      	str	r1, [r4, #16]
 800acea:	07d8      	lsls	r0, r3, #31
 800acec:	d5ea      	bpl.n	800acc4 <_printf_float+0x194>
 800acee:	1c4b      	adds	r3, r1, #1
 800acf0:	e7e7      	b.n	800acc2 <_printf_float+0x192>
 800acf2:	2900      	cmp	r1, #0
 800acf4:	bfd4      	ite	le
 800acf6:	f1c1 0202 	rsble	r2, r1, #2
 800acfa:	2201      	movgt	r2, #1
 800acfc:	4413      	add	r3, r2
 800acfe:	e7e0      	b.n	800acc2 <_printf_float+0x192>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	055a      	lsls	r2, r3, #21
 800ad04:	d407      	bmi.n	800ad16 <_printf_float+0x1e6>
 800ad06:	6923      	ldr	r3, [r4, #16]
 800ad08:	4642      	mov	r2, r8
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	47b8      	blx	r7
 800ad10:	3001      	adds	r0, #1
 800ad12:	d12b      	bne.n	800ad6c <_printf_float+0x23c>
 800ad14:	e767      	b.n	800abe6 <_printf_float+0xb6>
 800ad16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad1a:	f240 80dd 	bls.w	800aed8 <_printf_float+0x3a8>
 800ad1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad22:	2200      	movs	r2, #0
 800ad24:	2300      	movs	r3, #0
 800ad26:	f7f5 fef7 	bl	8000b18 <__aeabi_dcmpeq>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d033      	beq.n	800ad96 <_printf_float+0x266>
 800ad2e:	4a37      	ldr	r2, [pc, #220]	@ (800ae0c <_printf_float+0x2dc>)
 800ad30:	2301      	movs	r3, #1
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	47b8      	blx	r7
 800ad38:	3001      	adds	r0, #1
 800ad3a:	f43f af54 	beq.w	800abe6 <_printf_float+0xb6>
 800ad3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad42:	4543      	cmp	r3, r8
 800ad44:	db02      	blt.n	800ad4c <_printf_float+0x21c>
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	07d8      	lsls	r0, r3, #31
 800ad4a:	d50f      	bpl.n	800ad6c <_printf_float+0x23c>
 800ad4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad50:	4631      	mov	r1, r6
 800ad52:	4628      	mov	r0, r5
 800ad54:	47b8      	blx	r7
 800ad56:	3001      	adds	r0, #1
 800ad58:	f43f af45 	beq.w	800abe6 <_printf_float+0xb6>
 800ad5c:	f04f 0900 	mov.w	r9, #0
 800ad60:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad64:	f104 0a1a 	add.w	sl, r4, #26
 800ad68:	45c8      	cmp	r8, r9
 800ad6a:	dc09      	bgt.n	800ad80 <_printf_float+0x250>
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	079b      	lsls	r3, r3, #30
 800ad70:	f100 8103 	bmi.w	800af7a <_printf_float+0x44a>
 800ad74:	68e0      	ldr	r0, [r4, #12]
 800ad76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad78:	4298      	cmp	r0, r3
 800ad7a:	bfb8      	it	lt
 800ad7c:	4618      	movlt	r0, r3
 800ad7e:	e734      	b.n	800abea <_printf_float+0xba>
 800ad80:	2301      	movs	r3, #1
 800ad82:	4652      	mov	r2, sl
 800ad84:	4631      	mov	r1, r6
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	f43f af2b 	beq.w	800abe6 <_printf_float+0xb6>
 800ad90:	f109 0901 	add.w	r9, r9, #1
 800ad94:	e7e8      	b.n	800ad68 <_printf_float+0x238>
 800ad96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dc39      	bgt.n	800ae10 <_printf_float+0x2e0>
 800ad9c:	4a1b      	ldr	r2, [pc, #108]	@ (800ae0c <_printf_float+0x2dc>)
 800ad9e:	2301      	movs	r3, #1
 800ada0:	4631      	mov	r1, r6
 800ada2:	4628      	mov	r0, r5
 800ada4:	47b8      	blx	r7
 800ada6:	3001      	adds	r0, #1
 800ada8:	f43f af1d 	beq.w	800abe6 <_printf_float+0xb6>
 800adac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800adb0:	ea59 0303 	orrs.w	r3, r9, r3
 800adb4:	d102      	bne.n	800adbc <_printf_float+0x28c>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	07d9      	lsls	r1, r3, #31
 800adba:	d5d7      	bpl.n	800ad6c <_printf_float+0x23c>
 800adbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adc0:	4631      	mov	r1, r6
 800adc2:	4628      	mov	r0, r5
 800adc4:	47b8      	blx	r7
 800adc6:	3001      	adds	r0, #1
 800adc8:	f43f af0d 	beq.w	800abe6 <_printf_float+0xb6>
 800adcc:	f04f 0a00 	mov.w	sl, #0
 800add0:	f104 0b1a 	add.w	fp, r4, #26
 800add4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add6:	425b      	negs	r3, r3
 800add8:	4553      	cmp	r3, sl
 800adda:	dc01      	bgt.n	800ade0 <_printf_float+0x2b0>
 800addc:	464b      	mov	r3, r9
 800adde:	e793      	b.n	800ad08 <_printf_float+0x1d8>
 800ade0:	2301      	movs	r3, #1
 800ade2:	465a      	mov	r2, fp
 800ade4:	4631      	mov	r1, r6
 800ade6:	4628      	mov	r0, r5
 800ade8:	47b8      	blx	r7
 800adea:	3001      	adds	r0, #1
 800adec:	f43f aefb 	beq.w	800abe6 <_printf_float+0xb6>
 800adf0:	f10a 0a01 	add.w	sl, sl, #1
 800adf4:	e7ee      	b.n	800add4 <_printf_float+0x2a4>
 800adf6:	bf00      	nop
 800adf8:	7fefffff 	.word	0x7fefffff
 800adfc:	0800da04 	.word	0x0800da04
 800ae00:	0800da08 	.word	0x0800da08
 800ae04:	0800da0c 	.word	0x0800da0c
 800ae08:	0800da10 	.word	0x0800da10
 800ae0c:	0800da14 	.word	0x0800da14
 800ae10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae12:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae16:	4553      	cmp	r3, sl
 800ae18:	bfa8      	it	ge
 800ae1a:	4653      	movge	r3, sl
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	4699      	mov	r9, r3
 800ae20:	dc36      	bgt.n	800ae90 <_printf_float+0x360>
 800ae22:	f04f 0b00 	mov.w	fp, #0
 800ae26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae2a:	f104 021a 	add.w	r2, r4, #26
 800ae2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae30:	9306      	str	r3, [sp, #24]
 800ae32:	eba3 0309 	sub.w	r3, r3, r9
 800ae36:	455b      	cmp	r3, fp
 800ae38:	dc31      	bgt.n	800ae9e <_printf_float+0x36e>
 800ae3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae3c:	459a      	cmp	sl, r3
 800ae3e:	dc3a      	bgt.n	800aeb6 <_printf_float+0x386>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	07da      	lsls	r2, r3, #31
 800ae44:	d437      	bmi.n	800aeb6 <_printf_float+0x386>
 800ae46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae48:	ebaa 0903 	sub.w	r9, sl, r3
 800ae4c:	9b06      	ldr	r3, [sp, #24]
 800ae4e:	ebaa 0303 	sub.w	r3, sl, r3
 800ae52:	4599      	cmp	r9, r3
 800ae54:	bfa8      	it	ge
 800ae56:	4699      	movge	r9, r3
 800ae58:	f1b9 0f00 	cmp.w	r9, #0
 800ae5c:	dc33      	bgt.n	800aec6 <_printf_float+0x396>
 800ae5e:	f04f 0800 	mov.w	r8, #0
 800ae62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae66:	f104 0b1a 	add.w	fp, r4, #26
 800ae6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae6c:	ebaa 0303 	sub.w	r3, sl, r3
 800ae70:	eba3 0309 	sub.w	r3, r3, r9
 800ae74:	4543      	cmp	r3, r8
 800ae76:	f77f af79 	ble.w	800ad6c <_printf_float+0x23c>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	465a      	mov	r2, fp
 800ae7e:	4631      	mov	r1, r6
 800ae80:	4628      	mov	r0, r5
 800ae82:	47b8      	blx	r7
 800ae84:	3001      	adds	r0, #1
 800ae86:	f43f aeae 	beq.w	800abe6 <_printf_float+0xb6>
 800ae8a:	f108 0801 	add.w	r8, r8, #1
 800ae8e:	e7ec      	b.n	800ae6a <_printf_float+0x33a>
 800ae90:	4642      	mov	r2, r8
 800ae92:	4631      	mov	r1, r6
 800ae94:	4628      	mov	r0, r5
 800ae96:	47b8      	blx	r7
 800ae98:	3001      	adds	r0, #1
 800ae9a:	d1c2      	bne.n	800ae22 <_printf_float+0x2f2>
 800ae9c:	e6a3      	b.n	800abe6 <_printf_float+0xb6>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4631      	mov	r1, r6
 800aea2:	4628      	mov	r0, r5
 800aea4:	9206      	str	r2, [sp, #24]
 800aea6:	47b8      	blx	r7
 800aea8:	3001      	adds	r0, #1
 800aeaa:	f43f ae9c 	beq.w	800abe6 <_printf_float+0xb6>
 800aeae:	9a06      	ldr	r2, [sp, #24]
 800aeb0:	f10b 0b01 	add.w	fp, fp, #1
 800aeb4:	e7bb      	b.n	800ae2e <_printf_float+0x2fe>
 800aeb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeba:	4631      	mov	r1, r6
 800aebc:	4628      	mov	r0, r5
 800aebe:	47b8      	blx	r7
 800aec0:	3001      	adds	r0, #1
 800aec2:	d1c0      	bne.n	800ae46 <_printf_float+0x316>
 800aec4:	e68f      	b.n	800abe6 <_printf_float+0xb6>
 800aec6:	9a06      	ldr	r2, [sp, #24]
 800aec8:	464b      	mov	r3, r9
 800aeca:	4442      	add	r2, r8
 800aecc:	4631      	mov	r1, r6
 800aece:	4628      	mov	r0, r5
 800aed0:	47b8      	blx	r7
 800aed2:	3001      	adds	r0, #1
 800aed4:	d1c3      	bne.n	800ae5e <_printf_float+0x32e>
 800aed6:	e686      	b.n	800abe6 <_printf_float+0xb6>
 800aed8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aedc:	f1ba 0f01 	cmp.w	sl, #1
 800aee0:	dc01      	bgt.n	800aee6 <_printf_float+0x3b6>
 800aee2:	07db      	lsls	r3, r3, #31
 800aee4:	d536      	bpl.n	800af54 <_printf_float+0x424>
 800aee6:	2301      	movs	r3, #1
 800aee8:	4642      	mov	r2, r8
 800aeea:	4631      	mov	r1, r6
 800aeec:	4628      	mov	r0, r5
 800aeee:	47b8      	blx	r7
 800aef0:	3001      	adds	r0, #1
 800aef2:	f43f ae78 	beq.w	800abe6 <_printf_float+0xb6>
 800aef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aefa:	4631      	mov	r1, r6
 800aefc:	4628      	mov	r0, r5
 800aefe:	47b8      	blx	r7
 800af00:	3001      	adds	r0, #1
 800af02:	f43f ae70 	beq.w	800abe6 <_printf_float+0xb6>
 800af06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af0a:	2200      	movs	r2, #0
 800af0c:	2300      	movs	r3, #0
 800af0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af12:	f7f5 fe01 	bl	8000b18 <__aeabi_dcmpeq>
 800af16:	b9c0      	cbnz	r0, 800af4a <_printf_float+0x41a>
 800af18:	4653      	mov	r3, sl
 800af1a:	f108 0201 	add.w	r2, r8, #1
 800af1e:	4631      	mov	r1, r6
 800af20:	4628      	mov	r0, r5
 800af22:	47b8      	blx	r7
 800af24:	3001      	adds	r0, #1
 800af26:	d10c      	bne.n	800af42 <_printf_float+0x412>
 800af28:	e65d      	b.n	800abe6 <_printf_float+0xb6>
 800af2a:	2301      	movs	r3, #1
 800af2c:	465a      	mov	r2, fp
 800af2e:	4631      	mov	r1, r6
 800af30:	4628      	mov	r0, r5
 800af32:	47b8      	blx	r7
 800af34:	3001      	adds	r0, #1
 800af36:	f43f ae56 	beq.w	800abe6 <_printf_float+0xb6>
 800af3a:	f108 0801 	add.w	r8, r8, #1
 800af3e:	45d0      	cmp	r8, sl
 800af40:	dbf3      	blt.n	800af2a <_printf_float+0x3fa>
 800af42:	464b      	mov	r3, r9
 800af44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af48:	e6df      	b.n	800ad0a <_printf_float+0x1da>
 800af4a:	f04f 0800 	mov.w	r8, #0
 800af4e:	f104 0b1a 	add.w	fp, r4, #26
 800af52:	e7f4      	b.n	800af3e <_printf_float+0x40e>
 800af54:	2301      	movs	r3, #1
 800af56:	4642      	mov	r2, r8
 800af58:	e7e1      	b.n	800af1e <_printf_float+0x3ee>
 800af5a:	2301      	movs	r3, #1
 800af5c:	464a      	mov	r2, r9
 800af5e:	4631      	mov	r1, r6
 800af60:	4628      	mov	r0, r5
 800af62:	47b8      	blx	r7
 800af64:	3001      	adds	r0, #1
 800af66:	f43f ae3e 	beq.w	800abe6 <_printf_float+0xb6>
 800af6a:	f108 0801 	add.w	r8, r8, #1
 800af6e:	68e3      	ldr	r3, [r4, #12]
 800af70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af72:	1a5b      	subs	r3, r3, r1
 800af74:	4543      	cmp	r3, r8
 800af76:	dcf0      	bgt.n	800af5a <_printf_float+0x42a>
 800af78:	e6fc      	b.n	800ad74 <_printf_float+0x244>
 800af7a:	f04f 0800 	mov.w	r8, #0
 800af7e:	f104 0919 	add.w	r9, r4, #25
 800af82:	e7f4      	b.n	800af6e <_printf_float+0x43e>

0800af84 <_printf_common>:
 800af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af88:	4616      	mov	r6, r2
 800af8a:	4698      	mov	r8, r3
 800af8c:	688a      	ldr	r2, [r1, #8]
 800af8e:	690b      	ldr	r3, [r1, #16]
 800af90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af94:	4293      	cmp	r3, r2
 800af96:	bfb8      	it	lt
 800af98:	4613      	movlt	r3, r2
 800af9a:	6033      	str	r3, [r6, #0]
 800af9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afa0:	4607      	mov	r7, r0
 800afa2:	460c      	mov	r4, r1
 800afa4:	b10a      	cbz	r2, 800afaa <_printf_common+0x26>
 800afa6:	3301      	adds	r3, #1
 800afa8:	6033      	str	r3, [r6, #0]
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	0699      	lsls	r1, r3, #26
 800afae:	bf42      	ittt	mi
 800afb0:	6833      	ldrmi	r3, [r6, #0]
 800afb2:	3302      	addmi	r3, #2
 800afb4:	6033      	strmi	r3, [r6, #0]
 800afb6:	6825      	ldr	r5, [r4, #0]
 800afb8:	f015 0506 	ands.w	r5, r5, #6
 800afbc:	d106      	bne.n	800afcc <_printf_common+0x48>
 800afbe:	f104 0a19 	add.w	sl, r4, #25
 800afc2:	68e3      	ldr	r3, [r4, #12]
 800afc4:	6832      	ldr	r2, [r6, #0]
 800afc6:	1a9b      	subs	r3, r3, r2
 800afc8:	42ab      	cmp	r3, r5
 800afca:	dc26      	bgt.n	800b01a <_printf_common+0x96>
 800afcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afd0:	6822      	ldr	r2, [r4, #0]
 800afd2:	3b00      	subs	r3, #0
 800afd4:	bf18      	it	ne
 800afd6:	2301      	movne	r3, #1
 800afd8:	0692      	lsls	r2, r2, #26
 800afda:	d42b      	bmi.n	800b034 <_printf_common+0xb0>
 800afdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afe0:	4641      	mov	r1, r8
 800afe2:	4638      	mov	r0, r7
 800afe4:	47c8      	blx	r9
 800afe6:	3001      	adds	r0, #1
 800afe8:	d01e      	beq.n	800b028 <_printf_common+0xa4>
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	6922      	ldr	r2, [r4, #16]
 800afee:	f003 0306 	and.w	r3, r3, #6
 800aff2:	2b04      	cmp	r3, #4
 800aff4:	bf02      	ittt	eq
 800aff6:	68e5      	ldreq	r5, [r4, #12]
 800aff8:	6833      	ldreq	r3, [r6, #0]
 800affa:	1aed      	subeq	r5, r5, r3
 800affc:	68a3      	ldr	r3, [r4, #8]
 800affe:	bf0c      	ite	eq
 800b000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b004:	2500      	movne	r5, #0
 800b006:	4293      	cmp	r3, r2
 800b008:	bfc4      	itt	gt
 800b00a:	1a9b      	subgt	r3, r3, r2
 800b00c:	18ed      	addgt	r5, r5, r3
 800b00e:	2600      	movs	r6, #0
 800b010:	341a      	adds	r4, #26
 800b012:	42b5      	cmp	r5, r6
 800b014:	d11a      	bne.n	800b04c <_printf_common+0xc8>
 800b016:	2000      	movs	r0, #0
 800b018:	e008      	b.n	800b02c <_printf_common+0xa8>
 800b01a:	2301      	movs	r3, #1
 800b01c:	4652      	mov	r2, sl
 800b01e:	4641      	mov	r1, r8
 800b020:	4638      	mov	r0, r7
 800b022:	47c8      	blx	r9
 800b024:	3001      	adds	r0, #1
 800b026:	d103      	bne.n	800b030 <_printf_common+0xac>
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b030:	3501      	adds	r5, #1
 800b032:	e7c6      	b.n	800afc2 <_printf_common+0x3e>
 800b034:	18e1      	adds	r1, r4, r3
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	2030      	movs	r0, #48	@ 0x30
 800b03a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b03e:	4422      	add	r2, r4
 800b040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b044:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b048:	3302      	adds	r3, #2
 800b04a:	e7c7      	b.n	800afdc <_printf_common+0x58>
 800b04c:	2301      	movs	r3, #1
 800b04e:	4622      	mov	r2, r4
 800b050:	4641      	mov	r1, r8
 800b052:	4638      	mov	r0, r7
 800b054:	47c8      	blx	r9
 800b056:	3001      	adds	r0, #1
 800b058:	d0e6      	beq.n	800b028 <_printf_common+0xa4>
 800b05a:	3601      	adds	r6, #1
 800b05c:	e7d9      	b.n	800b012 <_printf_common+0x8e>
	...

0800b060 <_printf_i>:
 800b060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b064:	7e0f      	ldrb	r7, [r1, #24]
 800b066:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b068:	2f78      	cmp	r7, #120	@ 0x78
 800b06a:	4691      	mov	r9, r2
 800b06c:	4680      	mov	r8, r0
 800b06e:	460c      	mov	r4, r1
 800b070:	469a      	mov	sl, r3
 800b072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b076:	d807      	bhi.n	800b088 <_printf_i+0x28>
 800b078:	2f62      	cmp	r7, #98	@ 0x62
 800b07a:	d80a      	bhi.n	800b092 <_printf_i+0x32>
 800b07c:	2f00      	cmp	r7, #0
 800b07e:	f000 80d2 	beq.w	800b226 <_printf_i+0x1c6>
 800b082:	2f58      	cmp	r7, #88	@ 0x58
 800b084:	f000 80b9 	beq.w	800b1fa <_printf_i+0x19a>
 800b088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b08c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b090:	e03a      	b.n	800b108 <_printf_i+0xa8>
 800b092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b096:	2b15      	cmp	r3, #21
 800b098:	d8f6      	bhi.n	800b088 <_printf_i+0x28>
 800b09a:	a101      	add	r1, pc, #4	@ (adr r1, 800b0a0 <_printf_i+0x40>)
 800b09c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0a0:	0800b0f9 	.word	0x0800b0f9
 800b0a4:	0800b10d 	.word	0x0800b10d
 800b0a8:	0800b089 	.word	0x0800b089
 800b0ac:	0800b089 	.word	0x0800b089
 800b0b0:	0800b089 	.word	0x0800b089
 800b0b4:	0800b089 	.word	0x0800b089
 800b0b8:	0800b10d 	.word	0x0800b10d
 800b0bc:	0800b089 	.word	0x0800b089
 800b0c0:	0800b089 	.word	0x0800b089
 800b0c4:	0800b089 	.word	0x0800b089
 800b0c8:	0800b089 	.word	0x0800b089
 800b0cc:	0800b20d 	.word	0x0800b20d
 800b0d0:	0800b137 	.word	0x0800b137
 800b0d4:	0800b1c7 	.word	0x0800b1c7
 800b0d8:	0800b089 	.word	0x0800b089
 800b0dc:	0800b089 	.word	0x0800b089
 800b0e0:	0800b22f 	.word	0x0800b22f
 800b0e4:	0800b089 	.word	0x0800b089
 800b0e8:	0800b137 	.word	0x0800b137
 800b0ec:	0800b089 	.word	0x0800b089
 800b0f0:	0800b089 	.word	0x0800b089
 800b0f4:	0800b1cf 	.word	0x0800b1cf
 800b0f8:	6833      	ldr	r3, [r6, #0]
 800b0fa:	1d1a      	adds	r2, r3, #4
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6032      	str	r2, [r6, #0]
 800b100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b108:	2301      	movs	r3, #1
 800b10a:	e09d      	b.n	800b248 <_printf_i+0x1e8>
 800b10c:	6833      	ldr	r3, [r6, #0]
 800b10e:	6820      	ldr	r0, [r4, #0]
 800b110:	1d19      	adds	r1, r3, #4
 800b112:	6031      	str	r1, [r6, #0]
 800b114:	0606      	lsls	r6, r0, #24
 800b116:	d501      	bpl.n	800b11c <_printf_i+0xbc>
 800b118:	681d      	ldr	r5, [r3, #0]
 800b11a:	e003      	b.n	800b124 <_printf_i+0xc4>
 800b11c:	0645      	lsls	r5, r0, #25
 800b11e:	d5fb      	bpl.n	800b118 <_printf_i+0xb8>
 800b120:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b124:	2d00      	cmp	r5, #0
 800b126:	da03      	bge.n	800b130 <_printf_i+0xd0>
 800b128:	232d      	movs	r3, #45	@ 0x2d
 800b12a:	426d      	negs	r5, r5
 800b12c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b130:	4859      	ldr	r0, [pc, #356]	@ (800b298 <_printf_i+0x238>)
 800b132:	230a      	movs	r3, #10
 800b134:	e011      	b.n	800b15a <_printf_i+0xfa>
 800b136:	6821      	ldr	r1, [r4, #0]
 800b138:	6833      	ldr	r3, [r6, #0]
 800b13a:	0608      	lsls	r0, r1, #24
 800b13c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b140:	d402      	bmi.n	800b148 <_printf_i+0xe8>
 800b142:	0649      	lsls	r1, r1, #25
 800b144:	bf48      	it	mi
 800b146:	b2ad      	uxthmi	r5, r5
 800b148:	2f6f      	cmp	r7, #111	@ 0x6f
 800b14a:	4853      	ldr	r0, [pc, #332]	@ (800b298 <_printf_i+0x238>)
 800b14c:	6033      	str	r3, [r6, #0]
 800b14e:	bf14      	ite	ne
 800b150:	230a      	movne	r3, #10
 800b152:	2308      	moveq	r3, #8
 800b154:	2100      	movs	r1, #0
 800b156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b15a:	6866      	ldr	r6, [r4, #4]
 800b15c:	60a6      	str	r6, [r4, #8]
 800b15e:	2e00      	cmp	r6, #0
 800b160:	bfa2      	ittt	ge
 800b162:	6821      	ldrge	r1, [r4, #0]
 800b164:	f021 0104 	bicge.w	r1, r1, #4
 800b168:	6021      	strge	r1, [r4, #0]
 800b16a:	b90d      	cbnz	r5, 800b170 <_printf_i+0x110>
 800b16c:	2e00      	cmp	r6, #0
 800b16e:	d04b      	beq.n	800b208 <_printf_i+0x1a8>
 800b170:	4616      	mov	r6, r2
 800b172:	fbb5 f1f3 	udiv	r1, r5, r3
 800b176:	fb03 5711 	mls	r7, r3, r1, r5
 800b17a:	5dc7      	ldrb	r7, [r0, r7]
 800b17c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b180:	462f      	mov	r7, r5
 800b182:	42bb      	cmp	r3, r7
 800b184:	460d      	mov	r5, r1
 800b186:	d9f4      	bls.n	800b172 <_printf_i+0x112>
 800b188:	2b08      	cmp	r3, #8
 800b18a:	d10b      	bne.n	800b1a4 <_printf_i+0x144>
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	07df      	lsls	r7, r3, #31
 800b190:	d508      	bpl.n	800b1a4 <_printf_i+0x144>
 800b192:	6923      	ldr	r3, [r4, #16]
 800b194:	6861      	ldr	r1, [r4, #4]
 800b196:	4299      	cmp	r1, r3
 800b198:	bfde      	ittt	le
 800b19a:	2330      	movle	r3, #48	@ 0x30
 800b19c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1a4:	1b92      	subs	r2, r2, r6
 800b1a6:	6122      	str	r2, [r4, #16]
 800b1a8:	f8cd a000 	str.w	sl, [sp]
 800b1ac:	464b      	mov	r3, r9
 800b1ae:	aa03      	add	r2, sp, #12
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	f7ff fee6 	bl	800af84 <_printf_common>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d14a      	bne.n	800b252 <_printf_i+0x1f2>
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	b004      	add	sp, #16
 800b1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	f043 0320 	orr.w	r3, r3, #32
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	4833      	ldr	r0, [pc, #204]	@ (800b29c <_printf_i+0x23c>)
 800b1d0:	2778      	movs	r7, #120	@ 0x78
 800b1d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	6831      	ldr	r1, [r6, #0]
 800b1da:	061f      	lsls	r7, r3, #24
 800b1dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1e0:	d402      	bmi.n	800b1e8 <_printf_i+0x188>
 800b1e2:	065f      	lsls	r7, r3, #25
 800b1e4:	bf48      	it	mi
 800b1e6:	b2ad      	uxthmi	r5, r5
 800b1e8:	6031      	str	r1, [r6, #0]
 800b1ea:	07d9      	lsls	r1, r3, #31
 800b1ec:	bf44      	itt	mi
 800b1ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b1f2:	6023      	strmi	r3, [r4, #0]
 800b1f4:	b11d      	cbz	r5, 800b1fe <_printf_i+0x19e>
 800b1f6:	2310      	movs	r3, #16
 800b1f8:	e7ac      	b.n	800b154 <_printf_i+0xf4>
 800b1fa:	4827      	ldr	r0, [pc, #156]	@ (800b298 <_printf_i+0x238>)
 800b1fc:	e7e9      	b.n	800b1d2 <_printf_i+0x172>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	f023 0320 	bic.w	r3, r3, #32
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	e7f6      	b.n	800b1f6 <_printf_i+0x196>
 800b208:	4616      	mov	r6, r2
 800b20a:	e7bd      	b.n	800b188 <_printf_i+0x128>
 800b20c:	6833      	ldr	r3, [r6, #0]
 800b20e:	6825      	ldr	r5, [r4, #0]
 800b210:	6961      	ldr	r1, [r4, #20]
 800b212:	1d18      	adds	r0, r3, #4
 800b214:	6030      	str	r0, [r6, #0]
 800b216:	062e      	lsls	r6, r5, #24
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	d501      	bpl.n	800b220 <_printf_i+0x1c0>
 800b21c:	6019      	str	r1, [r3, #0]
 800b21e:	e002      	b.n	800b226 <_printf_i+0x1c6>
 800b220:	0668      	lsls	r0, r5, #25
 800b222:	d5fb      	bpl.n	800b21c <_printf_i+0x1bc>
 800b224:	8019      	strh	r1, [r3, #0]
 800b226:	2300      	movs	r3, #0
 800b228:	6123      	str	r3, [r4, #16]
 800b22a:	4616      	mov	r6, r2
 800b22c:	e7bc      	b.n	800b1a8 <_printf_i+0x148>
 800b22e:	6833      	ldr	r3, [r6, #0]
 800b230:	1d1a      	adds	r2, r3, #4
 800b232:	6032      	str	r2, [r6, #0]
 800b234:	681e      	ldr	r6, [r3, #0]
 800b236:	6862      	ldr	r2, [r4, #4]
 800b238:	2100      	movs	r1, #0
 800b23a:	4630      	mov	r0, r6
 800b23c:	f7f4 fff0 	bl	8000220 <memchr>
 800b240:	b108      	cbz	r0, 800b246 <_printf_i+0x1e6>
 800b242:	1b80      	subs	r0, r0, r6
 800b244:	6060      	str	r0, [r4, #4]
 800b246:	6863      	ldr	r3, [r4, #4]
 800b248:	6123      	str	r3, [r4, #16]
 800b24a:	2300      	movs	r3, #0
 800b24c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b250:	e7aa      	b.n	800b1a8 <_printf_i+0x148>
 800b252:	6923      	ldr	r3, [r4, #16]
 800b254:	4632      	mov	r2, r6
 800b256:	4649      	mov	r1, r9
 800b258:	4640      	mov	r0, r8
 800b25a:	47d0      	blx	sl
 800b25c:	3001      	adds	r0, #1
 800b25e:	d0ad      	beq.n	800b1bc <_printf_i+0x15c>
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	079b      	lsls	r3, r3, #30
 800b264:	d413      	bmi.n	800b28e <_printf_i+0x22e>
 800b266:	68e0      	ldr	r0, [r4, #12]
 800b268:	9b03      	ldr	r3, [sp, #12]
 800b26a:	4298      	cmp	r0, r3
 800b26c:	bfb8      	it	lt
 800b26e:	4618      	movlt	r0, r3
 800b270:	e7a6      	b.n	800b1c0 <_printf_i+0x160>
 800b272:	2301      	movs	r3, #1
 800b274:	4632      	mov	r2, r6
 800b276:	4649      	mov	r1, r9
 800b278:	4640      	mov	r0, r8
 800b27a:	47d0      	blx	sl
 800b27c:	3001      	adds	r0, #1
 800b27e:	d09d      	beq.n	800b1bc <_printf_i+0x15c>
 800b280:	3501      	adds	r5, #1
 800b282:	68e3      	ldr	r3, [r4, #12]
 800b284:	9903      	ldr	r1, [sp, #12]
 800b286:	1a5b      	subs	r3, r3, r1
 800b288:	42ab      	cmp	r3, r5
 800b28a:	dcf2      	bgt.n	800b272 <_printf_i+0x212>
 800b28c:	e7eb      	b.n	800b266 <_printf_i+0x206>
 800b28e:	2500      	movs	r5, #0
 800b290:	f104 0619 	add.w	r6, r4, #25
 800b294:	e7f5      	b.n	800b282 <_printf_i+0x222>
 800b296:	bf00      	nop
 800b298:	0800da16 	.word	0x0800da16
 800b29c:	0800da27 	.word	0x0800da27

0800b2a0 <std>:
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	b510      	push	{r4, lr}
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b2aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2ae:	6083      	str	r3, [r0, #8]
 800b2b0:	8181      	strh	r1, [r0, #12]
 800b2b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b2b4:	81c2      	strh	r2, [r0, #14]
 800b2b6:	6183      	str	r3, [r0, #24]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	2208      	movs	r2, #8
 800b2bc:	305c      	adds	r0, #92	@ 0x5c
 800b2be:	f000 fa19 	bl	800b6f4 <memset>
 800b2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f8 <std+0x58>)
 800b2c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b2fc <std+0x5c>)
 800b2c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b300 <std+0x60>)
 800b2cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b304 <std+0x64>)
 800b2d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b308 <std+0x68>)
 800b2d4:	6224      	str	r4, [r4, #32]
 800b2d6:	429c      	cmp	r4, r3
 800b2d8:	d006      	beq.n	800b2e8 <std+0x48>
 800b2da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b2de:	4294      	cmp	r4, r2
 800b2e0:	d002      	beq.n	800b2e8 <std+0x48>
 800b2e2:	33d0      	adds	r3, #208	@ 0xd0
 800b2e4:	429c      	cmp	r4, r3
 800b2e6:	d105      	bne.n	800b2f4 <std+0x54>
 800b2e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f0:	f000 ba8c 	b.w	800b80c <__retarget_lock_init_recursive>
 800b2f4:	bd10      	pop	{r4, pc}
 800b2f6:	bf00      	nop
 800b2f8:	0800b545 	.word	0x0800b545
 800b2fc:	0800b567 	.word	0x0800b567
 800b300:	0800b59f 	.word	0x0800b59f
 800b304:	0800b5c3 	.word	0x0800b5c3
 800b308:	200009dc 	.word	0x200009dc

0800b30c <stdio_exit_handler>:
 800b30c:	4a02      	ldr	r2, [pc, #8]	@ (800b318 <stdio_exit_handler+0xc>)
 800b30e:	4903      	ldr	r1, [pc, #12]	@ (800b31c <stdio_exit_handler+0x10>)
 800b310:	4803      	ldr	r0, [pc, #12]	@ (800b320 <stdio_exit_handler+0x14>)
 800b312:	f000 b869 	b.w	800b3e8 <_fwalk_sglue>
 800b316:	bf00      	nop
 800b318:	20000044 	.word	0x20000044
 800b31c:	0800d29d 	.word	0x0800d29d
 800b320:	20000054 	.word	0x20000054

0800b324 <cleanup_stdio>:
 800b324:	6841      	ldr	r1, [r0, #4]
 800b326:	4b0c      	ldr	r3, [pc, #48]	@ (800b358 <cleanup_stdio+0x34>)
 800b328:	4299      	cmp	r1, r3
 800b32a:	b510      	push	{r4, lr}
 800b32c:	4604      	mov	r4, r0
 800b32e:	d001      	beq.n	800b334 <cleanup_stdio+0x10>
 800b330:	f001 ffb4 	bl	800d29c <_fflush_r>
 800b334:	68a1      	ldr	r1, [r4, #8]
 800b336:	4b09      	ldr	r3, [pc, #36]	@ (800b35c <cleanup_stdio+0x38>)
 800b338:	4299      	cmp	r1, r3
 800b33a:	d002      	beq.n	800b342 <cleanup_stdio+0x1e>
 800b33c:	4620      	mov	r0, r4
 800b33e:	f001 ffad 	bl	800d29c <_fflush_r>
 800b342:	68e1      	ldr	r1, [r4, #12]
 800b344:	4b06      	ldr	r3, [pc, #24]	@ (800b360 <cleanup_stdio+0x3c>)
 800b346:	4299      	cmp	r1, r3
 800b348:	d004      	beq.n	800b354 <cleanup_stdio+0x30>
 800b34a:	4620      	mov	r0, r4
 800b34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b350:	f001 bfa4 	b.w	800d29c <_fflush_r>
 800b354:	bd10      	pop	{r4, pc}
 800b356:	bf00      	nop
 800b358:	200009dc 	.word	0x200009dc
 800b35c:	20000a44 	.word	0x20000a44
 800b360:	20000aac 	.word	0x20000aac

0800b364 <global_stdio_init.part.0>:
 800b364:	b510      	push	{r4, lr}
 800b366:	4b0b      	ldr	r3, [pc, #44]	@ (800b394 <global_stdio_init.part.0+0x30>)
 800b368:	4c0b      	ldr	r4, [pc, #44]	@ (800b398 <global_stdio_init.part.0+0x34>)
 800b36a:	4a0c      	ldr	r2, [pc, #48]	@ (800b39c <global_stdio_init.part.0+0x38>)
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	4620      	mov	r0, r4
 800b370:	2200      	movs	r2, #0
 800b372:	2104      	movs	r1, #4
 800b374:	f7ff ff94 	bl	800b2a0 <std>
 800b378:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b37c:	2201      	movs	r2, #1
 800b37e:	2109      	movs	r1, #9
 800b380:	f7ff ff8e 	bl	800b2a0 <std>
 800b384:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b388:	2202      	movs	r2, #2
 800b38a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b38e:	2112      	movs	r1, #18
 800b390:	f7ff bf86 	b.w	800b2a0 <std>
 800b394:	20000b14 	.word	0x20000b14
 800b398:	200009dc 	.word	0x200009dc
 800b39c:	0800b30d 	.word	0x0800b30d

0800b3a0 <__sfp_lock_acquire>:
 800b3a0:	4801      	ldr	r0, [pc, #4]	@ (800b3a8 <__sfp_lock_acquire+0x8>)
 800b3a2:	f000 ba34 	b.w	800b80e <__retarget_lock_acquire_recursive>
 800b3a6:	bf00      	nop
 800b3a8:	20000b1d 	.word	0x20000b1d

0800b3ac <__sfp_lock_release>:
 800b3ac:	4801      	ldr	r0, [pc, #4]	@ (800b3b4 <__sfp_lock_release+0x8>)
 800b3ae:	f000 ba2f 	b.w	800b810 <__retarget_lock_release_recursive>
 800b3b2:	bf00      	nop
 800b3b4:	20000b1d 	.word	0x20000b1d

0800b3b8 <__sinit>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	f7ff fff0 	bl	800b3a0 <__sfp_lock_acquire>
 800b3c0:	6a23      	ldr	r3, [r4, #32]
 800b3c2:	b11b      	cbz	r3, 800b3cc <__sinit+0x14>
 800b3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c8:	f7ff bff0 	b.w	800b3ac <__sfp_lock_release>
 800b3cc:	4b04      	ldr	r3, [pc, #16]	@ (800b3e0 <__sinit+0x28>)
 800b3ce:	6223      	str	r3, [r4, #32]
 800b3d0:	4b04      	ldr	r3, [pc, #16]	@ (800b3e4 <__sinit+0x2c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1f5      	bne.n	800b3c4 <__sinit+0xc>
 800b3d8:	f7ff ffc4 	bl	800b364 <global_stdio_init.part.0>
 800b3dc:	e7f2      	b.n	800b3c4 <__sinit+0xc>
 800b3de:	bf00      	nop
 800b3e0:	0800b325 	.word	0x0800b325
 800b3e4:	20000b14 	.word	0x20000b14

0800b3e8 <_fwalk_sglue>:
 800b3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	4688      	mov	r8, r1
 800b3f0:	4614      	mov	r4, r2
 800b3f2:	2600      	movs	r6, #0
 800b3f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3f8:	f1b9 0901 	subs.w	r9, r9, #1
 800b3fc:	d505      	bpl.n	800b40a <_fwalk_sglue+0x22>
 800b3fe:	6824      	ldr	r4, [r4, #0]
 800b400:	2c00      	cmp	r4, #0
 800b402:	d1f7      	bne.n	800b3f4 <_fwalk_sglue+0xc>
 800b404:	4630      	mov	r0, r6
 800b406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b40a:	89ab      	ldrh	r3, [r5, #12]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d907      	bls.n	800b420 <_fwalk_sglue+0x38>
 800b410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b414:	3301      	adds	r3, #1
 800b416:	d003      	beq.n	800b420 <_fwalk_sglue+0x38>
 800b418:	4629      	mov	r1, r5
 800b41a:	4638      	mov	r0, r7
 800b41c:	47c0      	blx	r8
 800b41e:	4306      	orrs	r6, r0
 800b420:	3568      	adds	r5, #104	@ 0x68
 800b422:	e7e9      	b.n	800b3f8 <_fwalk_sglue+0x10>

0800b424 <iprintf>:
 800b424:	b40f      	push	{r0, r1, r2, r3}
 800b426:	b507      	push	{r0, r1, r2, lr}
 800b428:	4906      	ldr	r1, [pc, #24]	@ (800b444 <iprintf+0x20>)
 800b42a:	ab04      	add	r3, sp, #16
 800b42c:	6808      	ldr	r0, [r1, #0]
 800b42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b432:	6881      	ldr	r1, [r0, #8]
 800b434:	9301      	str	r3, [sp, #4]
 800b436:	f001 fd95 	bl	800cf64 <_vfiprintf_r>
 800b43a:	b003      	add	sp, #12
 800b43c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b440:	b004      	add	sp, #16
 800b442:	4770      	bx	lr
 800b444:	20000050 	.word	0x20000050

0800b448 <_puts_r>:
 800b448:	6a03      	ldr	r3, [r0, #32]
 800b44a:	b570      	push	{r4, r5, r6, lr}
 800b44c:	6884      	ldr	r4, [r0, #8]
 800b44e:	4605      	mov	r5, r0
 800b450:	460e      	mov	r6, r1
 800b452:	b90b      	cbnz	r3, 800b458 <_puts_r+0x10>
 800b454:	f7ff ffb0 	bl	800b3b8 <__sinit>
 800b458:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b45a:	07db      	lsls	r3, r3, #31
 800b45c:	d405      	bmi.n	800b46a <_puts_r+0x22>
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	0598      	lsls	r0, r3, #22
 800b462:	d402      	bmi.n	800b46a <_puts_r+0x22>
 800b464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b466:	f000 f9d2 	bl	800b80e <__retarget_lock_acquire_recursive>
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	0719      	lsls	r1, r3, #28
 800b46e:	d502      	bpl.n	800b476 <_puts_r+0x2e>
 800b470:	6923      	ldr	r3, [r4, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d135      	bne.n	800b4e2 <_puts_r+0x9a>
 800b476:	4621      	mov	r1, r4
 800b478:	4628      	mov	r0, r5
 800b47a:	f000 f8e5 	bl	800b648 <__swsetup_r>
 800b47e:	b380      	cbz	r0, 800b4e2 <_puts_r+0x9a>
 800b480:	f04f 35ff 	mov.w	r5, #4294967295
 800b484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b486:	07da      	lsls	r2, r3, #31
 800b488:	d405      	bmi.n	800b496 <_puts_r+0x4e>
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	059b      	lsls	r3, r3, #22
 800b48e:	d402      	bmi.n	800b496 <_puts_r+0x4e>
 800b490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b492:	f000 f9bd 	bl	800b810 <__retarget_lock_release_recursive>
 800b496:	4628      	mov	r0, r5
 800b498:	bd70      	pop	{r4, r5, r6, pc}
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	da04      	bge.n	800b4a8 <_puts_r+0x60>
 800b49e:	69a2      	ldr	r2, [r4, #24]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	dc17      	bgt.n	800b4d4 <_puts_r+0x8c>
 800b4a4:	290a      	cmp	r1, #10
 800b4a6:	d015      	beq.n	800b4d4 <_puts_r+0x8c>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	6022      	str	r2, [r4, #0]
 800b4ae:	7019      	strb	r1, [r3, #0]
 800b4b0:	68a3      	ldr	r3, [r4, #8]
 800b4b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	60a3      	str	r3, [r4, #8]
 800b4ba:	2900      	cmp	r1, #0
 800b4bc:	d1ed      	bne.n	800b49a <_puts_r+0x52>
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	da11      	bge.n	800b4e6 <_puts_r+0x9e>
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	210a      	movs	r1, #10
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f000 f87f 	bl	800b5ca <__swbuf_r>
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	d0d7      	beq.n	800b480 <_puts_r+0x38>
 800b4d0:	250a      	movs	r5, #10
 800b4d2:	e7d7      	b.n	800b484 <_puts_r+0x3c>
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f000 f877 	bl	800b5ca <__swbuf_r>
 800b4dc:	3001      	adds	r0, #1
 800b4de:	d1e7      	bne.n	800b4b0 <_puts_r+0x68>
 800b4e0:	e7ce      	b.n	800b480 <_puts_r+0x38>
 800b4e2:	3e01      	subs	r6, #1
 800b4e4:	e7e4      	b.n	800b4b0 <_puts_r+0x68>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	6022      	str	r2, [r4, #0]
 800b4ec:	220a      	movs	r2, #10
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	e7ee      	b.n	800b4d0 <_puts_r+0x88>
	...

0800b4f4 <puts>:
 800b4f4:	4b02      	ldr	r3, [pc, #8]	@ (800b500 <puts+0xc>)
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	6818      	ldr	r0, [r3, #0]
 800b4fa:	f7ff bfa5 	b.w	800b448 <_puts_r>
 800b4fe:	bf00      	nop
 800b500:	20000050 	.word	0x20000050

0800b504 <siprintf>:
 800b504:	b40e      	push	{r1, r2, r3}
 800b506:	b500      	push	{lr}
 800b508:	b09c      	sub	sp, #112	@ 0x70
 800b50a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b50c:	9002      	str	r0, [sp, #8]
 800b50e:	9006      	str	r0, [sp, #24]
 800b510:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b514:	4809      	ldr	r0, [pc, #36]	@ (800b53c <siprintf+0x38>)
 800b516:	9107      	str	r1, [sp, #28]
 800b518:	9104      	str	r1, [sp, #16]
 800b51a:	4909      	ldr	r1, [pc, #36]	@ (800b540 <siprintf+0x3c>)
 800b51c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b520:	9105      	str	r1, [sp, #20]
 800b522:	6800      	ldr	r0, [r0, #0]
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	a902      	add	r1, sp, #8
 800b528:	f001 fbf6 	bl	800cd18 <_svfiprintf_r>
 800b52c:	9b02      	ldr	r3, [sp, #8]
 800b52e:	2200      	movs	r2, #0
 800b530:	701a      	strb	r2, [r3, #0]
 800b532:	b01c      	add	sp, #112	@ 0x70
 800b534:	f85d eb04 	ldr.w	lr, [sp], #4
 800b538:	b003      	add	sp, #12
 800b53a:	4770      	bx	lr
 800b53c:	20000050 	.word	0x20000050
 800b540:	ffff0208 	.word	0xffff0208

0800b544 <__sread>:
 800b544:	b510      	push	{r4, lr}
 800b546:	460c      	mov	r4, r1
 800b548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b54c:	f000 f900 	bl	800b750 <_read_r>
 800b550:	2800      	cmp	r0, #0
 800b552:	bfab      	itete	ge
 800b554:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b556:	89a3      	ldrhlt	r3, [r4, #12]
 800b558:	181b      	addge	r3, r3, r0
 800b55a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b55e:	bfac      	ite	ge
 800b560:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b562:	81a3      	strhlt	r3, [r4, #12]
 800b564:	bd10      	pop	{r4, pc}

0800b566 <__swrite>:
 800b566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b56a:	461f      	mov	r7, r3
 800b56c:	898b      	ldrh	r3, [r1, #12]
 800b56e:	05db      	lsls	r3, r3, #23
 800b570:	4605      	mov	r5, r0
 800b572:	460c      	mov	r4, r1
 800b574:	4616      	mov	r6, r2
 800b576:	d505      	bpl.n	800b584 <__swrite+0x1e>
 800b578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57c:	2302      	movs	r3, #2
 800b57e:	2200      	movs	r2, #0
 800b580:	f000 f8d4 	bl	800b72c <_lseek_r>
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b58a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b58e:	81a3      	strh	r3, [r4, #12]
 800b590:	4632      	mov	r2, r6
 800b592:	463b      	mov	r3, r7
 800b594:	4628      	mov	r0, r5
 800b596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b59a:	f000 b8fb 	b.w	800b794 <_write_r>

0800b59e <__sseek>:
 800b59e:	b510      	push	{r4, lr}
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a6:	f000 f8c1 	bl	800b72c <_lseek_r>
 800b5aa:	1c43      	adds	r3, r0, #1
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	bf15      	itete	ne
 800b5b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5ba:	81a3      	strheq	r3, [r4, #12]
 800b5bc:	bf18      	it	ne
 800b5be:	81a3      	strhne	r3, [r4, #12]
 800b5c0:	bd10      	pop	{r4, pc}

0800b5c2 <__sclose>:
 800b5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c6:	f000 b8a1 	b.w	800b70c <_close_r>

0800b5ca <__swbuf_r>:
 800b5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5cc:	460e      	mov	r6, r1
 800b5ce:	4614      	mov	r4, r2
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	b118      	cbz	r0, 800b5dc <__swbuf_r+0x12>
 800b5d4:	6a03      	ldr	r3, [r0, #32]
 800b5d6:	b90b      	cbnz	r3, 800b5dc <__swbuf_r+0x12>
 800b5d8:	f7ff feee 	bl	800b3b8 <__sinit>
 800b5dc:	69a3      	ldr	r3, [r4, #24]
 800b5de:	60a3      	str	r3, [r4, #8]
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	071a      	lsls	r2, r3, #28
 800b5e4:	d501      	bpl.n	800b5ea <__swbuf_r+0x20>
 800b5e6:	6923      	ldr	r3, [r4, #16]
 800b5e8:	b943      	cbnz	r3, 800b5fc <__swbuf_r+0x32>
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f000 f82b 	bl	800b648 <__swsetup_r>
 800b5f2:	b118      	cbz	r0, 800b5fc <__swbuf_r+0x32>
 800b5f4:	f04f 37ff 	mov.w	r7, #4294967295
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	6922      	ldr	r2, [r4, #16]
 800b600:	1a98      	subs	r0, r3, r2
 800b602:	6963      	ldr	r3, [r4, #20]
 800b604:	b2f6      	uxtb	r6, r6
 800b606:	4283      	cmp	r3, r0
 800b608:	4637      	mov	r7, r6
 800b60a:	dc05      	bgt.n	800b618 <__swbuf_r+0x4e>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4628      	mov	r0, r5
 800b610:	f001 fe44 	bl	800d29c <_fflush_r>
 800b614:	2800      	cmp	r0, #0
 800b616:	d1ed      	bne.n	800b5f4 <__swbuf_r+0x2a>
 800b618:	68a3      	ldr	r3, [r4, #8]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	60a3      	str	r3, [r4, #8]
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	6022      	str	r2, [r4, #0]
 800b624:	701e      	strb	r6, [r3, #0]
 800b626:	6962      	ldr	r2, [r4, #20]
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d004      	beq.n	800b638 <__swbuf_r+0x6e>
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	07db      	lsls	r3, r3, #31
 800b632:	d5e1      	bpl.n	800b5f8 <__swbuf_r+0x2e>
 800b634:	2e0a      	cmp	r6, #10
 800b636:	d1df      	bne.n	800b5f8 <__swbuf_r+0x2e>
 800b638:	4621      	mov	r1, r4
 800b63a:	4628      	mov	r0, r5
 800b63c:	f001 fe2e 	bl	800d29c <_fflush_r>
 800b640:	2800      	cmp	r0, #0
 800b642:	d0d9      	beq.n	800b5f8 <__swbuf_r+0x2e>
 800b644:	e7d6      	b.n	800b5f4 <__swbuf_r+0x2a>
	...

0800b648 <__swsetup_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4b29      	ldr	r3, [pc, #164]	@ (800b6f0 <__swsetup_r+0xa8>)
 800b64c:	4605      	mov	r5, r0
 800b64e:	6818      	ldr	r0, [r3, #0]
 800b650:	460c      	mov	r4, r1
 800b652:	b118      	cbz	r0, 800b65c <__swsetup_r+0x14>
 800b654:	6a03      	ldr	r3, [r0, #32]
 800b656:	b90b      	cbnz	r3, 800b65c <__swsetup_r+0x14>
 800b658:	f7ff feae 	bl	800b3b8 <__sinit>
 800b65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b660:	0719      	lsls	r1, r3, #28
 800b662:	d422      	bmi.n	800b6aa <__swsetup_r+0x62>
 800b664:	06da      	lsls	r2, r3, #27
 800b666:	d407      	bmi.n	800b678 <__swsetup_r+0x30>
 800b668:	2209      	movs	r2, #9
 800b66a:	602a      	str	r2, [r5, #0]
 800b66c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b670:	81a3      	strh	r3, [r4, #12]
 800b672:	f04f 30ff 	mov.w	r0, #4294967295
 800b676:	e033      	b.n	800b6e0 <__swsetup_r+0x98>
 800b678:	0758      	lsls	r0, r3, #29
 800b67a:	d512      	bpl.n	800b6a2 <__swsetup_r+0x5a>
 800b67c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b67e:	b141      	cbz	r1, 800b692 <__swsetup_r+0x4a>
 800b680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b684:	4299      	cmp	r1, r3
 800b686:	d002      	beq.n	800b68e <__swsetup_r+0x46>
 800b688:	4628      	mov	r0, r5
 800b68a:	f000 ff1d 	bl	800c4c8 <_free_r>
 800b68e:	2300      	movs	r3, #0
 800b690:	6363      	str	r3, [r4, #52]	@ 0x34
 800b692:	89a3      	ldrh	r3, [r4, #12]
 800b694:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	2300      	movs	r3, #0
 800b69c:	6063      	str	r3, [r4, #4]
 800b69e:	6923      	ldr	r3, [r4, #16]
 800b6a0:	6023      	str	r3, [r4, #0]
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	f043 0308 	orr.w	r3, r3, #8
 800b6a8:	81a3      	strh	r3, [r4, #12]
 800b6aa:	6923      	ldr	r3, [r4, #16]
 800b6ac:	b94b      	cbnz	r3, 800b6c2 <__swsetup_r+0x7a>
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6b8:	d003      	beq.n	800b6c2 <__swsetup_r+0x7a>
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	4628      	mov	r0, r5
 800b6be:	f001 fe3b 	bl	800d338 <__smakebuf_r>
 800b6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c6:	f013 0201 	ands.w	r2, r3, #1
 800b6ca:	d00a      	beq.n	800b6e2 <__swsetup_r+0x9a>
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	60a2      	str	r2, [r4, #8]
 800b6d0:	6962      	ldr	r2, [r4, #20]
 800b6d2:	4252      	negs	r2, r2
 800b6d4:	61a2      	str	r2, [r4, #24]
 800b6d6:	6922      	ldr	r2, [r4, #16]
 800b6d8:	b942      	cbnz	r2, 800b6ec <__swsetup_r+0xa4>
 800b6da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6de:	d1c5      	bne.n	800b66c <__swsetup_r+0x24>
 800b6e0:	bd38      	pop	{r3, r4, r5, pc}
 800b6e2:	0799      	lsls	r1, r3, #30
 800b6e4:	bf58      	it	pl
 800b6e6:	6962      	ldrpl	r2, [r4, #20]
 800b6e8:	60a2      	str	r2, [r4, #8]
 800b6ea:	e7f4      	b.n	800b6d6 <__swsetup_r+0x8e>
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	e7f7      	b.n	800b6e0 <__swsetup_r+0x98>
 800b6f0:	20000050 	.word	0x20000050

0800b6f4 <memset>:
 800b6f4:	4402      	add	r2, r0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d100      	bne.n	800b6fe <memset+0xa>
 800b6fc:	4770      	bx	lr
 800b6fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b702:	e7f9      	b.n	800b6f8 <memset+0x4>

0800b704 <_localeconv_r>:
 800b704:	4800      	ldr	r0, [pc, #0]	@ (800b708 <_localeconv_r+0x4>)
 800b706:	4770      	bx	lr
 800b708:	20000190 	.word	0x20000190

0800b70c <_close_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4d06      	ldr	r5, [pc, #24]	@ (800b728 <_close_r+0x1c>)
 800b710:	2300      	movs	r3, #0
 800b712:	4604      	mov	r4, r0
 800b714:	4608      	mov	r0, r1
 800b716:	602b      	str	r3, [r5, #0]
 800b718:	f7f7 ff5b 	bl	80035d2 <_close>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_close_r+0x1a>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_close_r+0x1a>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20000b18 	.word	0x20000b18

0800b72c <_lseek_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d07      	ldr	r5, [pc, #28]	@ (800b74c <_lseek_r+0x20>)
 800b730:	4604      	mov	r4, r0
 800b732:	4608      	mov	r0, r1
 800b734:	4611      	mov	r1, r2
 800b736:	2200      	movs	r2, #0
 800b738:	602a      	str	r2, [r5, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	f7f7 ff70 	bl	8003620 <_lseek>
 800b740:	1c43      	adds	r3, r0, #1
 800b742:	d102      	bne.n	800b74a <_lseek_r+0x1e>
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	b103      	cbz	r3, 800b74a <_lseek_r+0x1e>
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	bd38      	pop	{r3, r4, r5, pc}
 800b74c:	20000b18 	.word	0x20000b18

0800b750 <_read_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4d07      	ldr	r5, [pc, #28]	@ (800b770 <_read_r+0x20>)
 800b754:	4604      	mov	r4, r0
 800b756:	4608      	mov	r0, r1
 800b758:	4611      	mov	r1, r2
 800b75a:	2200      	movs	r2, #0
 800b75c:	602a      	str	r2, [r5, #0]
 800b75e:	461a      	mov	r2, r3
 800b760:	f7f7 ff1a 	bl	8003598 <_read>
 800b764:	1c43      	adds	r3, r0, #1
 800b766:	d102      	bne.n	800b76e <_read_r+0x1e>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	b103      	cbz	r3, 800b76e <_read_r+0x1e>
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	20000b18 	.word	0x20000b18

0800b774 <_sbrk_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d06      	ldr	r5, [pc, #24]	@ (800b790 <_sbrk_r+0x1c>)
 800b778:	2300      	movs	r3, #0
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	602b      	str	r3, [r5, #0]
 800b780:	f7f7 ff5c 	bl	800363c <_sbrk>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_sbrk_r+0x1a>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_sbrk_r+0x1a>
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	20000b18 	.word	0x20000b18

0800b794 <_write_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	4d07      	ldr	r5, [pc, #28]	@ (800b7b4 <_write_r+0x20>)
 800b798:	4604      	mov	r4, r0
 800b79a:	4608      	mov	r0, r1
 800b79c:	4611      	mov	r1, r2
 800b79e:	2200      	movs	r2, #0
 800b7a0:	602a      	str	r2, [r5, #0]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	f7f7 f8c8 	bl	8002938 <_write>
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	d102      	bne.n	800b7b2 <_write_r+0x1e>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	b103      	cbz	r3, 800b7b2 <_write_r+0x1e>
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	20000b18 	.word	0x20000b18

0800b7b8 <__errno>:
 800b7b8:	4b01      	ldr	r3, [pc, #4]	@ (800b7c0 <__errno+0x8>)
 800b7ba:	6818      	ldr	r0, [r3, #0]
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	20000050 	.word	0x20000050

0800b7c4 <__libc_init_array>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	4d0d      	ldr	r5, [pc, #52]	@ (800b7fc <__libc_init_array+0x38>)
 800b7c8:	4c0d      	ldr	r4, [pc, #52]	@ (800b800 <__libc_init_array+0x3c>)
 800b7ca:	1b64      	subs	r4, r4, r5
 800b7cc:	10a4      	asrs	r4, r4, #2
 800b7ce:	2600      	movs	r6, #0
 800b7d0:	42a6      	cmp	r6, r4
 800b7d2:	d109      	bne.n	800b7e8 <__libc_init_array+0x24>
 800b7d4:	4d0b      	ldr	r5, [pc, #44]	@ (800b804 <__libc_init_array+0x40>)
 800b7d6:	4c0c      	ldr	r4, [pc, #48]	@ (800b808 <__libc_init_array+0x44>)
 800b7d8:	f001 ff0c 	bl	800d5f4 <_init>
 800b7dc:	1b64      	subs	r4, r4, r5
 800b7de:	10a4      	asrs	r4, r4, #2
 800b7e0:	2600      	movs	r6, #0
 800b7e2:	42a6      	cmp	r6, r4
 800b7e4:	d105      	bne.n	800b7f2 <__libc_init_array+0x2e>
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}
 800b7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ec:	4798      	blx	r3
 800b7ee:	3601      	adds	r6, #1
 800b7f0:	e7ee      	b.n	800b7d0 <__libc_init_array+0xc>
 800b7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7f6:	4798      	blx	r3
 800b7f8:	3601      	adds	r6, #1
 800b7fa:	e7f2      	b.n	800b7e2 <__libc_init_array+0x1e>
 800b7fc:	0800dd80 	.word	0x0800dd80
 800b800:	0800dd80 	.word	0x0800dd80
 800b804:	0800dd80 	.word	0x0800dd80
 800b808:	0800dd84 	.word	0x0800dd84

0800b80c <__retarget_lock_init_recursive>:
 800b80c:	4770      	bx	lr

0800b80e <__retarget_lock_acquire_recursive>:
 800b80e:	4770      	bx	lr

0800b810 <__retarget_lock_release_recursive>:
 800b810:	4770      	bx	lr

0800b812 <memcpy>:
 800b812:	440a      	add	r2, r1
 800b814:	4291      	cmp	r1, r2
 800b816:	f100 33ff 	add.w	r3, r0, #4294967295
 800b81a:	d100      	bne.n	800b81e <memcpy+0xc>
 800b81c:	4770      	bx	lr
 800b81e:	b510      	push	{r4, lr}
 800b820:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b824:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b828:	4291      	cmp	r1, r2
 800b82a:	d1f9      	bne.n	800b820 <memcpy+0xe>
 800b82c:	bd10      	pop	{r4, pc}

0800b82e <quorem>:
 800b82e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b832:	6903      	ldr	r3, [r0, #16]
 800b834:	690c      	ldr	r4, [r1, #16]
 800b836:	42a3      	cmp	r3, r4
 800b838:	4607      	mov	r7, r0
 800b83a:	db7e      	blt.n	800b93a <quorem+0x10c>
 800b83c:	3c01      	subs	r4, #1
 800b83e:	f101 0814 	add.w	r8, r1, #20
 800b842:	00a3      	lsls	r3, r4, #2
 800b844:	f100 0514 	add.w	r5, r0, #20
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b84e:	9301      	str	r3, [sp, #4]
 800b850:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b854:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b858:	3301      	adds	r3, #1
 800b85a:	429a      	cmp	r2, r3
 800b85c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b860:	fbb2 f6f3 	udiv	r6, r2, r3
 800b864:	d32e      	bcc.n	800b8c4 <quorem+0x96>
 800b866:	f04f 0a00 	mov.w	sl, #0
 800b86a:	46c4      	mov	ip, r8
 800b86c:	46ae      	mov	lr, r5
 800b86e:	46d3      	mov	fp, sl
 800b870:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b874:	b298      	uxth	r0, r3
 800b876:	fb06 a000 	mla	r0, r6, r0, sl
 800b87a:	0c02      	lsrs	r2, r0, #16
 800b87c:	0c1b      	lsrs	r3, r3, #16
 800b87e:	fb06 2303 	mla	r3, r6, r3, r2
 800b882:	f8de 2000 	ldr.w	r2, [lr]
 800b886:	b280      	uxth	r0, r0
 800b888:	b292      	uxth	r2, r2
 800b88a:	1a12      	subs	r2, r2, r0
 800b88c:	445a      	add	r2, fp
 800b88e:	f8de 0000 	ldr.w	r0, [lr]
 800b892:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b896:	b29b      	uxth	r3, r3
 800b898:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b89c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b8a0:	b292      	uxth	r2, r2
 800b8a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b8a6:	45e1      	cmp	r9, ip
 800b8a8:	f84e 2b04 	str.w	r2, [lr], #4
 800b8ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b8b0:	d2de      	bcs.n	800b870 <quorem+0x42>
 800b8b2:	9b00      	ldr	r3, [sp, #0]
 800b8b4:	58eb      	ldr	r3, [r5, r3]
 800b8b6:	b92b      	cbnz	r3, 800b8c4 <quorem+0x96>
 800b8b8:	9b01      	ldr	r3, [sp, #4]
 800b8ba:	3b04      	subs	r3, #4
 800b8bc:	429d      	cmp	r5, r3
 800b8be:	461a      	mov	r2, r3
 800b8c0:	d32f      	bcc.n	800b922 <quorem+0xf4>
 800b8c2:	613c      	str	r4, [r7, #16]
 800b8c4:	4638      	mov	r0, r7
 800b8c6:	f001 f8c3 	bl	800ca50 <__mcmp>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	db25      	blt.n	800b91a <quorem+0xec>
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8d6:	f8d1 c000 	ldr.w	ip, [r1]
 800b8da:	fa1f fe82 	uxth.w	lr, r2
 800b8de:	fa1f f38c 	uxth.w	r3, ip
 800b8e2:	eba3 030e 	sub.w	r3, r3, lr
 800b8e6:	4403      	add	r3, r0
 800b8e8:	0c12      	lsrs	r2, r2, #16
 800b8ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b8ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8f8:	45c1      	cmp	r9, r8
 800b8fa:	f841 3b04 	str.w	r3, [r1], #4
 800b8fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b902:	d2e6      	bcs.n	800b8d2 <quorem+0xa4>
 800b904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b908:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b90c:	b922      	cbnz	r2, 800b918 <quorem+0xea>
 800b90e:	3b04      	subs	r3, #4
 800b910:	429d      	cmp	r5, r3
 800b912:	461a      	mov	r2, r3
 800b914:	d30b      	bcc.n	800b92e <quorem+0x100>
 800b916:	613c      	str	r4, [r7, #16]
 800b918:	3601      	adds	r6, #1
 800b91a:	4630      	mov	r0, r6
 800b91c:	b003      	add	sp, #12
 800b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b922:	6812      	ldr	r2, [r2, #0]
 800b924:	3b04      	subs	r3, #4
 800b926:	2a00      	cmp	r2, #0
 800b928:	d1cb      	bne.n	800b8c2 <quorem+0x94>
 800b92a:	3c01      	subs	r4, #1
 800b92c:	e7c6      	b.n	800b8bc <quorem+0x8e>
 800b92e:	6812      	ldr	r2, [r2, #0]
 800b930:	3b04      	subs	r3, #4
 800b932:	2a00      	cmp	r2, #0
 800b934:	d1ef      	bne.n	800b916 <quorem+0xe8>
 800b936:	3c01      	subs	r4, #1
 800b938:	e7ea      	b.n	800b910 <quorem+0xe2>
 800b93a:	2000      	movs	r0, #0
 800b93c:	e7ee      	b.n	800b91c <quorem+0xee>
	...

0800b940 <_dtoa_r>:
 800b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b944:	69c7      	ldr	r7, [r0, #28]
 800b946:	b099      	sub	sp, #100	@ 0x64
 800b948:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b94c:	ec55 4b10 	vmov	r4, r5, d0
 800b950:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b952:	9109      	str	r1, [sp, #36]	@ 0x24
 800b954:	4683      	mov	fp, r0
 800b956:	920e      	str	r2, [sp, #56]	@ 0x38
 800b958:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b95a:	b97f      	cbnz	r7, 800b97c <_dtoa_r+0x3c>
 800b95c:	2010      	movs	r0, #16
 800b95e:	f7fe ff89 	bl	800a874 <malloc>
 800b962:	4602      	mov	r2, r0
 800b964:	f8cb 001c 	str.w	r0, [fp, #28]
 800b968:	b920      	cbnz	r0, 800b974 <_dtoa_r+0x34>
 800b96a:	4ba7      	ldr	r3, [pc, #668]	@ (800bc08 <_dtoa_r+0x2c8>)
 800b96c:	21ef      	movs	r1, #239	@ 0xef
 800b96e:	48a7      	ldr	r0, [pc, #668]	@ (800bc0c <_dtoa_r+0x2cc>)
 800b970:	f001 fd5a 	bl	800d428 <__assert_func>
 800b974:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b978:	6007      	str	r7, [r0, #0]
 800b97a:	60c7      	str	r7, [r0, #12]
 800b97c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b980:	6819      	ldr	r1, [r3, #0]
 800b982:	b159      	cbz	r1, 800b99c <_dtoa_r+0x5c>
 800b984:	685a      	ldr	r2, [r3, #4]
 800b986:	604a      	str	r2, [r1, #4]
 800b988:	2301      	movs	r3, #1
 800b98a:	4093      	lsls	r3, r2
 800b98c:	608b      	str	r3, [r1, #8]
 800b98e:	4658      	mov	r0, fp
 800b990:	f000 fe24 	bl	800c5dc <_Bfree>
 800b994:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b998:	2200      	movs	r2, #0
 800b99a:	601a      	str	r2, [r3, #0]
 800b99c:	1e2b      	subs	r3, r5, #0
 800b99e:	bfb9      	ittee	lt
 800b9a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b9a4:	9303      	strlt	r3, [sp, #12]
 800b9a6:	2300      	movge	r3, #0
 800b9a8:	6033      	strge	r3, [r6, #0]
 800b9aa:	9f03      	ldr	r7, [sp, #12]
 800b9ac:	4b98      	ldr	r3, [pc, #608]	@ (800bc10 <_dtoa_r+0x2d0>)
 800b9ae:	bfbc      	itt	lt
 800b9b0:	2201      	movlt	r2, #1
 800b9b2:	6032      	strlt	r2, [r6, #0]
 800b9b4:	43bb      	bics	r3, r7
 800b9b6:	d112      	bne.n	800b9de <_dtoa_r+0x9e>
 800b9b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b9ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9c4:	4323      	orrs	r3, r4
 800b9c6:	f000 854d 	beq.w	800c464 <_dtoa_r+0xb24>
 800b9ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bc24 <_dtoa_r+0x2e4>
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f000 854f 	beq.w	800c474 <_dtoa_r+0xb34>
 800b9d6:	f10a 0303 	add.w	r3, sl, #3
 800b9da:	f000 bd49 	b.w	800c470 <_dtoa_r+0xb30>
 800b9de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	ec51 0b17 	vmov	r0, r1, d7
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b9ee:	f7f5 f893 	bl	8000b18 <__aeabi_dcmpeq>
 800b9f2:	4680      	mov	r8, r0
 800b9f4:	b158      	cbz	r0, 800ba0e <_dtoa_r+0xce>
 800b9f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9fe:	b113      	cbz	r3, 800ba06 <_dtoa_r+0xc6>
 800ba00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba02:	4b84      	ldr	r3, [pc, #528]	@ (800bc14 <_dtoa_r+0x2d4>)
 800ba04:	6013      	str	r3, [r2, #0]
 800ba06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bc28 <_dtoa_r+0x2e8>
 800ba0a:	f000 bd33 	b.w	800c474 <_dtoa_r+0xb34>
 800ba0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ba12:	aa16      	add	r2, sp, #88	@ 0x58
 800ba14:	a917      	add	r1, sp, #92	@ 0x5c
 800ba16:	4658      	mov	r0, fp
 800ba18:	f001 f8ca 	bl	800cbb0 <__d2b>
 800ba1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ba20:	4681      	mov	r9, r0
 800ba22:	2e00      	cmp	r6, #0
 800ba24:	d077      	beq.n	800bb16 <_dtoa_r+0x1d6>
 800ba26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ba2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ba38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ba3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ba40:	4619      	mov	r1, r3
 800ba42:	2200      	movs	r2, #0
 800ba44:	4b74      	ldr	r3, [pc, #464]	@ (800bc18 <_dtoa_r+0x2d8>)
 800ba46:	f7f4 fc47 	bl	80002d8 <__aeabi_dsub>
 800ba4a:	a369      	add	r3, pc, #420	@ (adr r3, 800bbf0 <_dtoa_r+0x2b0>)
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	f7f4 fdfa 	bl	8000648 <__aeabi_dmul>
 800ba54:	a368      	add	r3, pc, #416	@ (adr r3, 800bbf8 <_dtoa_r+0x2b8>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fc3f 	bl	80002dc <__adddf3>
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4630      	mov	r0, r6
 800ba62:	460d      	mov	r5, r1
 800ba64:	f7f4 fd86 	bl	8000574 <__aeabi_i2d>
 800ba68:	a365      	add	r3, pc, #404	@ (adr r3, 800bc00 <_dtoa_r+0x2c0>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f7f4 fdeb 	bl	8000648 <__aeabi_dmul>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4620      	mov	r0, r4
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7f4 fc2f 	bl	80002dc <__adddf3>
 800ba7e:	4604      	mov	r4, r0
 800ba80:	460d      	mov	r5, r1
 800ba82:	f7f5 f891 	bl	8000ba8 <__aeabi_d2iz>
 800ba86:	2200      	movs	r2, #0
 800ba88:	4607      	mov	r7, r0
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	4629      	mov	r1, r5
 800ba90:	f7f5 f84c 	bl	8000b2c <__aeabi_dcmplt>
 800ba94:	b140      	cbz	r0, 800baa8 <_dtoa_r+0x168>
 800ba96:	4638      	mov	r0, r7
 800ba98:	f7f4 fd6c 	bl	8000574 <__aeabi_i2d>
 800ba9c:	4622      	mov	r2, r4
 800ba9e:	462b      	mov	r3, r5
 800baa0:	f7f5 f83a 	bl	8000b18 <__aeabi_dcmpeq>
 800baa4:	b900      	cbnz	r0, 800baa8 <_dtoa_r+0x168>
 800baa6:	3f01      	subs	r7, #1
 800baa8:	2f16      	cmp	r7, #22
 800baaa:	d851      	bhi.n	800bb50 <_dtoa_r+0x210>
 800baac:	4b5b      	ldr	r3, [pc, #364]	@ (800bc1c <_dtoa_r+0x2dc>)
 800baae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800baba:	f7f5 f837 	bl	8000b2c <__aeabi_dcmplt>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d048      	beq.n	800bb54 <_dtoa_r+0x214>
 800bac2:	3f01      	subs	r7, #1
 800bac4:	2300      	movs	r3, #0
 800bac6:	9312      	str	r3, [sp, #72]	@ 0x48
 800bac8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800baca:	1b9b      	subs	r3, r3, r6
 800bacc:	1e5a      	subs	r2, r3, #1
 800bace:	bf44      	itt	mi
 800bad0:	f1c3 0801 	rsbmi	r8, r3, #1
 800bad4:	2300      	movmi	r3, #0
 800bad6:	9208      	str	r2, [sp, #32]
 800bad8:	bf54      	ite	pl
 800bada:	f04f 0800 	movpl.w	r8, #0
 800bade:	9308      	strmi	r3, [sp, #32]
 800bae0:	2f00      	cmp	r7, #0
 800bae2:	db39      	blt.n	800bb58 <_dtoa_r+0x218>
 800bae4:	9b08      	ldr	r3, [sp, #32]
 800bae6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bae8:	443b      	add	r3, r7
 800baea:	9308      	str	r3, [sp, #32]
 800baec:	2300      	movs	r3, #0
 800baee:	930a      	str	r3, [sp, #40]	@ 0x28
 800baf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baf2:	2b09      	cmp	r3, #9
 800baf4:	d864      	bhi.n	800bbc0 <_dtoa_r+0x280>
 800baf6:	2b05      	cmp	r3, #5
 800baf8:	bfc4      	itt	gt
 800bafa:	3b04      	subgt	r3, #4
 800bafc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb00:	f1a3 0302 	sub.w	r3, r3, #2
 800bb04:	bfcc      	ite	gt
 800bb06:	2400      	movgt	r4, #0
 800bb08:	2401      	movle	r4, #1
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d863      	bhi.n	800bbd6 <_dtoa_r+0x296>
 800bb0e:	e8df f003 	tbb	[pc, r3]
 800bb12:	372a      	.short	0x372a
 800bb14:	5535      	.short	0x5535
 800bb16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bb1a:	441e      	add	r6, r3
 800bb1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bb20:	2b20      	cmp	r3, #32
 800bb22:	bfc1      	itttt	gt
 800bb24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bb28:	409f      	lslgt	r7, r3
 800bb2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bb2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bb32:	bfd6      	itet	le
 800bb34:	f1c3 0320 	rsble	r3, r3, #32
 800bb38:	ea47 0003 	orrgt.w	r0, r7, r3
 800bb3c:	fa04 f003 	lslle.w	r0, r4, r3
 800bb40:	f7f4 fd08 	bl	8000554 <__aeabi_ui2d>
 800bb44:	2201      	movs	r2, #1
 800bb46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bb4a:	3e01      	subs	r6, #1
 800bb4c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bb4e:	e777      	b.n	800ba40 <_dtoa_r+0x100>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e7b8      	b.n	800bac6 <_dtoa_r+0x186>
 800bb54:	9012      	str	r0, [sp, #72]	@ 0x48
 800bb56:	e7b7      	b.n	800bac8 <_dtoa_r+0x188>
 800bb58:	427b      	negs	r3, r7
 800bb5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	eba8 0807 	sub.w	r8, r8, r7
 800bb62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb64:	e7c4      	b.n	800baf0 <_dtoa_r+0x1b0>
 800bb66:	2300      	movs	r3, #0
 800bb68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	dc35      	bgt.n	800bbdc <_dtoa_r+0x29c>
 800bb70:	2301      	movs	r3, #1
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	9307      	str	r3, [sp, #28]
 800bb76:	461a      	mov	r2, r3
 800bb78:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb7a:	e00b      	b.n	800bb94 <_dtoa_r+0x254>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e7f3      	b.n	800bb68 <_dtoa_r+0x228>
 800bb80:	2300      	movs	r3, #0
 800bb82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb86:	18fb      	adds	r3, r7, r3
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	9307      	str	r3, [sp, #28]
 800bb90:	bfb8      	it	lt
 800bb92:	2301      	movlt	r3, #1
 800bb94:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	2204      	movs	r2, #4
 800bb9c:	f102 0514 	add.w	r5, r2, #20
 800bba0:	429d      	cmp	r5, r3
 800bba2:	d91f      	bls.n	800bbe4 <_dtoa_r+0x2a4>
 800bba4:	6041      	str	r1, [r0, #4]
 800bba6:	4658      	mov	r0, fp
 800bba8:	f000 fcd8 	bl	800c55c <_Balloc>
 800bbac:	4682      	mov	sl, r0
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d13c      	bne.n	800bc2c <_dtoa_r+0x2ec>
 800bbb2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc20 <_dtoa_r+0x2e0>)
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	f240 11af 	movw	r1, #431	@ 0x1af
 800bbba:	e6d8      	b.n	800b96e <_dtoa_r+0x2e>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e7e0      	b.n	800bb82 <_dtoa_r+0x242>
 800bbc0:	2401      	movs	r4, #1
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	9307      	str	r3, [sp, #28]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	2312      	movs	r3, #18
 800bbd4:	e7d0      	b.n	800bb78 <_dtoa_r+0x238>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbda:	e7f5      	b.n	800bbc8 <_dtoa_r+0x288>
 800bbdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	9307      	str	r3, [sp, #28]
 800bbe2:	e7d7      	b.n	800bb94 <_dtoa_r+0x254>
 800bbe4:	3101      	adds	r1, #1
 800bbe6:	0052      	lsls	r2, r2, #1
 800bbe8:	e7d8      	b.n	800bb9c <_dtoa_r+0x25c>
 800bbea:	bf00      	nop
 800bbec:	f3af 8000 	nop.w
 800bbf0:	636f4361 	.word	0x636f4361
 800bbf4:	3fd287a7 	.word	0x3fd287a7
 800bbf8:	8b60c8b3 	.word	0x8b60c8b3
 800bbfc:	3fc68a28 	.word	0x3fc68a28
 800bc00:	509f79fb 	.word	0x509f79fb
 800bc04:	3fd34413 	.word	0x3fd34413
 800bc08:	0800da45 	.word	0x0800da45
 800bc0c:	0800da5c 	.word	0x0800da5c
 800bc10:	7ff00000 	.word	0x7ff00000
 800bc14:	0800da15 	.word	0x0800da15
 800bc18:	3ff80000 	.word	0x3ff80000
 800bc1c:	0800db58 	.word	0x0800db58
 800bc20:	0800dab4 	.word	0x0800dab4
 800bc24:	0800da41 	.word	0x0800da41
 800bc28:	0800da14 	.word	0x0800da14
 800bc2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc30:	6018      	str	r0, [r3, #0]
 800bc32:	9b07      	ldr	r3, [sp, #28]
 800bc34:	2b0e      	cmp	r3, #14
 800bc36:	f200 80a4 	bhi.w	800bd82 <_dtoa_r+0x442>
 800bc3a:	2c00      	cmp	r4, #0
 800bc3c:	f000 80a1 	beq.w	800bd82 <_dtoa_r+0x442>
 800bc40:	2f00      	cmp	r7, #0
 800bc42:	dd33      	ble.n	800bcac <_dtoa_r+0x36c>
 800bc44:	4bad      	ldr	r3, [pc, #692]	@ (800befc <_dtoa_r+0x5bc>)
 800bc46:	f007 020f 	and.w	r2, r7, #15
 800bc4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc4e:	ed93 7b00 	vldr	d7, [r3]
 800bc52:	05f8      	lsls	r0, r7, #23
 800bc54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bc58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bc5c:	d516      	bpl.n	800bc8c <_dtoa_r+0x34c>
 800bc5e:	4ba8      	ldr	r3, [pc, #672]	@ (800bf00 <_dtoa_r+0x5c0>)
 800bc60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc68:	f7f4 fe18 	bl	800089c <__aeabi_ddiv>
 800bc6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc70:	f004 040f 	and.w	r4, r4, #15
 800bc74:	2603      	movs	r6, #3
 800bc76:	4da2      	ldr	r5, [pc, #648]	@ (800bf00 <_dtoa_r+0x5c0>)
 800bc78:	b954      	cbnz	r4, 800bc90 <_dtoa_r+0x350>
 800bc7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc82:	f7f4 fe0b 	bl	800089c <__aeabi_ddiv>
 800bc86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc8a:	e028      	b.n	800bcde <_dtoa_r+0x39e>
 800bc8c:	2602      	movs	r6, #2
 800bc8e:	e7f2      	b.n	800bc76 <_dtoa_r+0x336>
 800bc90:	07e1      	lsls	r1, r4, #31
 800bc92:	d508      	bpl.n	800bca6 <_dtoa_r+0x366>
 800bc94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc9c:	f7f4 fcd4 	bl	8000648 <__aeabi_dmul>
 800bca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bca4:	3601      	adds	r6, #1
 800bca6:	1064      	asrs	r4, r4, #1
 800bca8:	3508      	adds	r5, #8
 800bcaa:	e7e5      	b.n	800bc78 <_dtoa_r+0x338>
 800bcac:	f000 80d2 	beq.w	800be54 <_dtoa_r+0x514>
 800bcb0:	427c      	negs	r4, r7
 800bcb2:	4b92      	ldr	r3, [pc, #584]	@ (800befc <_dtoa_r+0x5bc>)
 800bcb4:	4d92      	ldr	r5, [pc, #584]	@ (800bf00 <_dtoa_r+0x5c0>)
 800bcb6:	f004 020f 	and.w	r2, r4, #15
 800bcba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcc6:	f7f4 fcbf 	bl	8000648 <__aeabi_dmul>
 800bcca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcce:	1124      	asrs	r4, r4, #4
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	2602      	movs	r6, #2
 800bcd4:	2c00      	cmp	r4, #0
 800bcd6:	f040 80b2 	bne.w	800be3e <_dtoa_r+0x4fe>
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1d3      	bne.n	800bc86 <_dtoa_r+0x346>
 800bcde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bce0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 80b7 	beq.w	800be58 <_dtoa_r+0x518>
 800bcea:	4b86      	ldr	r3, [pc, #536]	@ (800bf04 <_dtoa_r+0x5c4>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	4620      	mov	r0, r4
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	f7f4 ff1b 	bl	8000b2c <__aeabi_dcmplt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	f000 80ae 	beq.w	800be58 <_dtoa_r+0x518>
 800bcfc:	9b07      	ldr	r3, [sp, #28]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 80aa 	beq.w	800be58 <_dtoa_r+0x518>
 800bd04:	9b00      	ldr	r3, [sp, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dd37      	ble.n	800bd7a <_dtoa_r+0x43a>
 800bd0a:	1e7b      	subs	r3, r7, #1
 800bd0c:	9304      	str	r3, [sp, #16]
 800bd0e:	4620      	mov	r0, r4
 800bd10:	4b7d      	ldr	r3, [pc, #500]	@ (800bf08 <_dtoa_r+0x5c8>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	4629      	mov	r1, r5
 800bd16:	f7f4 fc97 	bl	8000648 <__aeabi_dmul>
 800bd1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd1e:	9c00      	ldr	r4, [sp, #0]
 800bd20:	3601      	adds	r6, #1
 800bd22:	4630      	mov	r0, r6
 800bd24:	f7f4 fc26 	bl	8000574 <__aeabi_i2d>
 800bd28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd2c:	f7f4 fc8c 	bl	8000648 <__aeabi_dmul>
 800bd30:	4b76      	ldr	r3, [pc, #472]	@ (800bf0c <_dtoa_r+0x5cc>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	f7f4 fad2 	bl	80002dc <__adddf3>
 800bd38:	4605      	mov	r5, r0
 800bd3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bd3e:	2c00      	cmp	r4, #0
 800bd40:	f040 808d 	bne.w	800be5e <_dtoa_r+0x51e>
 800bd44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd48:	4b71      	ldr	r3, [pc, #452]	@ (800bf10 <_dtoa_r+0x5d0>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f7f4 fac4 	bl	80002d8 <__aeabi_dsub>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd58:	462a      	mov	r2, r5
 800bd5a:	4633      	mov	r3, r6
 800bd5c:	f7f4 ff04 	bl	8000b68 <__aeabi_dcmpgt>
 800bd60:	2800      	cmp	r0, #0
 800bd62:	f040 828b 	bne.w	800c27c <_dtoa_r+0x93c>
 800bd66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd70:	f7f4 fedc 	bl	8000b2c <__aeabi_dcmplt>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	f040 8128 	bne.w	800bfca <_dtoa_r+0x68a>
 800bd7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bd7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bd82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f2c0 815a 	blt.w	800c03e <_dtoa_r+0x6fe>
 800bd8a:	2f0e      	cmp	r7, #14
 800bd8c:	f300 8157 	bgt.w	800c03e <_dtoa_r+0x6fe>
 800bd90:	4b5a      	ldr	r3, [pc, #360]	@ (800befc <_dtoa_r+0x5bc>)
 800bd92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd96:	ed93 7b00 	vldr	d7, [r3]
 800bd9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	ed8d 7b00 	vstr	d7, [sp]
 800bda2:	da03      	bge.n	800bdac <_dtoa_r+0x46c>
 800bda4:	9b07      	ldr	r3, [sp, #28]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f340 8101 	ble.w	800bfae <_dtoa_r+0x66e>
 800bdac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bdb0:	4656      	mov	r6, sl
 800bdb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	4629      	mov	r1, r5
 800bdba:	f7f4 fd6f 	bl	800089c <__aeabi_ddiv>
 800bdbe:	f7f4 fef3 	bl	8000ba8 <__aeabi_d2iz>
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	f7f4 fbd6 	bl	8000574 <__aeabi_i2d>
 800bdc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdcc:	f7f4 fc3c 	bl	8000648 <__aeabi_dmul>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bddc:	f7f4 fa7c 	bl	80002d8 <__aeabi_dsub>
 800bde0:	f806 4b01 	strb.w	r4, [r6], #1
 800bde4:	9d07      	ldr	r5, [sp, #28]
 800bde6:	eba6 040a 	sub.w	r4, r6, sl
 800bdea:	42a5      	cmp	r5, r4
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	f040 8117 	bne.w	800c022 <_dtoa_r+0x6e2>
 800bdf4:	f7f4 fa72 	bl	80002dc <__adddf3>
 800bdf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	460d      	mov	r5, r1
 800be00:	f7f4 feb2 	bl	8000b68 <__aeabi_dcmpgt>
 800be04:	2800      	cmp	r0, #0
 800be06:	f040 80f9 	bne.w	800bffc <_dtoa_r+0x6bc>
 800be0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be0e:	4620      	mov	r0, r4
 800be10:	4629      	mov	r1, r5
 800be12:	f7f4 fe81 	bl	8000b18 <__aeabi_dcmpeq>
 800be16:	b118      	cbz	r0, 800be20 <_dtoa_r+0x4e0>
 800be18:	f018 0f01 	tst.w	r8, #1
 800be1c:	f040 80ee 	bne.w	800bffc <_dtoa_r+0x6bc>
 800be20:	4649      	mov	r1, r9
 800be22:	4658      	mov	r0, fp
 800be24:	f000 fbda 	bl	800c5dc <_Bfree>
 800be28:	2300      	movs	r3, #0
 800be2a:	7033      	strb	r3, [r6, #0]
 800be2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be2e:	3701      	adds	r7, #1
 800be30:	601f      	str	r7, [r3, #0]
 800be32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 831d 	beq.w	800c474 <_dtoa_r+0xb34>
 800be3a:	601e      	str	r6, [r3, #0]
 800be3c:	e31a      	b.n	800c474 <_dtoa_r+0xb34>
 800be3e:	07e2      	lsls	r2, r4, #31
 800be40:	d505      	bpl.n	800be4e <_dtoa_r+0x50e>
 800be42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be46:	f7f4 fbff 	bl	8000648 <__aeabi_dmul>
 800be4a:	3601      	adds	r6, #1
 800be4c:	2301      	movs	r3, #1
 800be4e:	1064      	asrs	r4, r4, #1
 800be50:	3508      	adds	r5, #8
 800be52:	e73f      	b.n	800bcd4 <_dtoa_r+0x394>
 800be54:	2602      	movs	r6, #2
 800be56:	e742      	b.n	800bcde <_dtoa_r+0x39e>
 800be58:	9c07      	ldr	r4, [sp, #28]
 800be5a:	9704      	str	r7, [sp, #16]
 800be5c:	e761      	b.n	800bd22 <_dtoa_r+0x3e2>
 800be5e:	4b27      	ldr	r3, [pc, #156]	@ (800befc <_dtoa_r+0x5bc>)
 800be60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be6a:	4454      	add	r4, sl
 800be6c:	2900      	cmp	r1, #0
 800be6e:	d053      	beq.n	800bf18 <_dtoa_r+0x5d8>
 800be70:	4928      	ldr	r1, [pc, #160]	@ (800bf14 <_dtoa_r+0x5d4>)
 800be72:	2000      	movs	r0, #0
 800be74:	f7f4 fd12 	bl	800089c <__aeabi_ddiv>
 800be78:	4633      	mov	r3, r6
 800be7a:	462a      	mov	r2, r5
 800be7c:	f7f4 fa2c 	bl	80002d8 <__aeabi_dsub>
 800be80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be84:	4656      	mov	r6, sl
 800be86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be8a:	f7f4 fe8d 	bl	8000ba8 <__aeabi_d2iz>
 800be8e:	4605      	mov	r5, r0
 800be90:	f7f4 fb70 	bl	8000574 <__aeabi_i2d>
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be9c:	f7f4 fa1c 	bl	80002d8 <__aeabi_dsub>
 800bea0:	3530      	adds	r5, #48	@ 0x30
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800beaa:	f806 5b01 	strb.w	r5, [r6], #1
 800beae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800beb2:	f7f4 fe3b 	bl	8000b2c <__aeabi_dcmplt>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d171      	bne.n	800bf9e <_dtoa_r+0x65e>
 800beba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bebe:	4911      	ldr	r1, [pc, #68]	@ (800bf04 <_dtoa_r+0x5c4>)
 800bec0:	2000      	movs	r0, #0
 800bec2:	f7f4 fa09 	bl	80002d8 <__aeabi_dsub>
 800bec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800beca:	f7f4 fe2f 	bl	8000b2c <__aeabi_dcmplt>
 800bece:	2800      	cmp	r0, #0
 800bed0:	f040 8095 	bne.w	800bffe <_dtoa_r+0x6be>
 800bed4:	42a6      	cmp	r6, r4
 800bed6:	f43f af50 	beq.w	800bd7a <_dtoa_r+0x43a>
 800beda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bede:	4b0a      	ldr	r3, [pc, #40]	@ (800bf08 <_dtoa_r+0x5c8>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	f7f4 fbb1 	bl	8000648 <__aeabi_dmul>
 800bee6:	4b08      	ldr	r3, [pc, #32]	@ (800bf08 <_dtoa_r+0x5c8>)
 800bee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800beec:	2200      	movs	r2, #0
 800beee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bef2:	f7f4 fba9 	bl	8000648 <__aeabi_dmul>
 800bef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800befa:	e7c4      	b.n	800be86 <_dtoa_r+0x546>
 800befc:	0800db58 	.word	0x0800db58
 800bf00:	0800db30 	.word	0x0800db30
 800bf04:	3ff00000 	.word	0x3ff00000
 800bf08:	40240000 	.word	0x40240000
 800bf0c:	401c0000 	.word	0x401c0000
 800bf10:	40140000 	.word	0x40140000
 800bf14:	3fe00000 	.word	0x3fe00000
 800bf18:	4631      	mov	r1, r6
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f7f4 fb94 	bl	8000648 <__aeabi_dmul>
 800bf20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf24:	9415      	str	r4, [sp, #84]	@ 0x54
 800bf26:	4656      	mov	r6, sl
 800bf28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf2c:	f7f4 fe3c 	bl	8000ba8 <__aeabi_d2iz>
 800bf30:	4605      	mov	r5, r0
 800bf32:	f7f4 fb1f 	bl	8000574 <__aeabi_i2d>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf3e:	f7f4 f9cb 	bl	80002d8 <__aeabi_dsub>
 800bf42:	3530      	adds	r5, #48	@ 0x30
 800bf44:	f806 5b01 	strb.w	r5, [r6], #1
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	42a6      	cmp	r6, r4
 800bf4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf52:	f04f 0200 	mov.w	r2, #0
 800bf56:	d124      	bne.n	800bfa2 <_dtoa_r+0x662>
 800bf58:	4bac      	ldr	r3, [pc, #688]	@ (800c20c <_dtoa_r+0x8cc>)
 800bf5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf5e:	f7f4 f9bd 	bl	80002dc <__adddf3>
 800bf62:	4602      	mov	r2, r0
 800bf64:	460b      	mov	r3, r1
 800bf66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf6a:	f7f4 fdfd 	bl	8000b68 <__aeabi_dcmpgt>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d145      	bne.n	800bffe <_dtoa_r+0x6be>
 800bf72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf76:	49a5      	ldr	r1, [pc, #660]	@ (800c20c <_dtoa_r+0x8cc>)
 800bf78:	2000      	movs	r0, #0
 800bf7a:	f7f4 f9ad 	bl	80002d8 <__aeabi_dsub>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf86:	f7f4 fdd1 	bl	8000b2c <__aeabi_dcmplt>
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	f43f aef5 	beq.w	800bd7a <_dtoa_r+0x43a>
 800bf90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bf92:	1e73      	subs	r3, r6, #1
 800bf94:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf9a:	2b30      	cmp	r3, #48	@ 0x30
 800bf9c:	d0f8      	beq.n	800bf90 <_dtoa_r+0x650>
 800bf9e:	9f04      	ldr	r7, [sp, #16]
 800bfa0:	e73e      	b.n	800be20 <_dtoa_r+0x4e0>
 800bfa2:	4b9b      	ldr	r3, [pc, #620]	@ (800c210 <_dtoa_r+0x8d0>)
 800bfa4:	f7f4 fb50 	bl	8000648 <__aeabi_dmul>
 800bfa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfac:	e7bc      	b.n	800bf28 <_dtoa_r+0x5e8>
 800bfae:	d10c      	bne.n	800bfca <_dtoa_r+0x68a>
 800bfb0:	4b98      	ldr	r3, [pc, #608]	@ (800c214 <_dtoa_r+0x8d4>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfb8:	f7f4 fb46 	bl	8000648 <__aeabi_dmul>
 800bfbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfc0:	f7f4 fdc8 	bl	8000b54 <__aeabi_dcmpge>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	f000 8157 	beq.w	800c278 <_dtoa_r+0x938>
 800bfca:	2400      	movs	r4, #0
 800bfcc:	4625      	mov	r5, r4
 800bfce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfd0:	43db      	mvns	r3, r3
 800bfd2:	9304      	str	r3, [sp, #16]
 800bfd4:	4656      	mov	r6, sl
 800bfd6:	2700      	movs	r7, #0
 800bfd8:	4621      	mov	r1, r4
 800bfda:	4658      	mov	r0, fp
 800bfdc:	f000 fafe 	bl	800c5dc <_Bfree>
 800bfe0:	2d00      	cmp	r5, #0
 800bfe2:	d0dc      	beq.n	800bf9e <_dtoa_r+0x65e>
 800bfe4:	b12f      	cbz	r7, 800bff2 <_dtoa_r+0x6b2>
 800bfe6:	42af      	cmp	r7, r5
 800bfe8:	d003      	beq.n	800bff2 <_dtoa_r+0x6b2>
 800bfea:	4639      	mov	r1, r7
 800bfec:	4658      	mov	r0, fp
 800bfee:	f000 faf5 	bl	800c5dc <_Bfree>
 800bff2:	4629      	mov	r1, r5
 800bff4:	4658      	mov	r0, fp
 800bff6:	f000 faf1 	bl	800c5dc <_Bfree>
 800bffa:	e7d0      	b.n	800bf9e <_dtoa_r+0x65e>
 800bffc:	9704      	str	r7, [sp, #16]
 800bffe:	4633      	mov	r3, r6
 800c000:	461e      	mov	r6, r3
 800c002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c006:	2a39      	cmp	r2, #57	@ 0x39
 800c008:	d107      	bne.n	800c01a <_dtoa_r+0x6da>
 800c00a:	459a      	cmp	sl, r3
 800c00c:	d1f8      	bne.n	800c000 <_dtoa_r+0x6c0>
 800c00e:	9a04      	ldr	r2, [sp, #16]
 800c010:	3201      	adds	r2, #1
 800c012:	9204      	str	r2, [sp, #16]
 800c014:	2230      	movs	r2, #48	@ 0x30
 800c016:	f88a 2000 	strb.w	r2, [sl]
 800c01a:	781a      	ldrb	r2, [r3, #0]
 800c01c:	3201      	adds	r2, #1
 800c01e:	701a      	strb	r2, [r3, #0]
 800c020:	e7bd      	b.n	800bf9e <_dtoa_r+0x65e>
 800c022:	4b7b      	ldr	r3, [pc, #492]	@ (800c210 <_dtoa_r+0x8d0>)
 800c024:	2200      	movs	r2, #0
 800c026:	f7f4 fb0f 	bl	8000648 <__aeabi_dmul>
 800c02a:	2200      	movs	r2, #0
 800c02c:	2300      	movs	r3, #0
 800c02e:	4604      	mov	r4, r0
 800c030:	460d      	mov	r5, r1
 800c032:	f7f4 fd71 	bl	8000b18 <__aeabi_dcmpeq>
 800c036:	2800      	cmp	r0, #0
 800c038:	f43f aebb 	beq.w	800bdb2 <_dtoa_r+0x472>
 800c03c:	e6f0      	b.n	800be20 <_dtoa_r+0x4e0>
 800c03e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c040:	2a00      	cmp	r2, #0
 800c042:	f000 80db 	beq.w	800c1fc <_dtoa_r+0x8bc>
 800c046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c048:	2a01      	cmp	r2, #1
 800c04a:	f300 80bf 	bgt.w	800c1cc <_dtoa_r+0x88c>
 800c04e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c050:	2a00      	cmp	r2, #0
 800c052:	f000 80b7 	beq.w	800c1c4 <_dtoa_r+0x884>
 800c056:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c05a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c05c:	4646      	mov	r6, r8
 800c05e:	9a08      	ldr	r2, [sp, #32]
 800c060:	2101      	movs	r1, #1
 800c062:	441a      	add	r2, r3
 800c064:	4658      	mov	r0, fp
 800c066:	4498      	add	r8, r3
 800c068:	9208      	str	r2, [sp, #32]
 800c06a:	f000 fb6b 	bl	800c744 <__i2b>
 800c06e:	4605      	mov	r5, r0
 800c070:	b15e      	cbz	r6, 800c08a <_dtoa_r+0x74a>
 800c072:	9b08      	ldr	r3, [sp, #32]
 800c074:	2b00      	cmp	r3, #0
 800c076:	dd08      	ble.n	800c08a <_dtoa_r+0x74a>
 800c078:	42b3      	cmp	r3, r6
 800c07a:	9a08      	ldr	r2, [sp, #32]
 800c07c:	bfa8      	it	ge
 800c07e:	4633      	movge	r3, r6
 800c080:	eba8 0803 	sub.w	r8, r8, r3
 800c084:	1af6      	subs	r6, r6, r3
 800c086:	1ad3      	subs	r3, r2, r3
 800c088:	9308      	str	r3, [sp, #32]
 800c08a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c08c:	b1f3      	cbz	r3, 800c0cc <_dtoa_r+0x78c>
 800c08e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 80b7 	beq.w	800c204 <_dtoa_r+0x8c4>
 800c096:	b18c      	cbz	r4, 800c0bc <_dtoa_r+0x77c>
 800c098:	4629      	mov	r1, r5
 800c09a:	4622      	mov	r2, r4
 800c09c:	4658      	mov	r0, fp
 800c09e:	f000 fc11 	bl	800c8c4 <__pow5mult>
 800c0a2:	464a      	mov	r2, r9
 800c0a4:	4601      	mov	r1, r0
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	4658      	mov	r0, fp
 800c0aa:	f000 fb61 	bl	800c770 <__multiply>
 800c0ae:	4649      	mov	r1, r9
 800c0b0:	9004      	str	r0, [sp, #16]
 800c0b2:	4658      	mov	r0, fp
 800c0b4:	f000 fa92 	bl	800c5dc <_Bfree>
 800c0b8:	9b04      	ldr	r3, [sp, #16]
 800c0ba:	4699      	mov	r9, r3
 800c0bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0be:	1b1a      	subs	r2, r3, r4
 800c0c0:	d004      	beq.n	800c0cc <_dtoa_r+0x78c>
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	4658      	mov	r0, fp
 800c0c6:	f000 fbfd 	bl	800c8c4 <__pow5mult>
 800c0ca:	4681      	mov	r9, r0
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	4658      	mov	r0, fp
 800c0d0:	f000 fb38 	bl	800c744 <__i2b>
 800c0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 81cf 	beq.w	800c47c <_dtoa_r+0xb3c>
 800c0de:	461a      	mov	r2, r3
 800c0e0:	4601      	mov	r1, r0
 800c0e2:	4658      	mov	r0, fp
 800c0e4:	f000 fbee 	bl	800c8c4 <__pow5mult>
 800c0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	f300 8095 	bgt.w	800c21c <_dtoa_r+0x8dc>
 800c0f2:	9b02      	ldr	r3, [sp, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f040 8087 	bne.w	800c208 <_dtoa_r+0x8c8>
 800c0fa:	9b03      	ldr	r3, [sp, #12]
 800c0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c100:	2b00      	cmp	r3, #0
 800c102:	f040 8089 	bne.w	800c218 <_dtoa_r+0x8d8>
 800c106:	9b03      	ldr	r3, [sp, #12]
 800c108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c10c:	0d1b      	lsrs	r3, r3, #20
 800c10e:	051b      	lsls	r3, r3, #20
 800c110:	b12b      	cbz	r3, 800c11e <_dtoa_r+0x7de>
 800c112:	9b08      	ldr	r3, [sp, #32]
 800c114:	3301      	adds	r3, #1
 800c116:	9308      	str	r3, [sp, #32]
 800c118:	f108 0801 	add.w	r8, r8, #1
 800c11c:	2301      	movs	r3, #1
 800c11e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c122:	2b00      	cmp	r3, #0
 800c124:	f000 81b0 	beq.w	800c488 <_dtoa_r+0xb48>
 800c128:	6923      	ldr	r3, [r4, #16]
 800c12a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c12e:	6918      	ldr	r0, [r3, #16]
 800c130:	f000 fabc 	bl	800c6ac <__hi0bits>
 800c134:	f1c0 0020 	rsb	r0, r0, #32
 800c138:	9b08      	ldr	r3, [sp, #32]
 800c13a:	4418      	add	r0, r3
 800c13c:	f010 001f 	ands.w	r0, r0, #31
 800c140:	d077      	beq.n	800c232 <_dtoa_r+0x8f2>
 800c142:	f1c0 0320 	rsb	r3, r0, #32
 800c146:	2b04      	cmp	r3, #4
 800c148:	dd6b      	ble.n	800c222 <_dtoa_r+0x8e2>
 800c14a:	9b08      	ldr	r3, [sp, #32]
 800c14c:	f1c0 001c 	rsb	r0, r0, #28
 800c150:	4403      	add	r3, r0
 800c152:	4480      	add	r8, r0
 800c154:	4406      	add	r6, r0
 800c156:	9308      	str	r3, [sp, #32]
 800c158:	f1b8 0f00 	cmp.w	r8, #0
 800c15c:	dd05      	ble.n	800c16a <_dtoa_r+0x82a>
 800c15e:	4649      	mov	r1, r9
 800c160:	4642      	mov	r2, r8
 800c162:	4658      	mov	r0, fp
 800c164:	f000 fc08 	bl	800c978 <__lshift>
 800c168:	4681      	mov	r9, r0
 800c16a:	9b08      	ldr	r3, [sp, #32]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	dd05      	ble.n	800c17c <_dtoa_r+0x83c>
 800c170:	4621      	mov	r1, r4
 800c172:	461a      	mov	r2, r3
 800c174:	4658      	mov	r0, fp
 800c176:	f000 fbff 	bl	800c978 <__lshift>
 800c17a:	4604      	mov	r4, r0
 800c17c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d059      	beq.n	800c236 <_dtoa_r+0x8f6>
 800c182:	4621      	mov	r1, r4
 800c184:	4648      	mov	r0, r9
 800c186:	f000 fc63 	bl	800ca50 <__mcmp>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	da53      	bge.n	800c236 <_dtoa_r+0x8f6>
 800c18e:	1e7b      	subs	r3, r7, #1
 800c190:	9304      	str	r3, [sp, #16]
 800c192:	4649      	mov	r1, r9
 800c194:	2300      	movs	r3, #0
 800c196:	220a      	movs	r2, #10
 800c198:	4658      	mov	r0, fp
 800c19a:	f000 fa41 	bl	800c620 <__multadd>
 800c19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1a0:	4681      	mov	r9, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f000 8172 	beq.w	800c48c <_dtoa_r+0xb4c>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	220a      	movs	r2, #10
 800c1ae:	4658      	mov	r0, fp
 800c1b0:	f000 fa36 	bl	800c620 <__multadd>
 800c1b4:	9b00      	ldr	r3, [sp, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	dc67      	bgt.n	800c28c <_dtoa_r+0x94c>
 800c1bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	dc41      	bgt.n	800c246 <_dtoa_r+0x906>
 800c1c2:	e063      	b.n	800c28c <_dtoa_r+0x94c>
 800c1c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c1c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c1ca:	e746      	b.n	800c05a <_dtoa_r+0x71a>
 800c1cc:	9b07      	ldr	r3, [sp, #28]
 800c1ce:	1e5c      	subs	r4, r3, #1
 800c1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1d2:	42a3      	cmp	r3, r4
 800c1d4:	bfbf      	itttt	lt
 800c1d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c1d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c1da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c1dc:	1ae3      	sublt	r3, r4, r3
 800c1de:	bfb4      	ite	lt
 800c1e0:	18d2      	addlt	r2, r2, r3
 800c1e2:	1b1c      	subge	r4, r3, r4
 800c1e4:	9b07      	ldr	r3, [sp, #28]
 800c1e6:	bfbc      	itt	lt
 800c1e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c1ea:	2400      	movlt	r4, #0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bfb5      	itete	lt
 800c1f0:	eba8 0603 	sublt.w	r6, r8, r3
 800c1f4:	9b07      	ldrge	r3, [sp, #28]
 800c1f6:	2300      	movlt	r3, #0
 800c1f8:	4646      	movge	r6, r8
 800c1fa:	e730      	b.n	800c05e <_dtoa_r+0x71e>
 800c1fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c1fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c200:	4646      	mov	r6, r8
 800c202:	e735      	b.n	800c070 <_dtoa_r+0x730>
 800c204:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c206:	e75c      	b.n	800c0c2 <_dtoa_r+0x782>
 800c208:	2300      	movs	r3, #0
 800c20a:	e788      	b.n	800c11e <_dtoa_r+0x7de>
 800c20c:	3fe00000 	.word	0x3fe00000
 800c210:	40240000 	.word	0x40240000
 800c214:	40140000 	.word	0x40140000
 800c218:	9b02      	ldr	r3, [sp, #8]
 800c21a:	e780      	b.n	800c11e <_dtoa_r+0x7de>
 800c21c:	2300      	movs	r3, #0
 800c21e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c220:	e782      	b.n	800c128 <_dtoa_r+0x7e8>
 800c222:	d099      	beq.n	800c158 <_dtoa_r+0x818>
 800c224:	9a08      	ldr	r2, [sp, #32]
 800c226:	331c      	adds	r3, #28
 800c228:	441a      	add	r2, r3
 800c22a:	4498      	add	r8, r3
 800c22c:	441e      	add	r6, r3
 800c22e:	9208      	str	r2, [sp, #32]
 800c230:	e792      	b.n	800c158 <_dtoa_r+0x818>
 800c232:	4603      	mov	r3, r0
 800c234:	e7f6      	b.n	800c224 <_dtoa_r+0x8e4>
 800c236:	9b07      	ldr	r3, [sp, #28]
 800c238:	9704      	str	r7, [sp, #16]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	dc20      	bgt.n	800c280 <_dtoa_r+0x940>
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c242:	2b02      	cmp	r3, #2
 800c244:	dd1e      	ble.n	800c284 <_dtoa_r+0x944>
 800c246:	9b00      	ldr	r3, [sp, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f47f aec0 	bne.w	800bfce <_dtoa_r+0x68e>
 800c24e:	4621      	mov	r1, r4
 800c250:	2205      	movs	r2, #5
 800c252:	4658      	mov	r0, fp
 800c254:	f000 f9e4 	bl	800c620 <__multadd>
 800c258:	4601      	mov	r1, r0
 800c25a:	4604      	mov	r4, r0
 800c25c:	4648      	mov	r0, r9
 800c25e:	f000 fbf7 	bl	800ca50 <__mcmp>
 800c262:	2800      	cmp	r0, #0
 800c264:	f77f aeb3 	ble.w	800bfce <_dtoa_r+0x68e>
 800c268:	4656      	mov	r6, sl
 800c26a:	2331      	movs	r3, #49	@ 0x31
 800c26c:	f806 3b01 	strb.w	r3, [r6], #1
 800c270:	9b04      	ldr	r3, [sp, #16]
 800c272:	3301      	adds	r3, #1
 800c274:	9304      	str	r3, [sp, #16]
 800c276:	e6ae      	b.n	800bfd6 <_dtoa_r+0x696>
 800c278:	9c07      	ldr	r4, [sp, #28]
 800c27a:	9704      	str	r7, [sp, #16]
 800c27c:	4625      	mov	r5, r4
 800c27e:	e7f3      	b.n	800c268 <_dtoa_r+0x928>
 800c280:	9b07      	ldr	r3, [sp, #28]
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 8104 	beq.w	800c494 <_dtoa_r+0xb54>
 800c28c:	2e00      	cmp	r6, #0
 800c28e:	dd05      	ble.n	800c29c <_dtoa_r+0x95c>
 800c290:	4629      	mov	r1, r5
 800c292:	4632      	mov	r2, r6
 800c294:	4658      	mov	r0, fp
 800c296:	f000 fb6f 	bl	800c978 <__lshift>
 800c29a:	4605      	mov	r5, r0
 800c29c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d05a      	beq.n	800c358 <_dtoa_r+0xa18>
 800c2a2:	6869      	ldr	r1, [r5, #4]
 800c2a4:	4658      	mov	r0, fp
 800c2a6:	f000 f959 	bl	800c55c <_Balloc>
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	b928      	cbnz	r0, 800c2ba <_dtoa_r+0x97a>
 800c2ae:	4b84      	ldr	r3, [pc, #528]	@ (800c4c0 <_dtoa_r+0xb80>)
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c2b6:	f7ff bb5a 	b.w	800b96e <_dtoa_r+0x2e>
 800c2ba:	692a      	ldr	r2, [r5, #16]
 800c2bc:	3202      	adds	r2, #2
 800c2be:	0092      	lsls	r2, r2, #2
 800c2c0:	f105 010c 	add.w	r1, r5, #12
 800c2c4:	300c      	adds	r0, #12
 800c2c6:	f7ff faa4 	bl	800b812 <memcpy>
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	4631      	mov	r1, r6
 800c2ce:	4658      	mov	r0, fp
 800c2d0:	f000 fb52 	bl	800c978 <__lshift>
 800c2d4:	f10a 0301 	add.w	r3, sl, #1
 800c2d8:	9307      	str	r3, [sp, #28]
 800c2da:	9b00      	ldr	r3, [sp, #0]
 800c2dc:	4453      	add	r3, sl
 800c2de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2e0:	9b02      	ldr	r3, [sp, #8]
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	462f      	mov	r7, r5
 800c2e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2ea:	4605      	mov	r5, r0
 800c2ec:	9b07      	ldr	r3, [sp, #28]
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	4648      	mov	r0, r9
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	f7ff fa9a 	bl	800b82e <quorem>
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	9002      	str	r0, [sp, #8]
 800c2fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c302:	4648      	mov	r0, r9
 800c304:	f000 fba4 	bl	800ca50 <__mcmp>
 800c308:	462a      	mov	r2, r5
 800c30a:	9008      	str	r0, [sp, #32]
 800c30c:	4621      	mov	r1, r4
 800c30e:	4658      	mov	r0, fp
 800c310:	f000 fbba 	bl	800ca88 <__mdiff>
 800c314:	68c2      	ldr	r2, [r0, #12]
 800c316:	4606      	mov	r6, r0
 800c318:	bb02      	cbnz	r2, 800c35c <_dtoa_r+0xa1c>
 800c31a:	4601      	mov	r1, r0
 800c31c:	4648      	mov	r0, r9
 800c31e:	f000 fb97 	bl	800ca50 <__mcmp>
 800c322:	4602      	mov	r2, r0
 800c324:	4631      	mov	r1, r6
 800c326:	4658      	mov	r0, fp
 800c328:	920e      	str	r2, [sp, #56]	@ 0x38
 800c32a:	f000 f957 	bl	800c5dc <_Bfree>
 800c32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c330:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c332:	9e07      	ldr	r6, [sp, #28]
 800c334:	ea43 0102 	orr.w	r1, r3, r2
 800c338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c33a:	4319      	orrs	r1, r3
 800c33c:	d110      	bne.n	800c360 <_dtoa_r+0xa20>
 800c33e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c342:	d029      	beq.n	800c398 <_dtoa_r+0xa58>
 800c344:	9b08      	ldr	r3, [sp, #32]
 800c346:	2b00      	cmp	r3, #0
 800c348:	dd02      	ble.n	800c350 <_dtoa_r+0xa10>
 800c34a:	9b02      	ldr	r3, [sp, #8]
 800c34c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c350:	9b00      	ldr	r3, [sp, #0]
 800c352:	f883 8000 	strb.w	r8, [r3]
 800c356:	e63f      	b.n	800bfd8 <_dtoa_r+0x698>
 800c358:	4628      	mov	r0, r5
 800c35a:	e7bb      	b.n	800c2d4 <_dtoa_r+0x994>
 800c35c:	2201      	movs	r2, #1
 800c35e:	e7e1      	b.n	800c324 <_dtoa_r+0x9e4>
 800c360:	9b08      	ldr	r3, [sp, #32]
 800c362:	2b00      	cmp	r3, #0
 800c364:	db04      	blt.n	800c370 <_dtoa_r+0xa30>
 800c366:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c368:	430b      	orrs	r3, r1
 800c36a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c36c:	430b      	orrs	r3, r1
 800c36e:	d120      	bne.n	800c3b2 <_dtoa_r+0xa72>
 800c370:	2a00      	cmp	r2, #0
 800c372:	dded      	ble.n	800c350 <_dtoa_r+0xa10>
 800c374:	4649      	mov	r1, r9
 800c376:	2201      	movs	r2, #1
 800c378:	4658      	mov	r0, fp
 800c37a:	f000 fafd 	bl	800c978 <__lshift>
 800c37e:	4621      	mov	r1, r4
 800c380:	4681      	mov	r9, r0
 800c382:	f000 fb65 	bl	800ca50 <__mcmp>
 800c386:	2800      	cmp	r0, #0
 800c388:	dc03      	bgt.n	800c392 <_dtoa_r+0xa52>
 800c38a:	d1e1      	bne.n	800c350 <_dtoa_r+0xa10>
 800c38c:	f018 0f01 	tst.w	r8, #1
 800c390:	d0de      	beq.n	800c350 <_dtoa_r+0xa10>
 800c392:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c396:	d1d8      	bne.n	800c34a <_dtoa_r+0xa0a>
 800c398:	9a00      	ldr	r2, [sp, #0]
 800c39a:	2339      	movs	r3, #57	@ 0x39
 800c39c:	7013      	strb	r3, [r2, #0]
 800c39e:	4633      	mov	r3, r6
 800c3a0:	461e      	mov	r6, r3
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c3a8:	2a39      	cmp	r2, #57	@ 0x39
 800c3aa:	d052      	beq.n	800c452 <_dtoa_r+0xb12>
 800c3ac:	3201      	adds	r2, #1
 800c3ae:	701a      	strb	r2, [r3, #0]
 800c3b0:	e612      	b.n	800bfd8 <_dtoa_r+0x698>
 800c3b2:	2a00      	cmp	r2, #0
 800c3b4:	dd07      	ble.n	800c3c6 <_dtoa_r+0xa86>
 800c3b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c3ba:	d0ed      	beq.n	800c398 <_dtoa_r+0xa58>
 800c3bc:	9a00      	ldr	r2, [sp, #0]
 800c3be:	f108 0301 	add.w	r3, r8, #1
 800c3c2:	7013      	strb	r3, [r2, #0]
 800c3c4:	e608      	b.n	800bfd8 <_dtoa_r+0x698>
 800c3c6:	9b07      	ldr	r3, [sp, #28]
 800c3c8:	9a07      	ldr	r2, [sp, #28]
 800c3ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c3ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d028      	beq.n	800c426 <_dtoa_r+0xae6>
 800c3d4:	4649      	mov	r1, r9
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	220a      	movs	r2, #10
 800c3da:	4658      	mov	r0, fp
 800c3dc:	f000 f920 	bl	800c620 <__multadd>
 800c3e0:	42af      	cmp	r7, r5
 800c3e2:	4681      	mov	r9, r0
 800c3e4:	f04f 0300 	mov.w	r3, #0
 800c3e8:	f04f 020a 	mov.w	r2, #10
 800c3ec:	4639      	mov	r1, r7
 800c3ee:	4658      	mov	r0, fp
 800c3f0:	d107      	bne.n	800c402 <_dtoa_r+0xac2>
 800c3f2:	f000 f915 	bl	800c620 <__multadd>
 800c3f6:	4607      	mov	r7, r0
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	9b07      	ldr	r3, [sp, #28]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	9307      	str	r3, [sp, #28]
 800c400:	e774      	b.n	800c2ec <_dtoa_r+0x9ac>
 800c402:	f000 f90d 	bl	800c620 <__multadd>
 800c406:	4629      	mov	r1, r5
 800c408:	4607      	mov	r7, r0
 800c40a:	2300      	movs	r3, #0
 800c40c:	220a      	movs	r2, #10
 800c40e:	4658      	mov	r0, fp
 800c410:	f000 f906 	bl	800c620 <__multadd>
 800c414:	4605      	mov	r5, r0
 800c416:	e7f0      	b.n	800c3fa <_dtoa_r+0xaba>
 800c418:	9b00      	ldr	r3, [sp, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	bfcc      	ite	gt
 800c41e:	461e      	movgt	r6, r3
 800c420:	2601      	movle	r6, #1
 800c422:	4456      	add	r6, sl
 800c424:	2700      	movs	r7, #0
 800c426:	4649      	mov	r1, r9
 800c428:	2201      	movs	r2, #1
 800c42a:	4658      	mov	r0, fp
 800c42c:	f000 faa4 	bl	800c978 <__lshift>
 800c430:	4621      	mov	r1, r4
 800c432:	4681      	mov	r9, r0
 800c434:	f000 fb0c 	bl	800ca50 <__mcmp>
 800c438:	2800      	cmp	r0, #0
 800c43a:	dcb0      	bgt.n	800c39e <_dtoa_r+0xa5e>
 800c43c:	d102      	bne.n	800c444 <_dtoa_r+0xb04>
 800c43e:	f018 0f01 	tst.w	r8, #1
 800c442:	d1ac      	bne.n	800c39e <_dtoa_r+0xa5e>
 800c444:	4633      	mov	r3, r6
 800c446:	461e      	mov	r6, r3
 800c448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c44c:	2a30      	cmp	r2, #48	@ 0x30
 800c44e:	d0fa      	beq.n	800c446 <_dtoa_r+0xb06>
 800c450:	e5c2      	b.n	800bfd8 <_dtoa_r+0x698>
 800c452:	459a      	cmp	sl, r3
 800c454:	d1a4      	bne.n	800c3a0 <_dtoa_r+0xa60>
 800c456:	9b04      	ldr	r3, [sp, #16]
 800c458:	3301      	adds	r3, #1
 800c45a:	9304      	str	r3, [sp, #16]
 800c45c:	2331      	movs	r3, #49	@ 0x31
 800c45e:	f88a 3000 	strb.w	r3, [sl]
 800c462:	e5b9      	b.n	800bfd8 <_dtoa_r+0x698>
 800c464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c466:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c4c4 <_dtoa_r+0xb84>
 800c46a:	b11b      	cbz	r3, 800c474 <_dtoa_r+0xb34>
 800c46c:	f10a 0308 	add.w	r3, sl, #8
 800c470:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	4650      	mov	r0, sl
 800c476:	b019      	add	sp, #100	@ 0x64
 800c478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c47e:	2b01      	cmp	r3, #1
 800c480:	f77f ae37 	ble.w	800c0f2 <_dtoa_r+0x7b2>
 800c484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c486:	930a      	str	r3, [sp, #40]	@ 0x28
 800c488:	2001      	movs	r0, #1
 800c48a:	e655      	b.n	800c138 <_dtoa_r+0x7f8>
 800c48c:	9b00      	ldr	r3, [sp, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f77f aed6 	ble.w	800c240 <_dtoa_r+0x900>
 800c494:	4656      	mov	r6, sl
 800c496:	4621      	mov	r1, r4
 800c498:	4648      	mov	r0, r9
 800c49a:	f7ff f9c8 	bl	800b82e <quorem>
 800c49e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c4a2:	f806 8b01 	strb.w	r8, [r6], #1
 800c4a6:	9b00      	ldr	r3, [sp, #0]
 800c4a8:	eba6 020a 	sub.w	r2, r6, sl
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	ddb3      	ble.n	800c418 <_dtoa_r+0xad8>
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	220a      	movs	r2, #10
 800c4b6:	4658      	mov	r0, fp
 800c4b8:	f000 f8b2 	bl	800c620 <__multadd>
 800c4bc:	4681      	mov	r9, r0
 800c4be:	e7ea      	b.n	800c496 <_dtoa_r+0xb56>
 800c4c0:	0800dab4 	.word	0x0800dab4
 800c4c4:	0800da38 	.word	0x0800da38

0800c4c8 <_free_r>:
 800c4c8:	b538      	push	{r3, r4, r5, lr}
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	2900      	cmp	r1, #0
 800c4ce:	d041      	beq.n	800c554 <_free_r+0x8c>
 800c4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4d4:	1f0c      	subs	r4, r1, #4
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	bfb8      	it	lt
 800c4da:	18e4      	addlt	r4, r4, r3
 800c4dc:	f7fe fa7c 	bl	800a9d8 <__malloc_lock>
 800c4e0:	4a1d      	ldr	r2, [pc, #116]	@ (800c558 <_free_r+0x90>)
 800c4e2:	6813      	ldr	r3, [r2, #0]
 800c4e4:	b933      	cbnz	r3, 800c4f4 <_free_r+0x2c>
 800c4e6:	6063      	str	r3, [r4, #4]
 800c4e8:	6014      	str	r4, [r2, #0]
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4f0:	f7fe ba78 	b.w	800a9e4 <__malloc_unlock>
 800c4f4:	42a3      	cmp	r3, r4
 800c4f6:	d908      	bls.n	800c50a <_free_r+0x42>
 800c4f8:	6820      	ldr	r0, [r4, #0]
 800c4fa:	1821      	adds	r1, r4, r0
 800c4fc:	428b      	cmp	r3, r1
 800c4fe:	bf01      	itttt	eq
 800c500:	6819      	ldreq	r1, [r3, #0]
 800c502:	685b      	ldreq	r3, [r3, #4]
 800c504:	1809      	addeq	r1, r1, r0
 800c506:	6021      	streq	r1, [r4, #0]
 800c508:	e7ed      	b.n	800c4e6 <_free_r+0x1e>
 800c50a:	461a      	mov	r2, r3
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	b10b      	cbz	r3, 800c514 <_free_r+0x4c>
 800c510:	42a3      	cmp	r3, r4
 800c512:	d9fa      	bls.n	800c50a <_free_r+0x42>
 800c514:	6811      	ldr	r1, [r2, #0]
 800c516:	1850      	adds	r0, r2, r1
 800c518:	42a0      	cmp	r0, r4
 800c51a:	d10b      	bne.n	800c534 <_free_r+0x6c>
 800c51c:	6820      	ldr	r0, [r4, #0]
 800c51e:	4401      	add	r1, r0
 800c520:	1850      	adds	r0, r2, r1
 800c522:	4283      	cmp	r3, r0
 800c524:	6011      	str	r1, [r2, #0]
 800c526:	d1e0      	bne.n	800c4ea <_free_r+0x22>
 800c528:	6818      	ldr	r0, [r3, #0]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	6053      	str	r3, [r2, #4]
 800c52e:	4408      	add	r0, r1
 800c530:	6010      	str	r0, [r2, #0]
 800c532:	e7da      	b.n	800c4ea <_free_r+0x22>
 800c534:	d902      	bls.n	800c53c <_free_r+0x74>
 800c536:	230c      	movs	r3, #12
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	e7d6      	b.n	800c4ea <_free_r+0x22>
 800c53c:	6820      	ldr	r0, [r4, #0]
 800c53e:	1821      	adds	r1, r4, r0
 800c540:	428b      	cmp	r3, r1
 800c542:	bf04      	itt	eq
 800c544:	6819      	ldreq	r1, [r3, #0]
 800c546:	685b      	ldreq	r3, [r3, #4]
 800c548:	6063      	str	r3, [r4, #4]
 800c54a:	bf04      	itt	eq
 800c54c:	1809      	addeq	r1, r1, r0
 800c54e:	6021      	streq	r1, [r4, #0]
 800c550:	6054      	str	r4, [r2, #4]
 800c552:	e7ca      	b.n	800c4ea <_free_r+0x22>
 800c554:	bd38      	pop	{r3, r4, r5, pc}
 800c556:	bf00      	nop
 800c558:	200009d8 	.word	0x200009d8

0800c55c <_Balloc>:
 800c55c:	b570      	push	{r4, r5, r6, lr}
 800c55e:	69c6      	ldr	r6, [r0, #28]
 800c560:	4604      	mov	r4, r0
 800c562:	460d      	mov	r5, r1
 800c564:	b976      	cbnz	r6, 800c584 <_Balloc+0x28>
 800c566:	2010      	movs	r0, #16
 800c568:	f7fe f984 	bl	800a874 <malloc>
 800c56c:	4602      	mov	r2, r0
 800c56e:	61e0      	str	r0, [r4, #28]
 800c570:	b920      	cbnz	r0, 800c57c <_Balloc+0x20>
 800c572:	4b18      	ldr	r3, [pc, #96]	@ (800c5d4 <_Balloc+0x78>)
 800c574:	4818      	ldr	r0, [pc, #96]	@ (800c5d8 <_Balloc+0x7c>)
 800c576:	216b      	movs	r1, #107	@ 0x6b
 800c578:	f000 ff56 	bl	800d428 <__assert_func>
 800c57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c580:	6006      	str	r6, [r0, #0]
 800c582:	60c6      	str	r6, [r0, #12]
 800c584:	69e6      	ldr	r6, [r4, #28]
 800c586:	68f3      	ldr	r3, [r6, #12]
 800c588:	b183      	cbz	r3, 800c5ac <_Balloc+0x50>
 800c58a:	69e3      	ldr	r3, [r4, #28]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c592:	b9b8      	cbnz	r0, 800c5c4 <_Balloc+0x68>
 800c594:	2101      	movs	r1, #1
 800c596:	fa01 f605 	lsl.w	r6, r1, r5
 800c59a:	1d72      	adds	r2, r6, #5
 800c59c:	0092      	lsls	r2, r2, #2
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f000 ff60 	bl	800d464 <_calloc_r>
 800c5a4:	b160      	cbz	r0, 800c5c0 <_Balloc+0x64>
 800c5a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5aa:	e00e      	b.n	800c5ca <_Balloc+0x6e>
 800c5ac:	2221      	movs	r2, #33	@ 0x21
 800c5ae:	2104      	movs	r1, #4
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f000 ff57 	bl	800d464 <_calloc_r>
 800c5b6:	69e3      	ldr	r3, [r4, #28]
 800c5b8:	60f0      	str	r0, [r6, #12]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e4      	bne.n	800c58a <_Balloc+0x2e>
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	bd70      	pop	{r4, r5, r6, pc}
 800c5c4:	6802      	ldr	r2, [r0, #0]
 800c5c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5d0:	e7f7      	b.n	800c5c2 <_Balloc+0x66>
 800c5d2:	bf00      	nop
 800c5d4:	0800da45 	.word	0x0800da45
 800c5d8:	0800dac5 	.word	0x0800dac5

0800c5dc <_Bfree>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	69c6      	ldr	r6, [r0, #28]
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	b976      	cbnz	r6, 800c604 <_Bfree+0x28>
 800c5e6:	2010      	movs	r0, #16
 800c5e8:	f7fe f944 	bl	800a874 <malloc>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	61e8      	str	r0, [r5, #28]
 800c5f0:	b920      	cbnz	r0, 800c5fc <_Bfree+0x20>
 800c5f2:	4b09      	ldr	r3, [pc, #36]	@ (800c618 <_Bfree+0x3c>)
 800c5f4:	4809      	ldr	r0, [pc, #36]	@ (800c61c <_Bfree+0x40>)
 800c5f6:	218f      	movs	r1, #143	@ 0x8f
 800c5f8:	f000 ff16 	bl	800d428 <__assert_func>
 800c5fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c600:	6006      	str	r6, [r0, #0]
 800c602:	60c6      	str	r6, [r0, #12]
 800c604:	b13c      	cbz	r4, 800c616 <_Bfree+0x3a>
 800c606:	69eb      	ldr	r3, [r5, #28]
 800c608:	6862      	ldr	r2, [r4, #4]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c610:	6021      	str	r1, [r4, #0]
 800c612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c616:	bd70      	pop	{r4, r5, r6, pc}
 800c618:	0800da45 	.word	0x0800da45
 800c61c:	0800dac5 	.word	0x0800dac5

0800c620 <__multadd>:
 800c620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c624:	690d      	ldr	r5, [r1, #16]
 800c626:	4607      	mov	r7, r0
 800c628:	460c      	mov	r4, r1
 800c62a:	461e      	mov	r6, r3
 800c62c:	f101 0c14 	add.w	ip, r1, #20
 800c630:	2000      	movs	r0, #0
 800c632:	f8dc 3000 	ldr.w	r3, [ip]
 800c636:	b299      	uxth	r1, r3
 800c638:	fb02 6101 	mla	r1, r2, r1, r6
 800c63c:	0c1e      	lsrs	r6, r3, #16
 800c63e:	0c0b      	lsrs	r3, r1, #16
 800c640:	fb02 3306 	mla	r3, r2, r6, r3
 800c644:	b289      	uxth	r1, r1
 800c646:	3001      	adds	r0, #1
 800c648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c64c:	4285      	cmp	r5, r0
 800c64e:	f84c 1b04 	str.w	r1, [ip], #4
 800c652:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c656:	dcec      	bgt.n	800c632 <__multadd+0x12>
 800c658:	b30e      	cbz	r6, 800c69e <__multadd+0x7e>
 800c65a:	68a3      	ldr	r3, [r4, #8]
 800c65c:	42ab      	cmp	r3, r5
 800c65e:	dc19      	bgt.n	800c694 <__multadd+0x74>
 800c660:	6861      	ldr	r1, [r4, #4]
 800c662:	4638      	mov	r0, r7
 800c664:	3101      	adds	r1, #1
 800c666:	f7ff ff79 	bl	800c55c <_Balloc>
 800c66a:	4680      	mov	r8, r0
 800c66c:	b928      	cbnz	r0, 800c67a <__multadd+0x5a>
 800c66e:	4602      	mov	r2, r0
 800c670:	4b0c      	ldr	r3, [pc, #48]	@ (800c6a4 <__multadd+0x84>)
 800c672:	480d      	ldr	r0, [pc, #52]	@ (800c6a8 <__multadd+0x88>)
 800c674:	21ba      	movs	r1, #186	@ 0xba
 800c676:	f000 fed7 	bl	800d428 <__assert_func>
 800c67a:	6922      	ldr	r2, [r4, #16]
 800c67c:	3202      	adds	r2, #2
 800c67e:	f104 010c 	add.w	r1, r4, #12
 800c682:	0092      	lsls	r2, r2, #2
 800c684:	300c      	adds	r0, #12
 800c686:	f7ff f8c4 	bl	800b812 <memcpy>
 800c68a:	4621      	mov	r1, r4
 800c68c:	4638      	mov	r0, r7
 800c68e:	f7ff ffa5 	bl	800c5dc <_Bfree>
 800c692:	4644      	mov	r4, r8
 800c694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c698:	3501      	adds	r5, #1
 800c69a:	615e      	str	r6, [r3, #20]
 800c69c:	6125      	str	r5, [r4, #16]
 800c69e:	4620      	mov	r0, r4
 800c6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a4:	0800dab4 	.word	0x0800dab4
 800c6a8:	0800dac5 	.word	0x0800dac5

0800c6ac <__hi0bits>:
 800c6ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	bf36      	itet	cc
 800c6b4:	0403      	lslcc	r3, r0, #16
 800c6b6:	2000      	movcs	r0, #0
 800c6b8:	2010      	movcc	r0, #16
 800c6ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6be:	bf3c      	itt	cc
 800c6c0:	021b      	lslcc	r3, r3, #8
 800c6c2:	3008      	addcc	r0, #8
 800c6c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6c8:	bf3c      	itt	cc
 800c6ca:	011b      	lslcc	r3, r3, #4
 800c6cc:	3004      	addcc	r0, #4
 800c6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6d2:	bf3c      	itt	cc
 800c6d4:	009b      	lslcc	r3, r3, #2
 800c6d6:	3002      	addcc	r0, #2
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	db05      	blt.n	800c6e8 <__hi0bits+0x3c>
 800c6dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c6e0:	f100 0001 	add.w	r0, r0, #1
 800c6e4:	bf08      	it	eq
 800c6e6:	2020      	moveq	r0, #32
 800c6e8:	4770      	bx	lr

0800c6ea <__lo0bits>:
 800c6ea:	6803      	ldr	r3, [r0, #0]
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	f013 0007 	ands.w	r0, r3, #7
 800c6f2:	d00b      	beq.n	800c70c <__lo0bits+0x22>
 800c6f4:	07d9      	lsls	r1, r3, #31
 800c6f6:	d421      	bmi.n	800c73c <__lo0bits+0x52>
 800c6f8:	0798      	lsls	r0, r3, #30
 800c6fa:	bf49      	itett	mi
 800c6fc:	085b      	lsrmi	r3, r3, #1
 800c6fe:	089b      	lsrpl	r3, r3, #2
 800c700:	2001      	movmi	r0, #1
 800c702:	6013      	strmi	r3, [r2, #0]
 800c704:	bf5c      	itt	pl
 800c706:	6013      	strpl	r3, [r2, #0]
 800c708:	2002      	movpl	r0, #2
 800c70a:	4770      	bx	lr
 800c70c:	b299      	uxth	r1, r3
 800c70e:	b909      	cbnz	r1, 800c714 <__lo0bits+0x2a>
 800c710:	0c1b      	lsrs	r3, r3, #16
 800c712:	2010      	movs	r0, #16
 800c714:	b2d9      	uxtb	r1, r3
 800c716:	b909      	cbnz	r1, 800c71c <__lo0bits+0x32>
 800c718:	3008      	adds	r0, #8
 800c71a:	0a1b      	lsrs	r3, r3, #8
 800c71c:	0719      	lsls	r1, r3, #28
 800c71e:	bf04      	itt	eq
 800c720:	091b      	lsreq	r3, r3, #4
 800c722:	3004      	addeq	r0, #4
 800c724:	0799      	lsls	r1, r3, #30
 800c726:	bf04      	itt	eq
 800c728:	089b      	lsreq	r3, r3, #2
 800c72a:	3002      	addeq	r0, #2
 800c72c:	07d9      	lsls	r1, r3, #31
 800c72e:	d403      	bmi.n	800c738 <__lo0bits+0x4e>
 800c730:	085b      	lsrs	r3, r3, #1
 800c732:	f100 0001 	add.w	r0, r0, #1
 800c736:	d003      	beq.n	800c740 <__lo0bits+0x56>
 800c738:	6013      	str	r3, [r2, #0]
 800c73a:	4770      	bx	lr
 800c73c:	2000      	movs	r0, #0
 800c73e:	4770      	bx	lr
 800c740:	2020      	movs	r0, #32
 800c742:	4770      	bx	lr

0800c744 <__i2b>:
 800c744:	b510      	push	{r4, lr}
 800c746:	460c      	mov	r4, r1
 800c748:	2101      	movs	r1, #1
 800c74a:	f7ff ff07 	bl	800c55c <_Balloc>
 800c74e:	4602      	mov	r2, r0
 800c750:	b928      	cbnz	r0, 800c75e <__i2b+0x1a>
 800c752:	4b05      	ldr	r3, [pc, #20]	@ (800c768 <__i2b+0x24>)
 800c754:	4805      	ldr	r0, [pc, #20]	@ (800c76c <__i2b+0x28>)
 800c756:	f240 1145 	movw	r1, #325	@ 0x145
 800c75a:	f000 fe65 	bl	800d428 <__assert_func>
 800c75e:	2301      	movs	r3, #1
 800c760:	6144      	str	r4, [r0, #20]
 800c762:	6103      	str	r3, [r0, #16]
 800c764:	bd10      	pop	{r4, pc}
 800c766:	bf00      	nop
 800c768:	0800dab4 	.word	0x0800dab4
 800c76c:	0800dac5 	.word	0x0800dac5

0800c770 <__multiply>:
 800c770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c774:	4614      	mov	r4, r2
 800c776:	690a      	ldr	r2, [r1, #16]
 800c778:	6923      	ldr	r3, [r4, #16]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	bfa8      	it	ge
 800c77e:	4623      	movge	r3, r4
 800c780:	460f      	mov	r7, r1
 800c782:	bfa4      	itt	ge
 800c784:	460c      	movge	r4, r1
 800c786:	461f      	movge	r7, r3
 800c788:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c78c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c790:	68a3      	ldr	r3, [r4, #8]
 800c792:	6861      	ldr	r1, [r4, #4]
 800c794:	eb0a 0609 	add.w	r6, sl, r9
 800c798:	42b3      	cmp	r3, r6
 800c79a:	b085      	sub	sp, #20
 800c79c:	bfb8      	it	lt
 800c79e:	3101      	addlt	r1, #1
 800c7a0:	f7ff fedc 	bl	800c55c <_Balloc>
 800c7a4:	b930      	cbnz	r0, 800c7b4 <__multiply+0x44>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	4b44      	ldr	r3, [pc, #272]	@ (800c8bc <__multiply+0x14c>)
 800c7aa:	4845      	ldr	r0, [pc, #276]	@ (800c8c0 <__multiply+0x150>)
 800c7ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c7b0:	f000 fe3a 	bl	800d428 <__assert_func>
 800c7b4:	f100 0514 	add.w	r5, r0, #20
 800c7b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7bc:	462b      	mov	r3, r5
 800c7be:	2200      	movs	r2, #0
 800c7c0:	4543      	cmp	r3, r8
 800c7c2:	d321      	bcc.n	800c808 <__multiply+0x98>
 800c7c4:	f107 0114 	add.w	r1, r7, #20
 800c7c8:	f104 0214 	add.w	r2, r4, #20
 800c7cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c7d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c7d4:	9302      	str	r3, [sp, #8]
 800c7d6:	1b13      	subs	r3, r2, r4
 800c7d8:	3b15      	subs	r3, #21
 800c7da:	f023 0303 	bic.w	r3, r3, #3
 800c7de:	3304      	adds	r3, #4
 800c7e0:	f104 0715 	add.w	r7, r4, #21
 800c7e4:	42ba      	cmp	r2, r7
 800c7e6:	bf38      	it	cc
 800c7e8:	2304      	movcc	r3, #4
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	9b02      	ldr	r3, [sp, #8]
 800c7ee:	9103      	str	r1, [sp, #12]
 800c7f0:	428b      	cmp	r3, r1
 800c7f2:	d80c      	bhi.n	800c80e <__multiply+0x9e>
 800c7f4:	2e00      	cmp	r6, #0
 800c7f6:	dd03      	ble.n	800c800 <__multiply+0x90>
 800c7f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d05b      	beq.n	800c8b8 <__multiply+0x148>
 800c800:	6106      	str	r6, [r0, #16]
 800c802:	b005      	add	sp, #20
 800c804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c808:	f843 2b04 	str.w	r2, [r3], #4
 800c80c:	e7d8      	b.n	800c7c0 <__multiply+0x50>
 800c80e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c812:	f1ba 0f00 	cmp.w	sl, #0
 800c816:	d024      	beq.n	800c862 <__multiply+0xf2>
 800c818:	f104 0e14 	add.w	lr, r4, #20
 800c81c:	46a9      	mov	r9, r5
 800c81e:	f04f 0c00 	mov.w	ip, #0
 800c822:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c826:	f8d9 3000 	ldr.w	r3, [r9]
 800c82a:	fa1f fb87 	uxth.w	fp, r7
 800c82e:	b29b      	uxth	r3, r3
 800c830:	fb0a 330b 	mla	r3, sl, fp, r3
 800c834:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c838:	f8d9 7000 	ldr.w	r7, [r9]
 800c83c:	4463      	add	r3, ip
 800c83e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c842:	fb0a c70b 	mla	r7, sl, fp, ip
 800c846:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c850:	4572      	cmp	r2, lr
 800c852:	f849 3b04 	str.w	r3, [r9], #4
 800c856:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c85a:	d8e2      	bhi.n	800c822 <__multiply+0xb2>
 800c85c:	9b01      	ldr	r3, [sp, #4]
 800c85e:	f845 c003 	str.w	ip, [r5, r3]
 800c862:	9b03      	ldr	r3, [sp, #12]
 800c864:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c868:	3104      	adds	r1, #4
 800c86a:	f1b9 0f00 	cmp.w	r9, #0
 800c86e:	d021      	beq.n	800c8b4 <__multiply+0x144>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	f104 0c14 	add.w	ip, r4, #20
 800c876:	46ae      	mov	lr, r5
 800c878:	f04f 0a00 	mov.w	sl, #0
 800c87c:	f8bc b000 	ldrh.w	fp, [ip]
 800c880:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c884:	fb09 770b 	mla	r7, r9, fp, r7
 800c888:	4457      	add	r7, sl
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c890:	f84e 3b04 	str.w	r3, [lr], #4
 800c894:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c898:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c89c:	f8be 3000 	ldrh.w	r3, [lr]
 800c8a0:	fb09 330a 	mla	r3, r9, sl, r3
 800c8a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c8a8:	4562      	cmp	r2, ip
 800c8aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8ae:	d8e5      	bhi.n	800c87c <__multiply+0x10c>
 800c8b0:	9f01      	ldr	r7, [sp, #4]
 800c8b2:	51eb      	str	r3, [r5, r7]
 800c8b4:	3504      	adds	r5, #4
 800c8b6:	e799      	b.n	800c7ec <__multiply+0x7c>
 800c8b8:	3e01      	subs	r6, #1
 800c8ba:	e79b      	b.n	800c7f4 <__multiply+0x84>
 800c8bc:	0800dab4 	.word	0x0800dab4
 800c8c0:	0800dac5 	.word	0x0800dac5

0800c8c4 <__pow5mult>:
 800c8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8c8:	4615      	mov	r5, r2
 800c8ca:	f012 0203 	ands.w	r2, r2, #3
 800c8ce:	4607      	mov	r7, r0
 800c8d0:	460e      	mov	r6, r1
 800c8d2:	d007      	beq.n	800c8e4 <__pow5mult+0x20>
 800c8d4:	4c25      	ldr	r4, [pc, #148]	@ (800c96c <__pow5mult+0xa8>)
 800c8d6:	3a01      	subs	r2, #1
 800c8d8:	2300      	movs	r3, #0
 800c8da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8de:	f7ff fe9f 	bl	800c620 <__multadd>
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	10ad      	asrs	r5, r5, #2
 800c8e6:	d03d      	beq.n	800c964 <__pow5mult+0xa0>
 800c8e8:	69fc      	ldr	r4, [r7, #28]
 800c8ea:	b97c      	cbnz	r4, 800c90c <__pow5mult+0x48>
 800c8ec:	2010      	movs	r0, #16
 800c8ee:	f7fd ffc1 	bl	800a874 <malloc>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	61f8      	str	r0, [r7, #28]
 800c8f6:	b928      	cbnz	r0, 800c904 <__pow5mult+0x40>
 800c8f8:	4b1d      	ldr	r3, [pc, #116]	@ (800c970 <__pow5mult+0xac>)
 800c8fa:	481e      	ldr	r0, [pc, #120]	@ (800c974 <__pow5mult+0xb0>)
 800c8fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c900:	f000 fd92 	bl	800d428 <__assert_func>
 800c904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c908:	6004      	str	r4, [r0, #0]
 800c90a:	60c4      	str	r4, [r0, #12]
 800c90c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c914:	b94c      	cbnz	r4, 800c92a <__pow5mult+0x66>
 800c916:	f240 2171 	movw	r1, #625	@ 0x271
 800c91a:	4638      	mov	r0, r7
 800c91c:	f7ff ff12 	bl	800c744 <__i2b>
 800c920:	2300      	movs	r3, #0
 800c922:	f8c8 0008 	str.w	r0, [r8, #8]
 800c926:	4604      	mov	r4, r0
 800c928:	6003      	str	r3, [r0, #0]
 800c92a:	f04f 0900 	mov.w	r9, #0
 800c92e:	07eb      	lsls	r3, r5, #31
 800c930:	d50a      	bpl.n	800c948 <__pow5mult+0x84>
 800c932:	4631      	mov	r1, r6
 800c934:	4622      	mov	r2, r4
 800c936:	4638      	mov	r0, r7
 800c938:	f7ff ff1a 	bl	800c770 <__multiply>
 800c93c:	4631      	mov	r1, r6
 800c93e:	4680      	mov	r8, r0
 800c940:	4638      	mov	r0, r7
 800c942:	f7ff fe4b 	bl	800c5dc <_Bfree>
 800c946:	4646      	mov	r6, r8
 800c948:	106d      	asrs	r5, r5, #1
 800c94a:	d00b      	beq.n	800c964 <__pow5mult+0xa0>
 800c94c:	6820      	ldr	r0, [r4, #0]
 800c94e:	b938      	cbnz	r0, 800c960 <__pow5mult+0x9c>
 800c950:	4622      	mov	r2, r4
 800c952:	4621      	mov	r1, r4
 800c954:	4638      	mov	r0, r7
 800c956:	f7ff ff0b 	bl	800c770 <__multiply>
 800c95a:	6020      	str	r0, [r4, #0]
 800c95c:	f8c0 9000 	str.w	r9, [r0]
 800c960:	4604      	mov	r4, r0
 800c962:	e7e4      	b.n	800c92e <__pow5mult+0x6a>
 800c964:	4630      	mov	r0, r6
 800c966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c96a:	bf00      	nop
 800c96c:	0800db20 	.word	0x0800db20
 800c970:	0800da45 	.word	0x0800da45
 800c974:	0800dac5 	.word	0x0800dac5

0800c978 <__lshift>:
 800c978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c97c:	460c      	mov	r4, r1
 800c97e:	6849      	ldr	r1, [r1, #4]
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c986:	68a3      	ldr	r3, [r4, #8]
 800c988:	4607      	mov	r7, r0
 800c98a:	4691      	mov	r9, r2
 800c98c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c990:	f108 0601 	add.w	r6, r8, #1
 800c994:	42b3      	cmp	r3, r6
 800c996:	db0b      	blt.n	800c9b0 <__lshift+0x38>
 800c998:	4638      	mov	r0, r7
 800c99a:	f7ff fddf 	bl	800c55c <_Balloc>
 800c99e:	4605      	mov	r5, r0
 800c9a0:	b948      	cbnz	r0, 800c9b6 <__lshift+0x3e>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	4b28      	ldr	r3, [pc, #160]	@ (800ca48 <__lshift+0xd0>)
 800c9a6:	4829      	ldr	r0, [pc, #164]	@ (800ca4c <__lshift+0xd4>)
 800c9a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c9ac:	f000 fd3c 	bl	800d428 <__assert_func>
 800c9b0:	3101      	adds	r1, #1
 800c9b2:	005b      	lsls	r3, r3, #1
 800c9b4:	e7ee      	b.n	800c994 <__lshift+0x1c>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	f100 0114 	add.w	r1, r0, #20
 800c9bc:	f100 0210 	add.w	r2, r0, #16
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	4553      	cmp	r3, sl
 800c9c4:	db33      	blt.n	800ca2e <__lshift+0xb6>
 800c9c6:	6920      	ldr	r0, [r4, #16]
 800c9c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9cc:	f104 0314 	add.w	r3, r4, #20
 800c9d0:	f019 091f 	ands.w	r9, r9, #31
 800c9d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9dc:	d02b      	beq.n	800ca36 <__lshift+0xbe>
 800c9de:	f1c9 0e20 	rsb	lr, r9, #32
 800c9e2:	468a      	mov	sl, r1
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	6818      	ldr	r0, [r3, #0]
 800c9e8:	fa00 f009 	lsl.w	r0, r0, r9
 800c9ec:	4310      	orrs	r0, r2
 800c9ee:	f84a 0b04 	str.w	r0, [sl], #4
 800c9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9f6:	459c      	cmp	ip, r3
 800c9f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9fc:	d8f3      	bhi.n	800c9e6 <__lshift+0x6e>
 800c9fe:	ebac 0304 	sub.w	r3, ip, r4
 800ca02:	3b15      	subs	r3, #21
 800ca04:	f023 0303 	bic.w	r3, r3, #3
 800ca08:	3304      	adds	r3, #4
 800ca0a:	f104 0015 	add.w	r0, r4, #21
 800ca0e:	4584      	cmp	ip, r0
 800ca10:	bf38      	it	cc
 800ca12:	2304      	movcc	r3, #4
 800ca14:	50ca      	str	r2, [r1, r3]
 800ca16:	b10a      	cbz	r2, 800ca1c <__lshift+0xa4>
 800ca18:	f108 0602 	add.w	r6, r8, #2
 800ca1c:	3e01      	subs	r6, #1
 800ca1e:	4638      	mov	r0, r7
 800ca20:	612e      	str	r6, [r5, #16]
 800ca22:	4621      	mov	r1, r4
 800ca24:	f7ff fdda 	bl	800c5dc <_Bfree>
 800ca28:	4628      	mov	r0, r5
 800ca2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca32:	3301      	adds	r3, #1
 800ca34:	e7c5      	b.n	800c9c2 <__lshift+0x4a>
 800ca36:	3904      	subs	r1, #4
 800ca38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca40:	459c      	cmp	ip, r3
 800ca42:	d8f9      	bhi.n	800ca38 <__lshift+0xc0>
 800ca44:	e7ea      	b.n	800ca1c <__lshift+0xa4>
 800ca46:	bf00      	nop
 800ca48:	0800dab4 	.word	0x0800dab4
 800ca4c:	0800dac5 	.word	0x0800dac5

0800ca50 <__mcmp>:
 800ca50:	690a      	ldr	r2, [r1, #16]
 800ca52:	4603      	mov	r3, r0
 800ca54:	6900      	ldr	r0, [r0, #16]
 800ca56:	1a80      	subs	r0, r0, r2
 800ca58:	b530      	push	{r4, r5, lr}
 800ca5a:	d10e      	bne.n	800ca7a <__mcmp+0x2a>
 800ca5c:	3314      	adds	r3, #20
 800ca5e:	3114      	adds	r1, #20
 800ca60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca70:	4295      	cmp	r5, r2
 800ca72:	d003      	beq.n	800ca7c <__mcmp+0x2c>
 800ca74:	d205      	bcs.n	800ca82 <__mcmp+0x32>
 800ca76:	f04f 30ff 	mov.w	r0, #4294967295
 800ca7a:	bd30      	pop	{r4, r5, pc}
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	d3f3      	bcc.n	800ca68 <__mcmp+0x18>
 800ca80:	e7fb      	b.n	800ca7a <__mcmp+0x2a>
 800ca82:	2001      	movs	r0, #1
 800ca84:	e7f9      	b.n	800ca7a <__mcmp+0x2a>
	...

0800ca88 <__mdiff>:
 800ca88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8c:	4689      	mov	r9, r1
 800ca8e:	4606      	mov	r6, r0
 800ca90:	4611      	mov	r1, r2
 800ca92:	4648      	mov	r0, r9
 800ca94:	4614      	mov	r4, r2
 800ca96:	f7ff ffdb 	bl	800ca50 <__mcmp>
 800ca9a:	1e05      	subs	r5, r0, #0
 800ca9c:	d112      	bne.n	800cac4 <__mdiff+0x3c>
 800ca9e:	4629      	mov	r1, r5
 800caa0:	4630      	mov	r0, r6
 800caa2:	f7ff fd5b 	bl	800c55c <_Balloc>
 800caa6:	4602      	mov	r2, r0
 800caa8:	b928      	cbnz	r0, 800cab6 <__mdiff+0x2e>
 800caaa:	4b3f      	ldr	r3, [pc, #252]	@ (800cba8 <__mdiff+0x120>)
 800caac:	f240 2137 	movw	r1, #567	@ 0x237
 800cab0:	483e      	ldr	r0, [pc, #248]	@ (800cbac <__mdiff+0x124>)
 800cab2:	f000 fcb9 	bl	800d428 <__assert_func>
 800cab6:	2301      	movs	r3, #1
 800cab8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cabc:	4610      	mov	r0, r2
 800cabe:	b003      	add	sp, #12
 800cac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac4:	bfbc      	itt	lt
 800cac6:	464b      	movlt	r3, r9
 800cac8:	46a1      	movlt	r9, r4
 800caca:	4630      	mov	r0, r6
 800cacc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cad0:	bfba      	itte	lt
 800cad2:	461c      	movlt	r4, r3
 800cad4:	2501      	movlt	r5, #1
 800cad6:	2500      	movge	r5, #0
 800cad8:	f7ff fd40 	bl	800c55c <_Balloc>
 800cadc:	4602      	mov	r2, r0
 800cade:	b918      	cbnz	r0, 800cae8 <__mdiff+0x60>
 800cae0:	4b31      	ldr	r3, [pc, #196]	@ (800cba8 <__mdiff+0x120>)
 800cae2:	f240 2145 	movw	r1, #581	@ 0x245
 800cae6:	e7e3      	b.n	800cab0 <__mdiff+0x28>
 800cae8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800caec:	6926      	ldr	r6, [r4, #16]
 800caee:	60c5      	str	r5, [r0, #12]
 800caf0:	f109 0310 	add.w	r3, r9, #16
 800caf4:	f109 0514 	add.w	r5, r9, #20
 800caf8:	f104 0e14 	add.w	lr, r4, #20
 800cafc:	f100 0b14 	add.w	fp, r0, #20
 800cb00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb08:	9301      	str	r3, [sp, #4]
 800cb0a:	46d9      	mov	r9, fp
 800cb0c:	f04f 0c00 	mov.w	ip, #0
 800cb10:	9b01      	ldr	r3, [sp, #4]
 800cb12:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb16:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb1a:	9301      	str	r3, [sp, #4]
 800cb1c:	fa1f f38a 	uxth.w	r3, sl
 800cb20:	4619      	mov	r1, r3
 800cb22:	b283      	uxth	r3, r0
 800cb24:	1acb      	subs	r3, r1, r3
 800cb26:	0c00      	lsrs	r0, r0, #16
 800cb28:	4463      	add	r3, ip
 800cb2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb38:	4576      	cmp	r6, lr
 800cb3a:	f849 3b04 	str.w	r3, [r9], #4
 800cb3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb42:	d8e5      	bhi.n	800cb10 <__mdiff+0x88>
 800cb44:	1b33      	subs	r3, r6, r4
 800cb46:	3b15      	subs	r3, #21
 800cb48:	f023 0303 	bic.w	r3, r3, #3
 800cb4c:	3415      	adds	r4, #21
 800cb4e:	3304      	adds	r3, #4
 800cb50:	42a6      	cmp	r6, r4
 800cb52:	bf38      	it	cc
 800cb54:	2304      	movcc	r3, #4
 800cb56:	441d      	add	r5, r3
 800cb58:	445b      	add	r3, fp
 800cb5a:	461e      	mov	r6, r3
 800cb5c:	462c      	mov	r4, r5
 800cb5e:	4544      	cmp	r4, r8
 800cb60:	d30e      	bcc.n	800cb80 <__mdiff+0xf8>
 800cb62:	f108 0103 	add.w	r1, r8, #3
 800cb66:	1b49      	subs	r1, r1, r5
 800cb68:	f021 0103 	bic.w	r1, r1, #3
 800cb6c:	3d03      	subs	r5, #3
 800cb6e:	45a8      	cmp	r8, r5
 800cb70:	bf38      	it	cc
 800cb72:	2100      	movcc	r1, #0
 800cb74:	440b      	add	r3, r1
 800cb76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb7a:	b191      	cbz	r1, 800cba2 <__mdiff+0x11a>
 800cb7c:	6117      	str	r7, [r2, #16]
 800cb7e:	e79d      	b.n	800cabc <__mdiff+0x34>
 800cb80:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb84:	46e6      	mov	lr, ip
 800cb86:	0c08      	lsrs	r0, r1, #16
 800cb88:	fa1c fc81 	uxtah	ip, ip, r1
 800cb8c:	4471      	add	r1, lr
 800cb8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cb92:	b289      	uxth	r1, r1
 800cb94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb98:	f846 1b04 	str.w	r1, [r6], #4
 800cb9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cba0:	e7dd      	b.n	800cb5e <__mdiff+0xd6>
 800cba2:	3f01      	subs	r7, #1
 800cba4:	e7e7      	b.n	800cb76 <__mdiff+0xee>
 800cba6:	bf00      	nop
 800cba8:	0800dab4 	.word	0x0800dab4
 800cbac:	0800dac5 	.word	0x0800dac5

0800cbb0 <__d2b>:
 800cbb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbb4:	460f      	mov	r7, r1
 800cbb6:	2101      	movs	r1, #1
 800cbb8:	ec59 8b10 	vmov	r8, r9, d0
 800cbbc:	4616      	mov	r6, r2
 800cbbe:	f7ff fccd 	bl	800c55c <_Balloc>
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	b930      	cbnz	r0, 800cbd4 <__d2b+0x24>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	4b23      	ldr	r3, [pc, #140]	@ (800cc58 <__d2b+0xa8>)
 800cbca:	4824      	ldr	r0, [pc, #144]	@ (800cc5c <__d2b+0xac>)
 800cbcc:	f240 310f 	movw	r1, #783	@ 0x30f
 800cbd0:	f000 fc2a 	bl	800d428 <__assert_func>
 800cbd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbdc:	b10d      	cbz	r5, 800cbe2 <__d2b+0x32>
 800cbde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	f1b8 0300 	subs.w	r3, r8, #0
 800cbe8:	d023      	beq.n	800cc32 <__d2b+0x82>
 800cbea:	4668      	mov	r0, sp
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	f7ff fd7c 	bl	800c6ea <__lo0bits>
 800cbf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbf6:	b1d0      	cbz	r0, 800cc2e <__d2b+0x7e>
 800cbf8:	f1c0 0320 	rsb	r3, r0, #32
 800cbfc:	fa02 f303 	lsl.w	r3, r2, r3
 800cc00:	430b      	orrs	r3, r1
 800cc02:	40c2      	lsrs	r2, r0
 800cc04:	6163      	str	r3, [r4, #20]
 800cc06:	9201      	str	r2, [sp, #4]
 800cc08:	9b01      	ldr	r3, [sp, #4]
 800cc0a:	61a3      	str	r3, [r4, #24]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bf0c      	ite	eq
 800cc10:	2201      	moveq	r2, #1
 800cc12:	2202      	movne	r2, #2
 800cc14:	6122      	str	r2, [r4, #16]
 800cc16:	b1a5      	cbz	r5, 800cc42 <__d2b+0x92>
 800cc18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc1c:	4405      	add	r5, r0
 800cc1e:	603d      	str	r5, [r7, #0]
 800cc20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc24:	6030      	str	r0, [r6, #0]
 800cc26:	4620      	mov	r0, r4
 800cc28:	b003      	add	sp, #12
 800cc2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc2e:	6161      	str	r1, [r4, #20]
 800cc30:	e7ea      	b.n	800cc08 <__d2b+0x58>
 800cc32:	a801      	add	r0, sp, #4
 800cc34:	f7ff fd59 	bl	800c6ea <__lo0bits>
 800cc38:	9b01      	ldr	r3, [sp, #4]
 800cc3a:	6163      	str	r3, [r4, #20]
 800cc3c:	3020      	adds	r0, #32
 800cc3e:	2201      	movs	r2, #1
 800cc40:	e7e8      	b.n	800cc14 <__d2b+0x64>
 800cc42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc4a:	6038      	str	r0, [r7, #0]
 800cc4c:	6918      	ldr	r0, [r3, #16]
 800cc4e:	f7ff fd2d 	bl	800c6ac <__hi0bits>
 800cc52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc56:	e7e5      	b.n	800cc24 <__d2b+0x74>
 800cc58:	0800dab4 	.word	0x0800dab4
 800cc5c:	0800dac5 	.word	0x0800dac5

0800cc60 <__ssputs_r>:
 800cc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc64:	688e      	ldr	r6, [r1, #8]
 800cc66:	461f      	mov	r7, r3
 800cc68:	42be      	cmp	r6, r7
 800cc6a:	680b      	ldr	r3, [r1, #0]
 800cc6c:	4682      	mov	sl, r0
 800cc6e:	460c      	mov	r4, r1
 800cc70:	4690      	mov	r8, r2
 800cc72:	d82d      	bhi.n	800ccd0 <__ssputs_r+0x70>
 800cc74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cc7c:	d026      	beq.n	800cccc <__ssputs_r+0x6c>
 800cc7e:	6965      	ldr	r5, [r4, #20]
 800cc80:	6909      	ldr	r1, [r1, #16]
 800cc82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc86:	eba3 0901 	sub.w	r9, r3, r1
 800cc8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc8e:	1c7b      	adds	r3, r7, #1
 800cc90:	444b      	add	r3, r9
 800cc92:	106d      	asrs	r5, r5, #1
 800cc94:	429d      	cmp	r5, r3
 800cc96:	bf38      	it	cc
 800cc98:	461d      	movcc	r5, r3
 800cc9a:	0553      	lsls	r3, r2, #21
 800cc9c:	d527      	bpl.n	800ccee <__ssputs_r+0x8e>
 800cc9e:	4629      	mov	r1, r5
 800cca0:	f7fd fe1a 	bl	800a8d8 <_malloc_r>
 800cca4:	4606      	mov	r6, r0
 800cca6:	b360      	cbz	r0, 800cd02 <__ssputs_r+0xa2>
 800cca8:	6921      	ldr	r1, [r4, #16]
 800ccaa:	464a      	mov	r2, r9
 800ccac:	f7fe fdb1 	bl	800b812 <memcpy>
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ccb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccba:	81a3      	strh	r3, [r4, #12]
 800ccbc:	6126      	str	r6, [r4, #16]
 800ccbe:	6165      	str	r5, [r4, #20]
 800ccc0:	444e      	add	r6, r9
 800ccc2:	eba5 0509 	sub.w	r5, r5, r9
 800ccc6:	6026      	str	r6, [r4, #0]
 800ccc8:	60a5      	str	r5, [r4, #8]
 800ccca:	463e      	mov	r6, r7
 800cccc:	42be      	cmp	r6, r7
 800ccce:	d900      	bls.n	800ccd2 <__ssputs_r+0x72>
 800ccd0:	463e      	mov	r6, r7
 800ccd2:	6820      	ldr	r0, [r4, #0]
 800ccd4:	4632      	mov	r2, r6
 800ccd6:	4641      	mov	r1, r8
 800ccd8:	f000 fb6a 	bl	800d3b0 <memmove>
 800ccdc:	68a3      	ldr	r3, [r4, #8]
 800ccde:	1b9b      	subs	r3, r3, r6
 800cce0:	60a3      	str	r3, [r4, #8]
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	4433      	add	r3, r6
 800cce6:	6023      	str	r3, [r4, #0]
 800cce8:	2000      	movs	r0, #0
 800ccea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccee:	462a      	mov	r2, r5
 800ccf0:	f000 fbde 	bl	800d4b0 <_realloc_r>
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d1e0      	bne.n	800ccbc <__ssputs_r+0x5c>
 800ccfa:	6921      	ldr	r1, [r4, #16]
 800ccfc:	4650      	mov	r0, sl
 800ccfe:	f7ff fbe3 	bl	800c4c8 <_free_r>
 800cd02:	230c      	movs	r3, #12
 800cd04:	f8ca 3000 	str.w	r3, [sl]
 800cd08:	89a3      	ldrh	r3, [r4, #12]
 800cd0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd0e:	81a3      	strh	r3, [r4, #12]
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295
 800cd14:	e7e9      	b.n	800ccea <__ssputs_r+0x8a>
	...

0800cd18 <_svfiprintf_r>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	4698      	mov	r8, r3
 800cd1e:	898b      	ldrh	r3, [r1, #12]
 800cd20:	061b      	lsls	r3, r3, #24
 800cd22:	b09d      	sub	sp, #116	@ 0x74
 800cd24:	4607      	mov	r7, r0
 800cd26:	460d      	mov	r5, r1
 800cd28:	4614      	mov	r4, r2
 800cd2a:	d510      	bpl.n	800cd4e <_svfiprintf_r+0x36>
 800cd2c:	690b      	ldr	r3, [r1, #16]
 800cd2e:	b973      	cbnz	r3, 800cd4e <_svfiprintf_r+0x36>
 800cd30:	2140      	movs	r1, #64	@ 0x40
 800cd32:	f7fd fdd1 	bl	800a8d8 <_malloc_r>
 800cd36:	6028      	str	r0, [r5, #0]
 800cd38:	6128      	str	r0, [r5, #16]
 800cd3a:	b930      	cbnz	r0, 800cd4a <_svfiprintf_r+0x32>
 800cd3c:	230c      	movs	r3, #12
 800cd3e:	603b      	str	r3, [r7, #0]
 800cd40:	f04f 30ff 	mov.w	r0, #4294967295
 800cd44:	b01d      	add	sp, #116	@ 0x74
 800cd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd4a:	2340      	movs	r3, #64	@ 0x40
 800cd4c:	616b      	str	r3, [r5, #20]
 800cd4e:	2300      	movs	r3, #0
 800cd50:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd52:	2320      	movs	r3, #32
 800cd54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd58:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd5c:	2330      	movs	r3, #48	@ 0x30
 800cd5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cefc <_svfiprintf_r+0x1e4>
 800cd62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd66:	f04f 0901 	mov.w	r9, #1
 800cd6a:	4623      	mov	r3, r4
 800cd6c:	469a      	mov	sl, r3
 800cd6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd72:	b10a      	cbz	r2, 800cd78 <_svfiprintf_r+0x60>
 800cd74:	2a25      	cmp	r2, #37	@ 0x25
 800cd76:	d1f9      	bne.n	800cd6c <_svfiprintf_r+0x54>
 800cd78:	ebba 0b04 	subs.w	fp, sl, r4
 800cd7c:	d00b      	beq.n	800cd96 <_svfiprintf_r+0x7e>
 800cd7e:	465b      	mov	r3, fp
 800cd80:	4622      	mov	r2, r4
 800cd82:	4629      	mov	r1, r5
 800cd84:	4638      	mov	r0, r7
 800cd86:	f7ff ff6b 	bl	800cc60 <__ssputs_r>
 800cd8a:	3001      	adds	r0, #1
 800cd8c:	f000 80a7 	beq.w	800cede <_svfiprintf_r+0x1c6>
 800cd90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd92:	445a      	add	r2, fp
 800cd94:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd96:	f89a 3000 	ldrb.w	r3, [sl]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 809f 	beq.w	800cede <_svfiprintf_r+0x1c6>
 800cda0:	2300      	movs	r3, #0
 800cda2:	f04f 32ff 	mov.w	r2, #4294967295
 800cda6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdaa:	f10a 0a01 	add.w	sl, sl, #1
 800cdae:	9304      	str	r3, [sp, #16]
 800cdb0:	9307      	str	r3, [sp, #28]
 800cdb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdb8:	4654      	mov	r4, sl
 800cdba:	2205      	movs	r2, #5
 800cdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc0:	484e      	ldr	r0, [pc, #312]	@ (800cefc <_svfiprintf_r+0x1e4>)
 800cdc2:	f7f3 fa2d 	bl	8000220 <memchr>
 800cdc6:	9a04      	ldr	r2, [sp, #16]
 800cdc8:	b9d8      	cbnz	r0, 800ce02 <_svfiprintf_r+0xea>
 800cdca:	06d0      	lsls	r0, r2, #27
 800cdcc:	bf44      	itt	mi
 800cdce:	2320      	movmi	r3, #32
 800cdd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdd4:	0711      	lsls	r1, r2, #28
 800cdd6:	bf44      	itt	mi
 800cdd8:	232b      	movmi	r3, #43	@ 0x2b
 800cdda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdde:	f89a 3000 	ldrb.w	r3, [sl]
 800cde2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cde4:	d015      	beq.n	800ce12 <_svfiprintf_r+0xfa>
 800cde6:	9a07      	ldr	r2, [sp, #28]
 800cde8:	4654      	mov	r4, sl
 800cdea:	2000      	movs	r0, #0
 800cdec:	f04f 0c0a 	mov.w	ip, #10
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdf6:	3b30      	subs	r3, #48	@ 0x30
 800cdf8:	2b09      	cmp	r3, #9
 800cdfa:	d94b      	bls.n	800ce94 <_svfiprintf_r+0x17c>
 800cdfc:	b1b0      	cbz	r0, 800ce2c <_svfiprintf_r+0x114>
 800cdfe:	9207      	str	r2, [sp, #28]
 800ce00:	e014      	b.n	800ce2c <_svfiprintf_r+0x114>
 800ce02:	eba0 0308 	sub.w	r3, r0, r8
 800ce06:	fa09 f303 	lsl.w	r3, r9, r3
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	9304      	str	r3, [sp, #16]
 800ce0e:	46a2      	mov	sl, r4
 800ce10:	e7d2      	b.n	800cdb8 <_svfiprintf_r+0xa0>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	1d19      	adds	r1, r3, #4
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	9103      	str	r1, [sp, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	bfbb      	ittet	lt
 800ce1e:	425b      	neglt	r3, r3
 800ce20:	f042 0202 	orrlt.w	r2, r2, #2
 800ce24:	9307      	strge	r3, [sp, #28]
 800ce26:	9307      	strlt	r3, [sp, #28]
 800ce28:	bfb8      	it	lt
 800ce2a:	9204      	strlt	r2, [sp, #16]
 800ce2c:	7823      	ldrb	r3, [r4, #0]
 800ce2e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce30:	d10a      	bne.n	800ce48 <_svfiprintf_r+0x130>
 800ce32:	7863      	ldrb	r3, [r4, #1]
 800ce34:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce36:	d132      	bne.n	800ce9e <_svfiprintf_r+0x186>
 800ce38:	9b03      	ldr	r3, [sp, #12]
 800ce3a:	1d1a      	adds	r2, r3, #4
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	9203      	str	r2, [sp, #12]
 800ce40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce44:	3402      	adds	r4, #2
 800ce46:	9305      	str	r3, [sp, #20]
 800ce48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf0c <_svfiprintf_r+0x1f4>
 800ce4c:	7821      	ldrb	r1, [r4, #0]
 800ce4e:	2203      	movs	r2, #3
 800ce50:	4650      	mov	r0, sl
 800ce52:	f7f3 f9e5 	bl	8000220 <memchr>
 800ce56:	b138      	cbz	r0, 800ce68 <_svfiprintf_r+0x150>
 800ce58:	9b04      	ldr	r3, [sp, #16]
 800ce5a:	eba0 000a 	sub.w	r0, r0, sl
 800ce5e:	2240      	movs	r2, #64	@ 0x40
 800ce60:	4082      	lsls	r2, r0
 800ce62:	4313      	orrs	r3, r2
 800ce64:	3401      	adds	r4, #1
 800ce66:	9304      	str	r3, [sp, #16]
 800ce68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce6c:	4824      	ldr	r0, [pc, #144]	@ (800cf00 <_svfiprintf_r+0x1e8>)
 800ce6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce72:	2206      	movs	r2, #6
 800ce74:	f7f3 f9d4 	bl	8000220 <memchr>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d036      	beq.n	800ceea <_svfiprintf_r+0x1d2>
 800ce7c:	4b21      	ldr	r3, [pc, #132]	@ (800cf04 <_svfiprintf_r+0x1ec>)
 800ce7e:	bb1b      	cbnz	r3, 800cec8 <_svfiprintf_r+0x1b0>
 800ce80:	9b03      	ldr	r3, [sp, #12]
 800ce82:	3307      	adds	r3, #7
 800ce84:	f023 0307 	bic.w	r3, r3, #7
 800ce88:	3308      	adds	r3, #8
 800ce8a:	9303      	str	r3, [sp, #12]
 800ce8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce8e:	4433      	add	r3, r6
 800ce90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce92:	e76a      	b.n	800cd6a <_svfiprintf_r+0x52>
 800ce94:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce98:	460c      	mov	r4, r1
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	e7a8      	b.n	800cdf0 <_svfiprintf_r+0xd8>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	3401      	adds	r4, #1
 800cea2:	9305      	str	r3, [sp, #20]
 800cea4:	4619      	mov	r1, r3
 800cea6:	f04f 0c0a 	mov.w	ip, #10
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceb0:	3a30      	subs	r2, #48	@ 0x30
 800ceb2:	2a09      	cmp	r2, #9
 800ceb4:	d903      	bls.n	800cebe <_svfiprintf_r+0x1a6>
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d0c6      	beq.n	800ce48 <_svfiprintf_r+0x130>
 800ceba:	9105      	str	r1, [sp, #20]
 800cebc:	e7c4      	b.n	800ce48 <_svfiprintf_r+0x130>
 800cebe:	fb0c 2101 	mla	r1, ip, r1, r2
 800cec2:	4604      	mov	r4, r0
 800cec4:	2301      	movs	r3, #1
 800cec6:	e7f0      	b.n	800ceaa <_svfiprintf_r+0x192>
 800cec8:	ab03      	add	r3, sp, #12
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	462a      	mov	r2, r5
 800cece:	4b0e      	ldr	r3, [pc, #56]	@ (800cf08 <_svfiprintf_r+0x1f0>)
 800ced0:	a904      	add	r1, sp, #16
 800ced2:	4638      	mov	r0, r7
 800ced4:	f7fd fe2c 	bl	800ab30 <_printf_float>
 800ced8:	1c42      	adds	r2, r0, #1
 800ceda:	4606      	mov	r6, r0
 800cedc:	d1d6      	bne.n	800ce8c <_svfiprintf_r+0x174>
 800cede:	89ab      	ldrh	r3, [r5, #12]
 800cee0:	065b      	lsls	r3, r3, #25
 800cee2:	f53f af2d 	bmi.w	800cd40 <_svfiprintf_r+0x28>
 800cee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cee8:	e72c      	b.n	800cd44 <_svfiprintf_r+0x2c>
 800ceea:	ab03      	add	r3, sp, #12
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	462a      	mov	r2, r5
 800cef0:	4b05      	ldr	r3, [pc, #20]	@ (800cf08 <_svfiprintf_r+0x1f0>)
 800cef2:	a904      	add	r1, sp, #16
 800cef4:	4638      	mov	r0, r7
 800cef6:	f7fe f8b3 	bl	800b060 <_printf_i>
 800cefa:	e7ed      	b.n	800ced8 <_svfiprintf_r+0x1c0>
 800cefc:	0800dc20 	.word	0x0800dc20
 800cf00:	0800dc2a 	.word	0x0800dc2a
 800cf04:	0800ab31 	.word	0x0800ab31
 800cf08:	0800cc61 	.word	0x0800cc61
 800cf0c:	0800dc26 	.word	0x0800dc26

0800cf10 <__sfputc_r>:
 800cf10:	6893      	ldr	r3, [r2, #8]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	b410      	push	{r4}
 800cf18:	6093      	str	r3, [r2, #8]
 800cf1a:	da08      	bge.n	800cf2e <__sfputc_r+0x1e>
 800cf1c:	6994      	ldr	r4, [r2, #24]
 800cf1e:	42a3      	cmp	r3, r4
 800cf20:	db01      	blt.n	800cf26 <__sfputc_r+0x16>
 800cf22:	290a      	cmp	r1, #10
 800cf24:	d103      	bne.n	800cf2e <__sfputc_r+0x1e>
 800cf26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf2a:	f7fe bb4e 	b.w	800b5ca <__swbuf_r>
 800cf2e:	6813      	ldr	r3, [r2, #0]
 800cf30:	1c58      	adds	r0, r3, #1
 800cf32:	6010      	str	r0, [r2, #0]
 800cf34:	7019      	strb	r1, [r3, #0]
 800cf36:	4608      	mov	r0, r1
 800cf38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <__sfputs_r>:
 800cf3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf40:	4606      	mov	r6, r0
 800cf42:	460f      	mov	r7, r1
 800cf44:	4614      	mov	r4, r2
 800cf46:	18d5      	adds	r5, r2, r3
 800cf48:	42ac      	cmp	r4, r5
 800cf4a:	d101      	bne.n	800cf50 <__sfputs_r+0x12>
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	e007      	b.n	800cf60 <__sfputs_r+0x22>
 800cf50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf54:	463a      	mov	r2, r7
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7ff ffda 	bl	800cf10 <__sfputc_r>
 800cf5c:	1c43      	adds	r3, r0, #1
 800cf5e:	d1f3      	bne.n	800cf48 <__sfputs_r+0xa>
 800cf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf64 <_vfiprintf_r>:
 800cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	460d      	mov	r5, r1
 800cf6a:	b09d      	sub	sp, #116	@ 0x74
 800cf6c:	4614      	mov	r4, r2
 800cf6e:	4698      	mov	r8, r3
 800cf70:	4606      	mov	r6, r0
 800cf72:	b118      	cbz	r0, 800cf7c <_vfiprintf_r+0x18>
 800cf74:	6a03      	ldr	r3, [r0, #32]
 800cf76:	b90b      	cbnz	r3, 800cf7c <_vfiprintf_r+0x18>
 800cf78:	f7fe fa1e 	bl	800b3b8 <__sinit>
 800cf7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf7e:	07d9      	lsls	r1, r3, #31
 800cf80:	d405      	bmi.n	800cf8e <_vfiprintf_r+0x2a>
 800cf82:	89ab      	ldrh	r3, [r5, #12]
 800cf84:	059a      	lsls	r2, r3, #22
 800cf86:	d402      	bmi.n	800cf8e <_vfiprintf_r+0x2a>
 800cf88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf8a:	f7fe fc40 	bl	800b80e <__retarget_lock_acquire_recursive>
 800cf8e:	89ab      	ldrh	r3, [r5, #12]
 800cf90:	071b      	lsls	r3, r3, #28
 800cf92:	d501      	bpl.n	800cf98 <_vfiprintf_r+0x34>
 800cf94:	692b      	ldr	r3, [r5, #16]
 800cf96:	b99b      	cbnz	r3, 800cfc0 <_vfiprintf_r+0x5c>
 800cf98:	4629      	mov	r1, r5
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	f7fe fb54 	bl	800b648 <__swsetup_r>
 800cfa0:	b170      	cbz	r0, 800cfc0 <_vfiprintf_r+0x5c>
 800cfa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfa4:	07dc      	lsls	r4, r3, #31
 800cfa6:	d504      	bpl.n	800cfb2 <_vfiprintf_r+0x4e>
 800cfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfac:	b01d      	add	sp, #116	@ 0x74
 800cfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb2:	89ab      	ldrh	r3, [r5, #12]
 800cfb4:	0598      	lsls	r0, r3, #22
 800cfb6:	d4f7      	bmi.n	800cfa8 <_vfiprintf_r+0x44>
 800cfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfba:	f7fe fc29 	bl	800b810 <__retarget_lock_release_recursive>
 800cfbe:	e7f3      	b.n	800cfa8 <_vfiprintf_r+0x44>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfc4:	2320      	movs	r3, #32
 800cfc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfca:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfce:	2330      	movs	r3, #48	@ 0x30
 800cfd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d180 <_vfiprintf_r+0x21c>
 800cfd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfd8:	f04f 0901 	mov.w	r9, #1
 800cfdc:	4623      	mov	r3, r4
 800cfde:	469a      	mov	sl, r3
 800cfe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfe4:	b10a      	cbz	r2, 800cfea <_vfiprintf_r+0x86>
 800cfe6:	2a25      	cmp	r2, #37	@ 0x25
 800cfe8:	d1f9      	bne.n	800cfde <_vfiprintf_r+0x7a>
 800cfea:	ebba 0b04 	subs.w	fp, sl, r4
 800cfee:	d00b      	beq.n	800d008 <_vfiprintf_r+0xa4>
 800cff0:	465b      	mov	r3, fp
 800cff2:	4622      	mov	r2, r4
 800cff4:	4629      	mov	r1, r5
 800cff6:	4630      	mov	r0, r6
 800cff8:	f7ff ffa1 	bl	800cf3e <__sfputs_r>
 800cffc:	3001      	adds	r0, #1
 800cffe:	f000 80a7 	beq.w	800d150 <_vfiprintf_r+0x1ec>
 800d002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d004:	445a      	add	r2, fp
 800d006:	9209      	str	r2, [sp, #36]	@ 0x24
 800d008:	f89a 3000 	ldrb.w	r3, [sl]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 809f 	beq.w	800d150 <_vfiprintf_r+0x1ec>
 800d012:	2300      	movs	r3, #0
 800d014:	f04f 32ff 	mov.w	r2, #4294967295
 800d018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d01c:	f10a 0a01 	add.w	sl, sl, #1
 800d020:	9304      	str	r3, [sp, #16]
 800d022:	9307      	str	r3, [sp, #28]
 800d024:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d028:	931a      	str	r3, [sp, #104]	@ 0x68
 800d02a:	4654      	mov	r4, sl
 800d02c:	2205      	movs	r2, #5
 800d02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d032:	4853      	ldr	r0, [pc, #332]	@ (800d180 <_vfiprintf_r+0x21c>)
 800d034:	f7f3 f8f4 	bl	8000220 <memchr>
 800d038:	9a04      	ldr	r2, [sp, #16]
 800d03a:	b9d8      	cbnz	r0, 800d074 <_vfiprintf_r+0x110>
 800d03c:	06d1      	lsls	r1, r2, #27
 800d03e:	bf44      	itt	mi
 800d040:	2320      	movmi	r3, #32
 800d042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d046:	0713      	lsls	r3, r2, #28
 800d048:	bf44      	itt	mi
 800d04a:	232b      	movmi	r3, #43	@ 0x2b
 800d04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d050:	f89a 3000 	ldrb.w	r3, [sl]
 800d054:	2b2a      	cmp	r3, #42	@ 0x2a
 800d056:	d015      	beq.n	800d084 <_vfiprintf_r+0x120>
 800d058:	9a07      	ldr	r2, [sp, #28]
 800d05a:	4654      	mov	r4, sl
 800d05c:	2000      	movs	r0, #0
 800d05e:	f04f 0c0a 	mov.w	ip, #10
 800d062:	4621      	mov	r1, r4
 800d064:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d068:	3b30      	subs	r3, #48	@ 0x30
 800d06a:	2b09      	cmp	r3, #9
 800d06c:	d94b      	bls.n	800d106 <_vfiprintf_r+0x1a2>
 800d06e:	b1b0      	cbz	r0, 800d09e <_vfiprintf_r+0x13a>
 800d070:	9207      	str	r2, [sp, #28]
 800d072:	e014      	b.n	800d09e <_vfiprintf_r+0x13a>
 800d074:	eba0 0308 	sub.w	r3, r0, r8
 800d078:	fa09 f303 	lsl.w	r3, r9, r3
 800d07c:	4313      	orrs	r3, r2
 800d07e:	9304      	str	r3, [sp, #16]
 800d080:	46a2      	mov	sl, r4
 800d082:	e7d2      	b.n	800d02a <_vfiprintf_r+0xc6>
 800d084:	9b03      	ldr	r3, [sp, #12]
 800d086:	1d19      	adds	r1, r3, #4
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	9103      	str	r1, [sp, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	bfbb      	ittet	lt
 800d090:	425b      	neglt	r3, r3
 800d092:	f042 0202 	orrlt.w	r2, r2, #2
 800d096:	9307      	strge	r3, [sp, #28]
 800d098:	9307      	strlt	r3, [sp, #28]
 800d09a:	bfb8      	it	lt
 800d09c:	9204      	strlt	r2, [sp, #16]
 800d09e:	7823      	ldrb	r3, [r4, #0]
 800d0a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0a2:	d10a      	bne.n	800d0ba <_vfiprintf_r+0x156>
 800d0a4:	7863      	ldrb	r3, [r4, #1]
 800d0a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0a8:	d132      	bne.n	800d110 <_vfiprintf_r+0x1ac>
 800d0aa:	9b03      	ldr	r3, [sp, #12]
 800d0ac:	1d1a      	adds	r2, r3, #4
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	9203      	str	r2, [sp, #12]
 800d0b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0b6:	3402      	adds	r4, #2
 800d0b8:	9305      	str	r3, [sp, #20]
 800d0ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d190 <_vfiprintf_r+0x22c>
 800d0be:	7821      	ldrb	r1, [r4, #0]
 800d0c0:	2203      	movs	r2, #3
 800d0c2:	4650      	mov	r0, sl
 800d0c4:	f7f3 f8ac 	bl	8000220 <memchr>
 800d0c8:	b138      	cbz	r0, 800d0da <_vfiprintf_r+0x176>
 800d0ca:	9b04      	ldr	r3, [sp, #16]
 800d0cc:	eba0 000a 	sub.w	r0, r0, sl
 800d0d0:	2240      	movs	r2, #64	@ 0x40
 800d0d2:	4082      	lsls	r2, r0
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	3401      	adds	r4, #1
 800d0d8:	9304      	str	r3, [sp, #16]
 800d0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0de:	4829      	ldr	r0, [pc, #164]	@ (800d184 <_vfiprintf_r+0x220>)
 800d0e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0e4:	2206      	movs	r2, #6
 800d0e6:	f7f3 f89b 	bl	8000220 <memchr>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d03f      	beq.n	800d16e <_vfiprintf_r+0x20a>
 800d0ee:	4b26      	ldr	r3, [pc, #152]	@ (800d188 <_vfiprintf_r+0x224>)
 800d0f0:	bb1b      	cbnz	r3, 800d13a <_vfiprintf_r+0x1d6>
 800d0f2:	9b03      	ldr	r3, [sp, #12]
 800d0f4:	3307      	adds	r3, #7
 800d0f6:	f023 0307 	bic.w	r3, r3, #7
 800d0fa:	3308      	adds	r3, #8
 800d0fc:	9303      	str	r3, [sp, #12]
 800d0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d100:	443b      	add	r3, r7
 800d102:	9309      	str	r3, [sp, #36]	@ 0x24
 800d104:	e76a      	b.n	800cfdc <_vfiprintf_r+0x78>
 800d106:	fb0c 3202 	mla	r2, ip, r2, r3
 800d10a:	460c      	mov	r4, r1
 800d10c:	2001      	movs	r0, #1
 800d10e:	e7a8      	b.n	800d062 <_vfiprintf_r+0xfe>
 800d110:	2300      	movs	r3, #0
 800d112:	3401      	adds	r4, #1
 800d114:	9305      	str	r3, [sp, #20]
 800d116:	4619      	mov	r1, r3
 800d118:	f04f 0c0a 	mov.w	ip, #10
 800d11c:	4620      	mov	r0, r4
 800d11e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d122:	3a30      	subs	r2, #48	@ 0x30
 800d124:	2a09      	cmp	r2, #9
 800d126:	d903      	bls.n	800d130 <_vfiprintf_r+0x1cc>
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d0c6      	beq.n	800d0ba <_vfiprintf_r+0x156>
 800d12c:	9105      	str	r1, [sp, #20]
 800d12e:	e7c4      	b.n	800d0ba <_vfiprintf_r+0x156>
 800d130:	fb0c 2101 	mla	r1, ip, r1, r2
 800d134:	4604      	mov	r4, r0
 800d136:	2301      	movs	r3, #1
 800d138:	e7f0      	b.n	800d11c <_vfiprintf_r+0x1b8>
 800d13a:	ab03      	add	r3, sp, #12
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	462a      	mov	r2, r5
 800d140:	4b12      	ldr	r3, [pc, #72]	@ (800d18c <_vfiprintf_r+0x228>)
 800d142:	a904      	add	r1, sp, #16
 800d144:	4630      	mov	r0, r6
 800d146:	f7fd fcf3 	bl	800ab30 <_printf_float>
 800d14a:	4607      	mov	r7, r0
 800d14c:	1c78      	adds	r0, r7, #1
 800d14e:	d1d6      	bne.n	800d0fe <_vfiprintf_r+0x19a>
 800d150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d152:	07d9      	lsls	r1, r3, #31
 800d154:	d405      	bmi.n	800d162 <_vfiprintf_r+0x1fe>
 800d156:	89ab      	ldrh	r3, [r5, #12]
 800d158:	059a      	lsls	r2, r3, #22
 800d15a:	d402      	bmi.n	800d162 <_vfiprintf_r+0x1fe>
 800d15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d15e:	f7fe fb57 	bl	800b810 <__retarget_lock_release_recursive>
 800d162:	89ab      	ldrh	r3, [r5, #12]
 800d164:	065b      	lsls	r3, r3, #25
 800d166:	f53f af1f 	bmi.w	800cfa8 <_vfiprintf_r+0x44>
 800d16a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d16c:	e71e      	b.n	800cfac <_vfiprintf_r+0x48>
 800d16e:	ab03      	add	r3, sp, #12
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	462a      	mov	r2, r5
 800d174:	4b05      	ldr	r3, [pc, #20]	@ (800d18c <_vfiprintf_r+0x228>)
 800d176:	a904      	add	r1, sp, #16
 800d178:	4630      	mov	r0, r6
 800d17a:	f7fd ff71 	bl	800b060 <_printf_i>
 800d17e:	e7e4      	b.n	800d14a <_vfiprintf_r+0x1e6>
 800d180:	0800dc20 	.word	0x0800dc20
 800d184:	0800dc2a 	.word	0x0800dc2a
 800d188:	0800ab31 	.word	0x0800ab31
 800d18c:	0800cf3f 	.word	0x0800cf3f
 800d190:	0800dc26 	.word	0x0800dc26

0800d194 <__sflush_r>:
 800d194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d19c:	0716      	lsls	r6, r2, #28
 800d19e:	4605      	mov	r5, r0
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	d454      	bmi.n	800d24e <__sflush_r+0xba>
 800d1a4:	684b      	ldr	r3, [r1, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	dc02      	bgt.n	800d1b0 <__sflush_r+0x1c>
 800d1aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	dd48      	ble.n	800d242 <__sflush_r+0xae>
 800d1b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1b2:	2e00      	cmp	r6, #0
 800d1b4:	d045      	beq.n	800d242 <__sflush_r+0xae>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1bc:	682f      	ldr	r7, [r5, #0]
 800d1be:	6a21      	ldr	r1, [r4, #32]
 800d1c0:	602b      	str	r3, [r5, #0]
 800d1c2:	d030      	beq.n	800d226 <__sflush_r+0x92>
 800d1c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1c6:	89a3      	ldrh	r3, [r4, #12]
 800d1c8:	0759      	lsls	r1, r3, #29
 800d1ca:	d505      	bpl.n	800d1d8 <__sflush_r+0x44>
 800d1cc:	6863      	ldr	r3, [r4, #4]
 800d1ce:	1ad2      	subs	r2, r2, r3
 800d1d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d1d2:	b10b      	cbz	r3, 800d1d8 <__sflush_r+0x44>
 800d1d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1d6:	1ad2      	subs	r2, r2, r3
 800d1d8:	2300      	movs	r3, #0
 800d1da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1dc:	6a21      	ldr	r1, [r4, #32]
 800d1de:	4628      	mov	r0, r5
 800d1e0:	47b0      	blx	r6
 800d1e2:	1c43      	adds	r3, r0, #1
 800d1e4:	89a3      	ldrh	r3, [r4, #12]
 800d1e6:	d106      	bne.n	800d1f6 <__sflush_r+0x62>
 800d1e8:	6829      	ldr	r1, [r5, #0]
 800d1ea:	291d      	cmp	r1, #29
 800d1ec:	d82b      	bhi.n	800d246 <__sflush_r+0xb2>
 800d1ee:	4a2a      	ldr	r2, [pc, #168]	@ (800d298 <__sflush_r+0x104>)
 800d1f0:	410a      	asrs	r2, r1
 800d1f2:	07d6      	lsls	r6, r2, #31
 800d1f4:	d427      	bmi.n	800d246 <__sflush_r+0xb2>
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	6062      	str	r2, [r4, #4]
 800d1fa:	04d9      	lsls	r1, r3, #19
 800d1fc:	6922      	ldr	r2, [r4, #16]
 800d1fe:	6022      	str	r2, [r4, #0]
 800d200:	d504      	bpl.n	800d20c <__sflush_r+0x78>
 800d202:	1c42      	adds	r2, r0, #1
 800d204:	d101      	bne.n	800d20a <__sflush_r+0x76>
 800d206:	682b      	ldr	r3, [r5, #0]
 800d208:	b903      	cbnz	r3, 800d20c <__sflush_r+0x78>
 800d20a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d20c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d20e:	602f      	str	r7, [r5, #0]
 800d210:	b1b9      	cbz	r1, 800d242 <__sflush_r+0xae>
 800d212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d216:	4299      	cmp	r1, r3
 800d218:	d002      	beq.n	800d220 <__sflush_r+0x8c>
 800d21a:	4628      	mov	r0, r5
 800d21c:	f7ff f954 	bl	800c4c8 <_free_r>
 800d220:	2300      	movs	r3, #0
 800d222:	6363      	str	r3, [r4, #52]	@ 0x34
 800d224:	e00d      	b.n	800d242 <__sflush_r+0xae>
 800d226:	2301      	movs	r3, #1
 800d228:	4628      	mov	r0, r5
 800d22a:	47b0      	blx	r6
 800d22c:	4602      	mov	r2, r0
 800d22e:	1c50      	adds	r0, r2, #1
 800d230:	d1c9      	bne.n	800d1c6 <__sflush_r+0x32>
 800d232:	682b      	ldr	r3, [r5, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d0c6      	beq.n	800d1c6 <__sflush_r+0x32>
 800d238:	2b1d      	cmp	r3, #29
 800d23a:	d001      	beq.n	800d240 <__sflush_r+0xac>
 800d23c:	2b16      	cmp	r3, #22
 800d23e:	d11e      	bne.n	800d27e <__sflush_r+0xea>
 800d240:	602f      	str	r7, [r5, #0]
 800d242:	2000      	movs	r0, #0
 800d244:	e022      	b.n	800d28c <__sflush_r+0xf8>
 800d246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d24a:	b21b      	sxth	r3, r3
 800d24c:	e01b      	b.n	800d286 <__sflush_r+0xf2>
 800d24e:	690f      	ldr	r7, [r1, #16]
 800d250:	2f00      	cmp	r7, #0
 800d252:	d0f6      	beq.n	800d242 <__sflush_r+0xae>
 800d254:	0793      	lsls	r3, r2, #30
 800d256:	680e      	ldr	r6, [r1, #0]
 800d258:	bf08      	it	eq
 800d25a:	694b      	ldreq	r3, [r1, #20]
 800d25c:	600f      	str	r7, [r1, #0]
 800d25e:	bf18      	it	ne
 800d260:	2300      	movne	r3, #0
 800d262:	eba6 0807 	sub.w	r8, r6, r7
 800d266:	608b      	str	r3, [r1, #8]
 800d268:	f1b8 0f00 	cmp.w	r8, #0
 800d26c:	dde9      	ble.n	800d242 <__sflush_r+0xae>
 800d26e:	6a21      	ldr	r1, [r4, #32]
 800d270:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d272:	4643      	mov	r3, r8
 800d274:	463a      	mov	r2, r7
 800d276:	4628      	mov	r0, r5
 800d278:	47b0      	blx	r6
 800d27a:	2800      	cmp	r0, #0
 800d27c:	dc08      	bgt.n	800d290 <__sflush_r+0xfc>
 800d27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d286:	81a3      	strh	r3, [r4, #12]
 800d288:	f04f 30ff 	mov.w	r0, #4294967295
 800d28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d290:	4407      	add	r7, r0
 800d292:	eba8 0800 	sub.w	r8, r8, r0
 800d296:	e7e7      	b.n	800d268 <__sflush_r+0xd4>
 800d298:	dfbffffe 	.word	0xdfbffffe

0800d29c <_fflush_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	690b      	ldr	r3, [r1, #16]
 800d2a0:	4605      	mov	r5, r0
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	b913      	cbnz	r3, 800d2ac <_fflush_r+0x10>
 800d2a6:	2500      	movs	r5, #0
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	b118      	cbz	r0, 800d2b6 <_fflush_r+0x1a>
 800d2ae:	6a03      	ldr	r3, [r0, #32]
 800d2b0:	b90b      	cbnz	r3, 800d2b6 <_fflush_r+0x1a>
 800d2b2:	f7fe f881 	bl	800b3b8 <__sinit>
 800d2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d0f3      	beq.n	800d2a6 <_fflush_r+0xa>
 800d2be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2c0:	07d0      	lsls	r0, r2, #31
 800d2c2:	d404      	bmi.n	800d2ce <_fflush_r+0x32>
 800d2c4:	0599      	lsls	r1, r3, #22
 800d2c6:	d402      	bmi.n	800d2ce <_fflush_r+0x32>
 800d2c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2ca:	f7fe faa0 	bl	800b80e <__retarget_lock_acquire_recursive>
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	4621      	mov	r1, r4
 800d2d2:	f7ff ff5f 	bl	800d194 <__sflush_r>
 800d2d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2d8:	07da      	lsls	r2, r3, #31
 800d2da:	4605      	mov	r5, r0
 800d2dc:	d4e4      	bmi.n	800d2a8 <_fflush_r+0xc>
 800d2de:	89a3      	ldrh	r3, [r4, #12]
 800d2e0:	059b      	lsls	r3, r3, #22
 800d2e2:	d4e1      	bmi.n	800d2a8 <_fflush_r+0xc>
 800d2e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2e6:	f7fe fa93 	bl	800b810 <__retarget_lock_release_recursive>
 800d2ea:	e7dd      	b.n	800d2a8 <_fflush_r+0xc>

0800d2ec <__swhatbuf_r>:
 800d2ec:	b570      	push	{r4, r5, r6, lr}
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2f4:	2900      	cmp	r1, #0
 800d2f6:	b096      	sub	sp, #88	@ 0x58
 800d2f8:	4615      	mov	r5, r2
 800d2fa:	461e      	mov	r6, r3
 800d2fc:	da0d      	bge.n	800d31a <__swhatbuf_r+0x2e>
 800d2fe:	89a3      	ldrh	r3, [r4, #12]
 800d300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d304:	f04f 0100 	mov.w	r1, #0
 800d308:	bf14      	ite	ne
 800d30a:	2340      	movne	r3, #64	@ 0x40
 800d30c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d310:	2000      	movs	r0, #0
 800d312:	6031      	str	r1, [r6, #0]
 800d314:	602b      	str	r3, [r5, #0]
 800d316:	b016      	add	sp, #88	@ 0x58
 800d318:	bd70      	pop	{r4, r5, r6, pc}
 800d31a:	466a      	mov	r2, sp
 800d31c:	f000 f862 	bl	800d3e4 <_fstat_r>
 800d320:	2800      	cmp	r0, #0
 800d322:	dbec      	blt.n	800d2fe <__swhatbuf_r+0x12>
 800d324:	9901      	ldr	r1, [sp, #4]
 800d326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d32a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d32e:	4259      	negs	r1, r3
 800d330:	4159      	adcs	r1, r3
 800d332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d336:	e7eb      	b.n	800d310 <__swhatbuf_r+0x24>

0800d338 <__smakebuf_r>:
 800d338:	898b      	ldrh	r3, [r1, #12]
 800d33a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d33c:	079d      	lsls	r5, r3, #30
 800d33e:	4606      	mov	r6, r0
 800d340:	460c      	mov	r4, r1
 800d342:	d507      	bpl.n	800d354 <__smakebuf_r+0x1c>
 800d344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	6123      	str	r3, [r4, #16]
 800d34c:	2301      	movs	r3, #1
 800d34e:	6163      	str	r3, [r4, #20]
 800d350:	b003      	add	sp, #12
 800d352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d354:	ab01      	add	r3, sp, #4
 800d356:	466a      	mov	r2, sp
 800d358:	f7ff ffc8 	bl	800d2ec <__swhatbuf_r>
 800d35c:	9f00      	ldr	r7, [sp, #0]
 800d35e:	4605      	mov	r5, r0
 800d360:	4639      	mov	r1, r7
 800d362:	4630      	mov	r0, r6
 800d364:	f7fd fab8 	bl	800a8d8 <_malloc_r>
 800d368:	b948      	cbnz	r0, 800d37e <__smakebuf_r+0x46>
 800d36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d36e:	059a      	lsls	r2, r3, #22
 800d370:	d4ee      	bmi.n	800d350 <__smakebuf_r+0x18>
 800d372:	f023 0303 	bic.w	r3, r3, #3
 800d376:	f043 0302 	orr.w	r3, r3, #2
 800d37a:	81a3      	strh	r3, [r4, #12]
 800d37c:	e7e2      	b.n	800d344 <__smakebuf_r+0xc>
 800d37e:	89a3      	ldrh	r3, [r4, #12]
 800d380:	6020      	str	r0, [r4, #0]
 800d382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d386:	81a3      	strh	r3, [r4, #12]
 800d388:	9b01      	ldr	r3, [sp, #4]
 800d38a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d38e:	b15b      	cbz	r3, 800d3a8 <__smakebuf_r+0x70>
 800d390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d394:	4630      	mov	r0, r6
 800d396:	f000 f837 	bl	800d408 <_isatty_r>
 800d39a:	b128      	cbz	r0, 800d3a8 <__smakebuf_r+0x70>
 800d39c:	89a3      	ldrh	r3, [r4, #12]
 800d39e:	f023 0303 	bic.w	r3, r3, #3
 800d3a2:	f043 0301 	orr.w	r3, r3, #1
 800d3a6:	81a3      	strh	r3, [r4, #12]
 800d3a8:	89a3      	ldrh	r3, [r4, #12]
 800d3aa:	431d      	orrs	r5, r3
 800d3ac:	81a5      	strh	r5, [r4, #12]
 800d3ae:	e7cf      	b.n	800d350 <__smakebuf_r+0x18>

0800d3b0 <memmove>:
 800d3b0:	4288      	cmp	r0, r1
 800d3b2:	b510      	push	{r4, lr}
 800d3b4:	eb01 0402 	add.w	r4, r1, r2
 800d3b8:	d902      	bls.n	800d3c0 <memmove+0x10>
 800d3ba:	4284      	cmp	r4, r0
 800d3bc:	4623      	mov	r3, r4
 800d3be:	d807      	bhi.n	800d3d0 <memmove+0x20>
 800d3c0:	1e43      	subs	r3, r0, #1
 800d3c2:	42a1      	cmp	r1, r4
 800d3c4:	d008      	beq.n	800d3d8 <memmove+0x28>
 800d3c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3ce:	e7f8      	b.n	800d3c2 <memmove+0x12>
 800d3d0:	4402      	add	r2, r0
 800d3d2:	4601      	mov	r1, r0
 800d3d4:	428a      	cmp	r2, r1
 800d3d6:	d100      	bne.n	800d3da <memmove+0x2a>
 800d3d8:	bd10      	pop	{r4, pc}
 800d3da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3e2:	e7f7      	b.n	800d3d4 <memmove+0x24>

0800d3e4 <_fstat_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4d07      	ldr	r5, [pc, #28]	@ (800d404 <_fstat_r+0x20>)
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4608      	mov	r0, r1
 800d3ee:	4611      	mov	r1, r2
 800d3f0:	602b      	str	r3, [r5, #0]
 800d3f2:	f7f6 f8fa 	bl	80035ea <_fstat>
 800d3f6:	1c43      	adds	r3, r0, #1
 800d3f8:	d102      	bne.n	800d400 <_fstat_r+0x1c>
 800d3fa:	682b      	ldr	r3, [r5, #0]
 800d3fc:	b103      	cbz	r3, 800d400 <_fstat_r+0x1c>
 800d3fe:	6023      	str	r3, [r4, #0]
 800d400:	bd38      	pop	{r3, r4, r5, pc}
 800d402:	bf00      	nop
 800d404:	20000b18 	.word	0x20000b18

0800d408 <_isatty_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4d06      	ldr	r5, [pc, #24]	@ (800d424 <_isatty_r+0x1c>)
 800d40c:	2300      	movs	r3, #0
 800d40e:	4604      	mov	r4, r0
 800d410:	4608      	mov	r0, r1
 800d412:	602b      	str	r3, [r5, #0]
 800d414:	f7f6 f8f9 	bl	800360a <_isatty>
 800d418:	1c43      	adds	r3, r0, #1
 800d41a:	d102      	bne.n	800d422 <_isatty_r+0x1a>
 800d41c:	682b      	ldr	r3, [r5, #0]
 800d41e:	b103      	cbz	r3, 800d422 <_isatty_r+0x1a>
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	bd38      	pop	{r3, r4, r5, pc}
 800d424:	20000b18 	.word	0x20000b18

0800d428 <__assert_func>:
 800d428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d42a:	4614      	mov	r4, r2
 800d42c:	461a      	mov	r2, r3
 800d42e:	4b09      	ldr	r3, [pc, #36]	@ (800d454 <__assert_func+0x2c>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4605      	mov	r5, r0
 800d434:	68d8      	ldr	r0, [r3, #12]
 800d436:	b954      	cbnz	r4, 800d44e <__assert_func+0x26>
 800d438:	4b07      	ldr	r3, [pc, #28]	@ (800d458 <__assert_func+0x30>)
 800d43a:	461c      	mov	r4, r3
 800d43c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d440:	9100      	str	r1, [sp, #0]
 800d442:	462b      	mov	r3, r5
 800d444:	4905      	ldr	r1, [pc, #20]	@ (800d45c <__assert_func+0x34>)
 800d446:	f000 f86f 	bl	800d528 <fiprintf>
 800d44a:	f000 f87f 	bl	800d54c <abort>
 800d44e:	4b04      	ldr	r3, [pc, #16]	@ (800d460 <__assert_func+0x38>)
 800d450:	e7f4      	b.n	800d43c <__assert_func+0x14>
 800d452:	bf00      	nop
 800d454:	20000050 	.word	0x20000050
 800d458:	0800dc76 	.word	0x0800dc76
 800d45c:	0800dc48 	.word	0x0800dc48
 800d460:	0800dc3b 	.word	0x0800dc3b

0800d464 <_calloc_r>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	fba1 5402 	umull	r5, r4, r1, r2
 800d46a:	b93c      	cbnz	r4, 800d47c <_calloc_r+0x18>
 800d46c:	4629      	mov	r1, r5
 800d46e:	f7fd fa33 	bl	800a8d8 <_malloc_r>
 800d472:	4606      	mov	r6, r0
 800d474:	b928      	cbnz	r0, 800d482 <_calloc_r+0x1e>
 800d476:	2600      	movs	r6, #0
 800d478:	4630      	mov	r0, r6
 800d47a:	bd70      	pop	{r4, r5, r6, pc}
 800d47c:	220c      	movs	r2, #12
 800d47e:	6002      	str	r2, [r0, #0]
 800d480:	e7f9      	b.n	800d476 <_calloc_r+0x12>
 800d482:	462a      	mov	r2, r5
 800d484:	4621      	mov	r1, r4
 800d486:	f7fe f935 	bl	800b6f4 <memset>
 800d48a:	e7f5      	b.n	800d478 <_calloc_r+0x14>

0800d48c <__ascii_mbtowc>:
 800d48c:	b082      	sub	sp, #8
 800d48e:	b901      	cbnz	r1, 800d492 <__ascii_mbtowc+0x6>
 800d490:	a901      	add	r1, sp, #4
 800d492:	b142      	cbz	r2, 800d4a6 <__ascii_mbtowc+0x1a>
 800d494:	b14b      	cbz	r3, 800d4aa <__ascii_mbtowc+0x1e>
 800d496:	7813      	ldrb	r3, [r2, #0]
 800d498:	600b      	str	r3, [r1, #0]
 800d49a:	7812      	ldrb	r2, [r2, #0]
 800d49c:	1e10      	subs	r0, r2, #0
 800d49e:	bf18      	it	ne
 800d4a0:	2001      	movne	r0, #1
 800d4a2:	b002      	add	sp, #8
 800d4a4:	4770      	bx	lr
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	e7fb      	b.n	800d4a2 <__ascii_mbtowc+0x16>
 800d4aa:	f06f 0001 	mvn.w	r0, #1
 800d4ae:	e7f8      	b.n	800d4a2 <__ascii_mbtowc+0x16>

0800d4b0 <_realloc_r>:
 800d4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b4:	4680      	mov	r8, r0
 800d4b6:	4615      	mov	r5, r2
 800d4b8:	460c      	mov	r4, r1
 800d4ba:	b921      	cbnz	r1, 800d4c6 <_realloc_r+0x16>
 800d4bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	f7fd ba09 	b.w	800a8d8 <_malloc_r>
 800d4c6:	b92a      	cbnz	r2, 800d4d4 <_realloc_r+0x24>
 800d4c8:	f7fe fffe 	bl	800c4c8 <_free_r>
 800d4cc:	2400      	movs	r4, #0
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d4:	f000 f841 	bl	800d55a <_malloc_usable_size_r>
 800d4d8:	4285      	cmp	r5, r0
 800d4da:	4606      	mov	r6, r0
 800d4dc:	d802      	bhi.n	800d4e4 <_realloc_r+0x34>
 800d4de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d4e2:	d8f4      	bhi.n	800d4ce <_realloc_r+0x1e>
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	4640      	mov	r0, r8
 800d4e8:	f7fd f9f6 	bl	800a8d8 <_malloc_r>
 800d4ec:	4607      	mov	r7, r0
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d0ec      	beq.n	800d4cc <_realloc_r+0x1c>
 800d4f2:	42b5      	cmp	r5, r6
 800d4f4:	462a      	mov	r2, r5
 800d4f6:	4621      	mov	r1, r4
 800d4f8:	bf28      	it	cs
 800d4fa:	4632      	movcs	r2, r6
 800d4fc:	f7fe f989 	bl	800b812 <memcpy>
 800d500:	4621      	mov	r1, r4
 800d502:	4640      	mov	r0, r8
 800d504:	f7fe ffe0 	bl	800c4c8 <_free_r>
 800d508:	463c      	mov	r4, r7
 800d50a:	e7e0      	b.n	800d4ce <_realloc_r+0x1e>

0800d50c <__ascii_wctomb>:
 800d50c:	4603      	mov	r3, r0
 800d50e:	4608      	mov	r0, r1
 800d510:	b141      	cbz	r1, 800d524 <__ascii_wctomb+0x18>
 800d512:	2aff      	cmp	r2, #255	@ 0xff
 800d514:	d904      	bls.n	800d520 <__ascii_wctomb+0x14>
 800d516:	228a      	movs	r2, #138	@ 0x8a
 800d518:	601a      	str	r2, [r3, #0]
 800d51a:	f04f 30ff 	mov.w	r0, #4294967295
 800d51e:	4770      	bx	lr
 800d520:	700a      	strb	r2, [r1, #0]
 800d522:	2001      	movs	r0, #1
 800d524:	4770      	bx	lr
	...

0800d528 <fiprintf>:
 800d528:	b40e      	push	{r1, r2, r3}
 800d52a:	b503      	push	{r0, r1, lr}
 800d52c:	4601      	mov	r1, r0
 800d52e:	ab03      	add	r3, sp, #12
 800d530:	4805      	ldr	r0, [pc, #20]	@ (800d548 <fiprintf+0x20>)
 800d532:	f853 2b04 	ldr.w	r2, [r3], #4
 800d536:	6800      	ldr	r0, [r0, #0]
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	f7ff fd13 	bl	800cf64 <_vfiprintf_r>
 800d53e:	b002      	add	sp, #8
 800d540:	f85d eb04 	ldr.w	lr, [sp], #4
 800d544:	b003      	add	sp, #12
 800d546:	4770      	bx	lr
 800d548:	20000050 	.word	0x20000050

0800d54c <abort>:
 800d54c:	b508      	push	{r3, lr}
 800d54e:	2006      	movs	r0, #6
 800d550:	f000 f834 	bl	800d5bc <raise>
 800d554:	2001      	movs	r0, #1
 800d556:	f7f6 f814 	bl	8003582 <_exit>

0800d55a <_malloc_usable_size_r>:
 800d55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d55e:	1f18      	subs	r0, r3, #4
 800d560:	2b00      	cmp	r3, #0
 800d562:	bfbc      	itt	lt
 800d564:	580b      	ldrlt	r3, [r1, r0]
 800d566:	18c0      	addlt	r0, r0, r3
 800d568:	4770      	bx	lr

0800d56a <_raise_r>:
 800d56a:	291f      	cmp	r1, #31
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4605      	mov	r5, r0
 800d570:	460c      	mov	r4, r1
 800d572:	d904      	bls.n	800d57e <_raise_r+0x14>
 800d574:	2316      	movs	r3, #22
 800d576:	6003      	str	r3, [r0, #0]
 800d578:	f04f 30ff 	mov.w	r0, #4294967295
 800d57c:	bd38      	pop	{r3, r4, r5, pc}
 800d57e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d580:	b112      	cbz	r2, 800d588 <_raise_r+0x1e>
 800d582:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d586:	b94b      	cbnz	r3, 800d59c <_raise_r+0x32>
 800d588:	4628      	mov	r0, r5
 800d58a:	f000 f831 	bl	800d5f0 <_getpid_r>
 800d58e:	4622      	mov	r2, r4
 800d590:	4601      	mov	r1, r0
 800d592:	4628      	mov	r0, r5
 800d594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d598:	f000 b818 	b.w	800d5cc <_kill_r>
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d00a      	beq.n	800d5b6 <_raise_r+0x4c>
 800d5a0:	1c59      	adds	r1, r3, #1
 800d5a2:	d103      	bne.n	800d5ac <_raise_r+0x42>
 800d5a4:	2316      	movs	r3, #22
 800d5a6:	6003      	str	r3, [r0, #0]
 800d5a8:	2001      	movs	r0, #1
 800d5aa:	e7e7      	b.n	800d57c <_raise_r+0x12>
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	4798      	blx	r3
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	e7e0      	b.n	800d57c <_raise_r+0x12>
	...

0800d5bc <raise>:
 800d5bc:	4b02      	ldr	r3, [pc, #8]	@ (800d5c8 <raise+0xc>)
 800d5be:	4601      	mov	r1, r0
 800d5c0:	6818      	ldr	r0, [r3, #0]
 800d5c2:	f7ff bfd2 	b.w	800d56a <_raise_r>
 800d5c6:	bf00      	nop
 800d5c8:	20000050 	.word	0x20000050

0800d5cc <_kill_r>:
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	4d07      	ldr	r5, [pc, #28]	@ (800d5ec <_kill_r+0x20>)
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	4608      	mov	r0, r1
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	602b      	str	r3, [r5, #0]
 800d5da:	f7f5 ffc2 	bl	8003562 <_kill>
 800d5de:	1c43      	adds	r3, r0, #1
 800d5e0:	d102      	bne.n	800d5e8 <_kill_r+0x1c>
 800d5e2:	682b      	ldr	r3, [r5, #0]
 800d5e4:	b103      	cbz	r3, 800d5e8 <_kill_r+0x1c>
 800d5e6:	6023      	str	r3, [r4, #0]
 800d5e8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ea:	bf00      	nop
 800d5ec:	20000b18 	.word	0x20000b18

0800d5f0 <_getpid_r>:
 800d5f0:	f7f5 bfaf 	b.w	8003552 <_getpid>

0800d5f4 <_init>:
 800d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f6:	bf00      	nop
 800d5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5fa:	bc08      	pop	{r3}
 800d5fc:	469e      	mov	lr, r3
 800d5fe:	4770      	bx	lr

0800d600 <_fini>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	bf00      	nop
 800d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d606:	bc08      	pop	{r3}
 800d608:	469e      	mov	lr, r3
 800d60a:	4770      	bx	lr
